
A4960_BLDCBrushLessMotorDriver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c9c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  08006e2c  08006e2c  00016e2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ef4  08006ef4  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08006ef4  08006ef4  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006ef4  08006ef4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08006ef4  08006ef4  00016ef4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08006efc  08006efc  00016efc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006f04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          0000121c  20000078  20000078  00020078  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20001294  20001294  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c8c7  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000033c8  00000000  00000000  0003c96b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001418  00000000  00000000  0003fd38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001300  00000000  00000000  00041150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002006a  00000000  00000000  00042450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016e49  00000000  00000000  000624ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b4151  00000000  00000000  00079303  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0012d454  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000059b4  00000000  00000000  0012d4a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006e14 	.word	0x08006e14

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08006e14 	.word	0x08006e14

080001d0 <__aeabi_dmul>:
 80001d0:	b570      	push	{r4, r5, r6, lr}
 80001d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001de:	bf1d      	ittte	ne
 80001e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001e4:	ea94 0f0c 	teqne	r4, ip
 80001e8:	ea95 0f0c 	teqne	r5, ip
 80001ec:	f000 f8de 	bleq	80003ac <__aeabi_dmul+0x1dc>
 80001f0:	442c      	add	r4, r5
 80001f2:	ea81 0603 	eor.w	r6, r1, r3
 80001f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000202:	bf18      	it	ne
 8000204:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000208:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800020c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000210:	d038      	beq.n	8000284 <__aeabi_dmul+0xb4>
 8000212:	fba0 ce02 	umull	ip, lr, r0, r2
 8000216:	f04f 0500 	mov.w	r5, #0
 800021a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800021e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000222:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000226:	f04f 0600 	mov.w	r6, #0
 800022a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800022e:	f09c 0f00 	teq	ip, #0
 8000232:	bf18      	it	ne
 8000234:	f04e 0e01 	orrne.w	lr, lr, #1
 8000238:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800023c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000240:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000244:	d204      	bcs.n	8000250 <__aeabi_dmul+0x80>
 8000246:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800024a:	416d      	adcs	r5, r5
 800024c:	eb46 0606 	adc.w	r6, r6, r6
 8000250:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000254:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000258:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800025c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000260:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000264:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000268:	bf88      	it	hi
 800026a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800026e:	d81e      	bhi.n	80002ae <__aeabi_dmul+0xde>
 8000270:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000274:	bf08      	it	eq
 8000276:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800027a:	f150 0000 	adcs.w	r0, r0, #0
 800027e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000288:	ea46 0101 	orr.w	r1, r6, r1
 800028c:	ea40 0002 	orr.w	r0, r0, r2
 8000290:	ea81 0103 	eor.w	r1, r1, r3
 8000294:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000298:	bfc2      	ittt	gt
 800029a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800029e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002a2:	bd70      	popgt	{r4, r5, r6, pc}
 80002a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002a8:	f04f 0e00 	mov.w	lr, #0
 80002ac:	3c01      	subs	r4, #1
 80002ae:	f300 80ab 	bgt.w	8000408 <__aeabi_dmul+0x238>
 80002b2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002b6:	bfde      	ittt	le
 80002b8:	2000      	movle	r0, #0
 80002ba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002be:	bd70      	pople	{r4, r5, r6, pc}
 80002c0:	f1c4 0400 	rsb	r4, r4, #0
 80002c4:	3c20      	subs	r4, #32
 80002c6:	da35      	bge.n	8000334 <__aeabi_dmul+0x164>
 80002c8:	340c      	adds	r4, #12
 80002ca:	dc1b      	bgt.n	8000304 <__aeabi_dmul+0x134>
 80002cc:	f104 0414 	add.w	r4, r4, #20
 80002d0:	f1c4 0520 	rsb	r5, r4, #32
 80002d4:	fa00 f305 	lsl.w	r3, r0, r5
 80002d8:	fa20 f004 	lsr.w	r0, r0, r4
 80002dc:	fa01 f205 	lsl.w	r2, r1, r5
 80002e0:	ea40 0002 	orr.w	r0, r0, r2
 80002e4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002f0:	fa21 f604 	lsr.w	r6, r1, r4
 80002f4:	eb42 0106 	adc.w	r1, r2, r6
 80002f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002fc:	bf08      	it	eq
 80002fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000302:	bd70      	pop	{r4, r5, r6, pc}
 8000304:	f1c4 040c 	rsb	r4, r4, #12
 8000308:	f1c4 0520 	rsb	r5, r4, #32
 800030c:	fa00 f304 	lsl.w	r3, r0, r4
 8000310:	fa20 f005 	lsr.w	r0, r0, r5
 8000314:	fa01 f204 	lsl.w	r2, r1, r4
 8000318:	ea40 0002 	orr.w	r0, r0, r2
 800031c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000320:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000324:	f141 0100 	adc.w	r1, r1, #0
 8000328:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800032c:	bf08      	it	eq
 800032e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f1c4 0520 	rsb	r5, r4, #32
 8000338:	fa00 f205 	lsl.w	r2, r0, r5
 800033c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000340:	fa20 f304 	lsr.w	r3, r0, r4
 8000344:	fa01 f205 	lsl.w	r2, r1, r5
 8000348:	ea43 0302 	orr.w	r3, r3, r2
 800034c:	fa21 f004 	lsr.w	r0, r1, r4
 8000350:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000354:	fa21 f204 	lsr.w	r2, r1, r4
 8000358:	ea20 0002 	bic.w	r0, r0, r2
 800035c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000360:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000364:	bf08      	it	eq
 8000366:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800036a:	bd70      	pop	{r4, r5, r6, pc}
 800036c:	f094 0f00 	teq	r4, #0
 8000370:	d10f      	bne.n	8000392 <__aeabi_dmul+0x1c2>
 8000372:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000376:	0040      	lsls	r0, r0, #1
 8000378:	eb41 0101 	adc.w	r1, r1, r1
 800037c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000380:	bf08      	it	eq
 8000382:	3c01      	subeq	r4, #1
 8000384:	d0f7      	beq.n	8000376 <__aeabi_dmul+0x1a6>
 8000386:	ea41 0106 	orr.w	r1, r1, r6
 800038a:	f095 0f00 	teq	r5, #0
 800038e:	bf18      	it	ne
 8000390:	4770      	bxne	lr
 8000392:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000396:	0052      	lsls	r2, r2, #1
 8000398:	eb43 0303 	adc.w	r3, r3, r3
 800039c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003a0:	bf08      	it	eq
 80003a2:	3d01      	subeq	r5, #1
 80003a4:	d0f7      	beq.n	8000396 <__aeabi_dmul+0x1c6>
 80003a6:	ea43 0306 	orr.w	r3, r3, r6
 80003aa:	4770      	bx	lr
 80003ac:	ea94 0f0c 	teq	r4, ip
 80003b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003b4:	bf18      	it	ne
 80003b6:	ea95 0f0c 	teqne	r5, ip
 80003ba:	d00c      	beq.n	80003d6 <__aeabi_dmul+0x206>
 80003bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003c0:	bf18      	it	ne
 80003c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003c6:	d1d1      	bne.n	800036c <__aeabi_dmul+0x19c>
 80003c8:	ea81 0103 	eor.w	r1, r1, r3
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	f04f 0000 	mov.w	r0, #0
 80003d4:	bd70      	pop	{r4, r5, r6, pc}
 80003d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003da:	bf06      	itte	eq
 80003dc:	4610      	moveq	r0, r2
 80003de:	4619      	moveq	r1, r3
 80003e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003e4:	d019      	beq.n	800041a <__aeabi_dmul+0x24a>
 80003e6:	ea94 0f0c 	teq	r4, ip
 80003ea:	d102      	bne.n	80003f2 <__aeabi_dmul+0x222>
 80003ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003f0:	d113      	bne.n	800041a <__aeabi_dmul+0x24a>
 80003f2:	ea95 0f0c 	teq	r5, ip
 80003f6:	d105      	bne.n	8000404 <__aeabi_dmul+0x234>
 80003f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003fc:	bf1c      	itt	ne
 80003fe:	4610      	movne	r0, r2
 8000400:	4619      	movne	r1, r3
 8000402:	d10a      	bne.n	800041a <__aeabi_dmul+0x24a>
 8000404:	ea81 0103 	eor.w	r1, r1, r3
 8000408:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800040c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000410:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000414:	f04f 0000 	mov.w	r0, #0
 8000418:	bd70      	pop	{r4, r5, r6, pc}
 800041a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800041e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000422:	bd70      	pop	{r4, r5, r6, pc}

08000424 <__aeabi_drsub>:
 8000424:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000428:	e002      	b.n	8000430 <__adddf3>
 800042a:	bf00      	nop

0800042c <__aeabi_dsub>:
 800042c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000430 <__adddf3>:
 8000430:	b530      	push	{r4, r5, lr}
 8000432:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000436:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800043a:	ea94 0f05 	teq	r4, r5
 800043e:	bf08      	it	eq
 8000440:	ea90 0f02 	teqeq	r0, r2
 8000444:	bf1f      	itttt	ne
 8000446:	ea54 0c00 	orrsne.w	ip, r4, r0
 800044a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800044e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000452:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000456:	f000 80e2 	beq.w	800061e <__adddf3+0x1ee>
 800045a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800045e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000462:	bfb8      	it	lt
 8000464:	426d      	neglt	r5, r5
 8000466:	dd0c      	ble.n	8000482 <__adddf3+0x52>
 8000468:	442c      	add	r4, r5
 800046a:	ea80 0202 	eor.w	r2, r0, r2
 800046e:	ea81 0303 	eor.w	r3, r1, r3
 8000472:	ea82 0000 	eor.w	r0, r2, r0
 8000476:	ea83 0101 	eor.w	r1, r3, r1
 800047a:	ea80 0202 	eor.w	r2, r0, r2
 800047e:	ea81 0303 	eor.w	r3, r1, r3
 8000482:	2d36      	cmp	r5, #54	; 0x36
 8000484:	bf88      	it	hi
 8000486:	bd30      	pophi	{r4, r5, pc}
 8000488:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800048c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000490:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000494:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000498:	d002      	beq.n	80004a0 <__adddf3+0x70>
 800049a:	4240      	negs	r0, r0
 800049c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004a4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004ac:	d002      	beq.n	80004b4 <__adddf3+0x84>
 80004ae:	4252      	negs	r2, r2
 80004b0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004b4:	ea94 0f05 	teq	r4, r5
 80004b8:	f000 80a7 	beq.w	800060a <__adddf3+0x1da>
 80004bc:	f1a4 0401 	sub.w	r4, r4, #1
 80004c0:	f1d5 0e20 	rsbs	lr, r5, #32
 80004c4:	db0d      	blt.n	80004e2 <__adddf3+0xb2>
 80004c6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004ca:	fa22 f205 	lsr.w	r2, r2, r5
 80004ce:	1880      	adds	r0, r0, r2
 80004d0:	f141 0100 	adc.w	r1, r1, #0
 80004d4:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d8:	1880      	adds	r0, r0, r2
 80004da:	fa43 f305 	asr.w	r3, r3, r5
 80004de:	4159      	adcs	r1, r3
 80004e0:	e00e      	b.n	8000500 <__adddf3+0xd0>
 80004e2:	f1a5 0520 	sub.w	r5, r5, #32
 80004e6:	f10e 0e20 	add.w	lr, lr, #32
 80004ea:	2a01      	cmp	r2, #1
 80004ec:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004f0:	bf28      	it	cs
 80004f2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004f6:	fa43 f305 	asr.w	r3, r3, r5
 80004fa:	18c0      	adds	r0, r0, r3
 80004fc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	d507      	bpl.n	8000516 <__adddf3+0xe6>
 8000506:	f04f 0e00 	mov.w	lr, #0
 800050a:	f1dc 0c00 	rsbs	ip, ip, #0
 800050e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000512:	eb6e 0101 	sbc.w	r1, lr, r1
 8000516:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800051a:	d31b      	bcc.n	8000554 <__adddf3+0x124>
 800051c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000520:	d30c      	bcc.n	800053c <__adddf3+0x10c>
 8000522:	0849      	lsrs	r1, r1, #1
 8000524:	ea5f 0030 	movs.w	r0, r0, rrx
 8000528:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800052c:	f104 0401 	add.w	r4, r4, #1
 8000530:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000534:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000538:	f080 809a 	bcs.w	8000670 <__adddf3+0x240>
 800053c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000540:	bf08      	it	eq
 8000542:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000546:	f150 0000 	adcs.w	r0, r0, #0
 800054a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800054e:	ea41 0105 	orr.w	r1, r1, r5
 8000552:	bd30      	pop	{r4, r5, pc}
 8000554:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000558:	4140      	adcs	r0, r0
 800055a:	eb41 0101 	adc.w	r1, r1, r1
 800055e:	3c01      	subs	r4, #1
 8000560:	bf28      	it	cs
 8000562:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000566:	d2e9      	bcs.n	800053c <__adddf3+0x10c>
 8000568:	f091 0f00 	teq	r1, #0
 800056c:	bf04      	itt	eq
 800056e:	4601      	moveq	r1, r0
 8000570:	2000      	moveq	r0, #0
 8000572:	fab1 f381 	clz	r3, r1
 8000576:	bf08      	it	eq
 8000578:	3320      	addeq	r3, #32
 800057a:	f1a3 030b 	sub.w	r3, r3, #11
 800057e:	f1b3 0220 	subs.w	r2, r3, #32
 8000582:	da0c      	bge.n	800059e <__adddf3+0x16e>
 8000584:	320c      	adds	r2, #12
 8000586:	dd08      	ble.n	800059a <__adddf3+0x16a>
 8000588:	f102 0c14 	add.w	ip, r2, #20
 800058c:	f1c2 020c 	rsb	r2, r2, #12
 8000590:	fa01 f00c 	lsl.w	r0, r1, ip
 8000594:	fa21 f102 	lsr.w	r1, r1, r2
 8000598:	e00c      	b.n	80005b4 <__adddf3+0x184>
 800059a:	f102 0214 	add.w	r2, r2, #20
 800059e:	bfd8      	it	le
 80005a0:	f1c2 0c20 	rsble	ip, r2, #32
 80005a4:	fa01 f102 	lsl.w	r1, r1, r2
 80005a8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005ac:	bfdc      	itt	le
 80005ae:	ea41 010c 	orrle.w	r1, r1, ip
 80005b2:	4090      	lslle	r0, r2
 80005b4:	1ae4      	subs	r4, r4, r3
 80005b6:	bfa2      	ittt	ge
 80005b8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005bc:	4329      	orrge	r1, r5
 80005be:	bd30      	popge	{r4, r5, pc}
 80005c0:	ea6f 0404 	mvn.w	r4, r4
 80005c4:	3c1f      	subs	r4, #31
 80005c6:	da1c      	bge.n	8000602 <__adddf3+0x1d2>
 80005c8:	340c      	adds	r4, #12
 80005ca:	dc0e      	bgt.n	80005ea <__adddf3+0x1ba>
 80005cc:	f104 0414 	add.w	r4, r4, #20
 80005d0:	f1c4 0220 	rsb	r2, r4, #32
 80005d4:	fa20 f004 	lsr.w	r0, r0, r4
 80005d8:	fa01 f302 	lsl.w	r3, r1, r2
 80005dc:	ea40 0003 	orr.w	r0, r0, r3
 80005e0:	fa21 f304 	lsr.w	r3, r1, r4
 80005e4:	ea45 0103 	orr.w	r1, r5, r3
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	f1c4 040c 	rsb	r4, r4, #12
 80005ee:	f1c4 0220 	rsb	r2, r4, #32
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 f304 	lsl.w	r3, r1, r4
 80005fa:	ea40 0003 	orr.w	r0, r0, r3
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	fa21 f004 	lsr.w	r0, r1, r4
 8000606:	4629      	mov	r1, r5
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	f094 0f00 	teq	r4, #0
 800060e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000612:	bf06      	itte	eq
 8000614:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000618:	3401      	addeq	r4, #1
 800061a:	3d01      	subne	r5, #1
 800061c:	e74e      	b.n	80004bc <__adddf3+0x8c>
 800061e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000622:	bf18      	it	ne
 8000624:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000628:	d029      	beq.n	800067e <__adddf3+0x24e>
 800062a:	ea94 0f05 	teq	r4, r5
 800062e:	bf08      	it	eq
 8000630:	ea90 0f02 	teqeq	r0, r2
 8000634:	d005      	beq.n	8000642 <__adddf3+0x212>
 8000636:	ea54 0c00 	orrs.w	ip, r4, r0
 800063a:	bf04      	itt	eq
 800063c:	4619      	moveq	r1, r3
 800063e:	4610      	moveq	r0, r2
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	ea91 0f03 	teq	r1, r3
 8000646:	bf1e      	ittt	ne
 8000648:	2100      	movne	r1, #0
 800064a:	2000      	movne	r0, #0
 800064c:	bd30      	popne	{r4, r5, pc}
 800064e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000652:	d105      	bne.n	8000660 <__adddf3+0x230>
 8000654:	0040      	lsls	r0, r0, #1
 8000656:	4149      	adcs	r1, r1
 8000658:	bf28      	it	cs
 800065a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800065e:	bd30      	pop	{r4, r5, pc}
 8000660:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000664:	bf3c      	itt	cc
 8000666:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800066a:	bd30      	popcc	{r4, r5, pc}
 800066c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000670:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000674:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000678:	f04f 0000 	mov.w	r0, #0
 800067c:	bd30      	pop	{r4, r5, pc}
 800067e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000682:	bf1a      	itte	ne
 8000684:	4619      	movne	r1, r3
 8000686:	4610      	movne	r0, r2
 8000688:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800068c:	bf1c      	itt	ne
 800068e:	460b      	movne	r3, r1
 8000690:	4602      	movne	r2, r0
 8000692:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000696:	bf06      	itte	eq
 8000698:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800069c:	ea91 0f03 	teqeq	r1, r3
 80006a0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006a4:	bd30      	pop	{r4, r5, pc}
 80006a6:	bf00      	nop

080006a8 <__aeabi_ui2d>:
 80006a8:	f090 0f00 	teq	r0, #0
 80006ac:	bf04      	itt	eq
 80006ae:	2100      	moveq	r1, #0
 80006b0:	4770      	bxeq	lr
 80006b2:	b530      	push	{r4, r5, lr}
 80006b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006bc:	f04f 0500 	mov.w	r5, #0
 80006c0:	f04f 0100 	mov.w	r1, #0
 80006c4:	e750      	b.n	8000568 <__adddf3+0x138>
 80006c6:	bf00      	nop

080006c8 <__aeabi_i2d>:
 80006c8:	f090 0f00 	teq	r0, #0
 80006cc:	bf04      	itt	eq
 80006ce:	2100      	moveq	r1, #0
 80006d0:	4770      	bxeq	lr
 80006d2:	b530      	push	{r4, r5, lr}
 80006d4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006dc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006e0:	bf48      	it	mi
 80006e2:	4240      	negmi	r0, r0
 80006e4:	f04f 0100 	mov.w	r1, #0
 80006e8:	e73e      	b.n	8000568 <__adddf3+0x138>
 80006ea:	bf00      	nop

080006ec <__aeabi_f2d>:
 80006ec:	0042      	lsls	r2, r0, #1
 80006ee:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80006f6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006fa:	bf1f      	itttt	ne
 80006fc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000700:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000704:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000708:	4770      	bxne	lr
 800070a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800070e:	bf08      	it	eq
 8000710:	4770      	bxeq	lr
 8000712:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000716:	bf04      	itt	eq
 8000718:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800071c:	4770      	bxeq	lr
 800071e:	b530      	push	{r4, r5, lr}
 8000720:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000724:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000728:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800072c:	e71c      	b.n	8000568 <__adddf3+0x138>
 800072e:	bf00      	nop

08000730 <__aeabi_ul2d>:
 8000730:	ea50 0201 	orrs.w	r2, r0, r1
 8000734:	bf08      	it	eq
 8000736:	4770      	bxeq	lr
 8000738:	b530      	push	{r4, r5, lr}
 800073a:	f04f 0500 	mov.w	r5, #0
 800073e:	e00a      	b.n	8000756 <__aeabi_l2d+0x16>

08000740 <__aeabi_l2d>:
 8000740:	ea50 0201 	orrs.w	r2, r0, r1
 8000744:	bf08      	it	eq
 8000746:	4770      	bxeq	lr
 8000748:	b530      	push	{r4, r5, lr}
 800074a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800074e:	d502      	bpl.n	8000756 <__aeabi_l2d+0x16>
 8000750:	4240      	negs	r0, r0
 8000752:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000756:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800075a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800075e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000762:	f43f aed8 	beq.w	8000516 <__adddf3+0xe6>
 8000766:	f04f 0203 	mov.w	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000776:	bf18      	it	ne
 8000778:	3203      	addne	r2, #3
 800077a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800077e:	f1c2 0320 	rsb	r3, r2, #32
 8000782:	fa00 fc03 	lsl.w	ip, r0, r3
 8000786:	fa20 f002 	lsr.w	r0, r0, r2
 800078a:	fa01 fe03 	lsl.w	lr, r1, r3
 800078e:	ea40 000e 	orr.w	r0, r0, lr
 8000792:	fa21 f102 	lsr.w	r1, r1, r2
 8000796:	4414      	add	r4, r2
 8000798:	e6bd      	b.n	8000516 <__adddf3+0xe6>
 800079a:	bf00      	nop

0800079c <__gedf2>:
 800079c:	f04f 3cff 	mov.w	ip, #4294967295
 80007a0:	e006      	b.n	80007b0 <__cmpdf2+0x4>
 80007a2:	bf00      	nop

080007a4 <__ledf2>:
 80007a4:	f04f 0c01 	mov.w	ip, #1
 80007a8:	e002      	b.n	80007b0 <__cmpdf2+0x4>
 80007aa:	bf00      	nop

080007ac <__cmpdf2>:
 80007ac:	f04f 0c01 	mov.w	ip, #1
 80007b0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80007b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80007b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80007c0:	bf18      	it	ne
 80007c2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80007c6:	d01b      	beq.n	8000800 <__cmpdf2+0x54>
 80007c8:	b001      	add	sp, #4
 80007ca:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80007ce:	bf0c      	ite	eq
 80007d0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80007d4:	ea91 0f03 	teqne	r1, r3
 80007d8:	bf02      	ittt	eq
 80007da:	ea90 0f02 	teqeq	r0, r2
 80007de:	2000      	moveq	r0, #0
 80007e0:	4770      	bxeq	lr
 80007e2:	f110 0f00 	cmn.w	r0, #0
 80007e6:	ea91 0f03 	teq	r1, r3
 80007ea:	bf58      	it	pl
 80007ec:	4299      	cmppl	r1, r3
 80007ee:	bf08      	it	eq
 80007f0:	4290      	cmpeq	r0, r2
 80007f2:	bf2c      	ite	cs
 80007f4:	17d8      	asrcs	r0, r3, #31
 80007f6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80007fa:	f040 0001 	orr.w	r0, r0, #1
 80007fe:	4770      	bx	lr
 8000800:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000804:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000808:	d102      	bne.n	8000810 <__cmpdf2+0x64>
 800080a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800080e:	d107      	bne.n	8000820 <__cmpdf2+0x74>
 8000810:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000814:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000818:	d1d6      	bne.n	80007c8 <__cmpdf2+0x1c>
 800081a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800081e:	d0d3      	beq.n	80007c8 <__cmpdf2+0x1c>
 8000820:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000824:	4770      	bx	lr
 8000826:	bf00      	nop

08000828 <__aeabi_cdrcmple>:
 8000828:	4684      	mov	ip, r0
 800082a:	4610      	mov	r0, r2
 800082c:	4662      	mov	r2, ip
 800082e:	468c      	mov	ip, r1
 8000830:	4619      	mov	r1, r3
 8000832:	4663      	mov	r3, ip
 8000834:	e000      	b.n	8000838 <__aeabi_cdcmpeq>
 8000836:	bf00      	nop

08000838 <__aeabi_cdcmpeq>:
 8000838:	b501      	push	{r0, lr}
 800083a:	f7ff ffb7 	bl	80007ac <__cmpdf2>
 800083e:	2800      	cmp	r0, #0
 8000840:	bf48      	it	mi
 8000842:	f110 0f00 	cmnmi.w	r0, #0
 8000846:	bd01      	pop	{r0, pc}

08000848 <__aeabi_dcmpeq>:
 8000848:	f84d ed08 	str.w	lr, [sp, #-8]!
 800084c:	f7ff fff4 	bl	8000838 <__aeabi_cdcmpeq>
 8000850:	bf0c      	ite	eq
 8000852:	2001      	moveq	r0, #1
 8000854:	2000      	movne	r0, #0
 8000856:	f85d fb08 	ldr.w	pc, [sp], #8
 800085a:	bf00      	nop

0800085c <__aeabi_dcmplt>:
 800085c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000860:	f7ff ffea 	bl	8000838 <__aeabi_cdcmpeq>
 8000864:	bf34      	ite	cc
 8000866:	2001      	movcc	r0, #1
 8000868:	2000      	movcs	r0, #0
 800086a:	f85d fb08 	ldr.w	pc, [sp], #8
 800086e:	bf00      	nop

08000870 <__aeabi_dcmple>:
 8000870:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000874:	f7ff ffe0 	bl	8000838 <__aeabi_cdcmpeq>
 8000878:	bf94      	ite	ls
 800087a:	2001      	movls	r0, #1
 800087c:	2000      	movhi	r0, #0
 800087e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000882:	bf00      	nop

08000884 <__aeabi_dcmpge>:
 8000884:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000888:	f7ff ffce 	bl	8000828 <__aeabi_cdrcmple>
 800088c:	bf94      	ite	ls
 800088e:	2001      	movls	r0, #1
 8000890:	2000      	movhi	r0, #0
 8000892:	f85d fb08 	ldr.w	pc, [sp], #8
 8000896:	bf00      	nop

08000898 <__aeabi_dcmpgt>:
 8000898:	f84d ed08 	str.w	lr, [sp, #-8]!
 800089c:	f7ff ffc4 	bl	8000828 <__aeabi_cdrcmple>
 80008a0:	bf34      	ite	cc
 80008a2:	2001      	movcc	r0, #1
 80008a4:	2000      	movcs	r0, #0
 80008a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80008aa:	bf00      	nop

080008ac <__aeabi_d2iz>:
 80008ac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008b0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008b4:	d215      	bcs.n	80008e2 <__aeabi_d2iz+0x36>
 80008b6:	d511      	bpl.n	80008dc <__aeabi_d2iz+0x30>
 80008b8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008bc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008c0:	d912      	bls.n	80008e8 <__aeabi_d2iz+0x3c>
 80008c2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80008ca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80008ce:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80008d2:	fa23 f002 	lsr.w	r0, r3, r2
 80008d6:	bf18      	it	ne
 80008d8:	4240      	negne	r0, r0
 80008da:	4770      	bx	lr
 80008dc:	f04f 0000 	mov.w	r0, #0
 80008e0:	4770      	bx	lr
 80008e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80008e6:	d105      	bne.n	80008f4 <__aeabi_d2iz+0x48>
 80008e8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80008ec:	bf08      	it	eq
 80008ee:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80008f2:	4770      	bx	lr
 80008f4:	f04f 0000 	mov.w	r0, #0
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop

080008fc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80008fc:	b480      	push	{r7}
 80008fe:	b085      	sub	sp, #20
 8000900:	af00      	add	r7, sp, #0
 8000902:	60f8      	str	r0, [r7, #12]
 8000904:	60b9      	str	r1, [r7, #8]
 8000906:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	4a07      	ldr	r2, [pc, #28]	; (8000928 <vApplicationGetIdleTaskMemory+0x2c>)
 800090c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800090e:	68bb      	ldr	r3, [r7, #8]
 8000910:	4a06      	ldr	r2, [pc, #24]	; (800092c <vApplicationGetIdleTaskMemory+0x30>)
 8000912:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	2280      	movs	r2, #128	; 0x80
 8000918:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800091a:	bf00      	nop
 800091c:	3714      	adds	r7, #20
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	20000094 	.word	0x20000094
 800092c:	20000148 	.word	0x20000148

08000930 <_Z15CAN_Filter_InitP19__CAN_HandleTypeDefmmmm>:
#include "main.h"

// setting up can filter mode and IDs or mask
// https://hsdev.co.jp/stm32-can/
void CAN_Filter_Init(CAN_HandleTypeDef *hcan_obj, uint32_t fId1, uint32_t fId2,
		uint32_t fId3, uint32_t fId4) {
 8000930:	b580      	push	{r7, lr}
 8000932:	b08e      	sub	sp, #56	; 0x38
 8000934:	af00      	add	r7, sp, #0
 8000936:	60f8      	str	r0, [r7, #12]
 8000938:	60b9      	str	r1, [r7, #8]
 800093a:	607a      	str	r2, [r7, #4]
 800093c:	603b      	str	r3, [r7, #0]
	CAN_FilterTypeDef sFilterConfig;
	sFilterConfig.FilterIdHigh = fId1 << 5;
 800093e:	68bb      	ldr	r3, [r7, #8]
 8000940:	015b      	lsls	r3, r3, #5
 8000942:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterIdLow = fId2 << 5;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	015b      	lsls	r3, r3, #5
 8000948:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMaskIdHigh = fId3 << 5;
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	015b      	lsls	r3, r3, #5
 800094e:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterMaskIdLow = fId4 << 5;
 8000950:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000952:	015b      	lsls	r3, r3, #5
 8000954:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
 8000956:	2300      	movs	r3, #0
 8000958:	62fb      	str	r3, [r7, #44]	; 0x2c
	sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800095a:	2300      	movs	r3, #0
 800095c:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterBank = 0;
 800095e:	2300      	movs	r3, #0
 8000960:	627b      	str	r3, [r7, #36]	; 0x24
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDLIST;
 8000962:	2301      	movs	r3, #1
 8000964:	62bb      	str	r3, [r7, #40]	; 0x28
	sFilterConfig.SlaveStartFilterBank = 14;
 8000966:	230e      	movs	r3, #14
 8000968:	637b      	str	r3, [r7, #52]	; 0x34
	sFilterConfig.FilterActivation = ENABLE;
 800096a:	2301      	movs	r3, #1
 800096c:	633b      	str	r3, [r7, #48]	; 0x30

	if (HAL_CAN_ConfigFilter(hcan_obj, &sFilterConfig) != HAL_OK) {
 800096e:	f107 0310 	add.w	r3, r7, #16
 8000972:	4619      	mov	r1, r3
 8000974:	68f8      	ldr	r0, [r7, #12]
 8000976:	f001 f856 	bl	8001a26 <HAL_CAN_ConfigFilter>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	bf14      	ite	ne
 8000980:	2301      	movne	r3, #1
 8000982:	2300      	moveq	r3, #0
 8000984:	b2db      	uxtb	r3, r3
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <_Z15CAN_Filter_InitP19__CAN_HandleTypeDefmmmm+0x5e>
		/* Filter configuration Error */
		Error_Handler();
 800098a:	f000 fccd 	bl	8001328 <Error_Handler>
	}
}
 800098e:	bf00      	nop
 8000990:	3738      	adds	r7, #56	; 0x38
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
	...

08000998 <_ZN12A4960_HelperC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftP17TIM_HandleTypeDefm>:
	const uint8_t A4960_REG_MASK = 0b11000000;
	const uint8_t A4960_REG_RUN = 0b11100000;
	const uint8_t A4960_REG_DIAG = 0b11000000;  //Read only
};

A4960_Helper::A4960_Helper(SPI_HandleTypeDef *hspi, GPIO_TypeDef *GPIOx,
 8000998:	b480      	push	{r7}
 800099a:	b085      	sub	sp, #20
 800099c:	af00      	add	r7, sp, #0
 800099e:	60f8      	str	r0, [r7, #12]
 80009a0:	60b9      	str	r1, [r7, #8]
 80009a2:	607a      	str	r2, [r7, #4]
 80009a4:	807b      	strh	r3, [r7, #2]
		uint16_t GPIO_Pin, TIM_HandleTypeDef *htim, uint32_t channel) {
 80009a6:	68f9      	ldr	r1, [r7, #12]
 80009a8:	f04f 0200 	mov.w	r2, #0
 80009ac:	4b20      	ldr	r3, [pc, #128]	; (8000a30 <_ZN12A4960_HelperC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftP17TIM_HandleTypeDefm+0x98>)
 80009ae:	e9c1 2308 	strd	r2, r3, [r1, #32]
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	2210      	movs	r2, #16
 80009b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	2200      	movs	r2, #0
 80009be:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	2220      	movs	r2, #32
 80009c6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	2240      	movs	r2, #64	; 0x40
 80009ce:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	2260      	movs	r2, #96	; 0x60
 80009d6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	2280      	movs	r2, #128	; 0x80
 80009de:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	22a0      	movs	r2, #160	; 0xa0
 80009e6:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	22c0      	movs	r2, #192	; 0xc0
 80009ee:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	22e0      	movs	r2, #224	; 0xe0
 80009f6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	22c0      	movs	r2, #192	; 0xc0
 80009fe:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	this->hspi = hspi;
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	68ba      	ldr	r2, [r7, #8]
 8000a06:	601a      	str	r2, [r3, #0]
	this->GPIOx = GPIOx;
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	687a      	ldr	r2, [r7, #4]
 8000a0c:	605a      	str	r2, [r3, #4]
	this->GPIO_Pin = GPIO_Pin;
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	887a      	ldrh	r2, [r7, #2]
 8000a12:	811a      	strh	r2, [r3, #8]
	this->htim = htim;
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	69ba      	ldr	r2, [r7, #24]
 8000a18:	60da      	str	r2, [r3, #12]
	this->channel = channel;
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	69fa      	ldr	r2, [r7, #28]
 8000a1e:	611a      	str	r2, [r3, #16]
}
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	4618      	mov	r0, r3
 8000a24:	3714      	adds	r7, #20
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	3fe00000 	.word	0x3fe00000

08000a34 <_ZN12A4960_HelperD1Ev>:

A4960_Helper::~A4960_Helper() {
 8000a34:	b480      	push	{r7}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
}
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	4618      	mov	r0, r3
 8000a40:	370c      	adds	r7, #12
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr

08000a4a <_ZN12A4960_Helper4initEv>:

void A4960_Helper::init() {
 8000a4a:	b580      	push	{r7, lr}
 8000a4c:	b084      	sub	sp, #16
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	6078      	str	r0, [r7, #4]
	uint8_t spi_data[2];
	HAL_TIM_PWM_Start(this->htim, this->channel);
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	68da      	ldr	r2, [r3, #12]
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	691b      	ldr	r3, [r3, #16]
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	4610      	mov	r0, r2
 8000a5e:	f003 fb5d 	bl	800411c <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(this->htim, this->channel, 0);
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	691b      	ldr	r3, [r3, #16]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d105      	bne.n	8000a76 <_ZN12A4960_Helper4initEv+0x2c>
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	68db      	ldr	r3, [r3, #12]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	2200      	movs	r2, #0
 8000a72:	635a      	str	r2, [r3, #52]	; 0x34
 8000a74:	e02c      	b.n	8000ad0 <_ZN12A4960_Helper4initEv+0x86>
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	691b      	ldr	r3, [r3, #16]
 8000a7a:	2b04      	cmp	r3, #4
 8000a7c:	d105      	bne.n	8000a8a <_ZN12A4960_Helper4initEv+0x40>
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	68db      	ldr	r3, [r3, #12]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	2200      	movs	r2, #0
 8000a86:	639a      	str	r2, [r3, #56]	; 0x38
 8000a88:	e022      	b.n	8000ad0 <_ZN12A4960_Helper4initEv+0x86>
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	691b      	ldr	r3, [r3, #16]
 8000a8e:	2b08      	cmp	r3, #8
 8000a90:	d105      	bne.n	8000a9e <_ZN12A4960_Helper4initEv+0x54>
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	68db      	ldr	r3, [r3, #12]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	2200      	movs	r2, #0
 8000a9a:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a9c:	e018      	b.n	8000ad0 <_ZN12A4960_Helper4initEv+0x86>
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	691b      	ldr	r3, [r3, #16]
 8000aa2:	2b0c      	cmp	r3, #12
 8000aa4:	d105      	bne.n	8000ab2 <_ZN12A4960_Helper4initEv+0x68>
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	68db      	ldr	r3, [r3, #12]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	2200      	movs	r2, #0
 8000aae:	641a      	str	r2, [r3, #64]	; 0x40
 8000ab0:	e00e      	b.n	8000ad0 <_ZN12A4960_Helper4initEv+0x86>
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	691b      	ldr	r3, [r3, #16]
 8000ab6:	2b10      	cmp	r3, #16
 8000ab8:	d105      	bne.n	8000ac6 <_ZN12A4960_Helper4initEv+0x7c>
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	68db      	ldr	r3, [r3, #12]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	659a      	str	r2, [r3, #88]	; 0x58
 8000ac4:	e004      	b.n	8000ad0 <_ZN12A4960_Helper4initEv+0x86>
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	68db      	ldr	r3, [r3, #12]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	2200      	movs	r2, #0
 8000ace:	65da      	str	r2, [r3, #92]	; 0x5c
	for (uint8_t i = 0; i < 5; i++) {
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	73fb      	strb	r3, [r7, #15]
 8000ad4:	7bfb      	ldrb	r3, [r7, #15]
 8000ad6:	2b04      	cmp	r3, #4
 8000ad8:	d817      	bhi.n	8000b0a <_ZN12A4960_Helper4initEv+0xc0>
//				1000);
//		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, SET);
//		__NOP();

		//setting Run State
		spi_data[0] = A4960_REG_WRITE | A4960_REG_RUN | 0b00000010; //Default
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000ae6:	4313      	orrs	r3, r2
 8000ae8:	b2db      	uxtb	r3, r3
 8000aea:	f043 0302 	orr.w	r3, r3, #2
 8000aee:	b2db      	uxtb	r3, r3
 8000af0:	733b      	strb	r3, [r7, #12]
		spi_data[1] = 0b00001001; //RUN enable
 8000af2:	2309      	movs	r3, #9
 8000af4:	737b      	strb	r3, [r7, #13]
		write_register(spi_data);
 8000af6:	f107 030c 	add.w	r3, r7, #12
 8000afa:	4619      	mov	r1, r3
 8000afc:	6878      	ldr	r0, [r7, #4]
 8000afe:	f000 f912 	bl	8000d26 <_ZN12A4960_Helper14write_registerEPh>
	for (uint8_t i = 0; i < 5; i++) {
 8000b02:	7bfb      	ldrb	r3, [r7, #15]
 8000b04:	3301      	adds	r3, #1
 8000b06:	73fb      	strb	r3, [r7, #15]
 8000b08:	e7e4      	b.n	8000ad4 <_ZN12A4960_Helper4initEv+0x8a>
	}
}
 8000b0a:	bf00      	nop
 8000b0c:	3710      	adds	r7, #16
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}

08000b12 <_ZN12A4960_Helper3runEl>:

void A4960_Helper::run(int32_t pwm_signed) {
 8000b12:	b5b0      	push	{r4, r5, r7, lr}
 8000b14:	b084      	sub	sp, #16
 8000b16:	af00      	add	r7, sp, #0
 8000b18:	6078      	str	r0, [r7, #4]
 8000b1a:	6039      	str	r1, [r7, #0]
	if (sgn(pwm_signed) != sgn(pwm_prev) && sgn(pwm_signed) != 0) {
 8000b1c:	6839      	ldr	r1, [r7, #0]
 8000b1e:	6878      	ldr	r0, [r7, #4]
 8000b20:	f000 f924 	bl	8000d6c <_ZN12A4960_Helper3sgnEl>
 8000b24:	4603      	mov	r3, r0
 8000b26:	461c      	mov	r4, r3
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	695b      	ldr	r3, [r3, #20]
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	6878      	ldr	r0, [r7, #4]
 8000b30:	f000 f91c 	bl	8000d6c <_ZN12A4960_Helper3sgnEl>
 8000b34:	4603      	mov	r3, r0
 8000b36:	429c      	cmp	r4, r3
 8000b38:	d008      	beq.n	8000b4c <_ZN12A4960_Helper3runEl+0x3a>
 8000b3a:	6839      	ldr	r1, [r7, #0]
 8000b3c:	6878      	ldr	r0, [r7, #4]
 8000b3e:	f000 f915 	bl	8000d6c <_ZN12A4960_Helper3sgnEl>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <_ZN12A4960_Helper3runEl+0x3a>
 8000b48:	2301      	movs	r3, #1
 8000b4a:	e000      	b.n	8000b4e <_ZN12A4960_Helper3runEl+0x3c>
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d00c      	beq.n	8000b6c <_ZN12A4960_Helper3runEl+0x5a>
		direction_bit = update_direction(sgn(pwm_signed));
 8000b52:	6839      	ldr	r1, [r7, #0]
 8000b54:	6878      	ldr	r0, [r7, #4]
 8000b56:	f000 f909 	bl	8000d6c <_ZN12A4960_Helper3sgnEl>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	6878      	ldr	r0, [r7, #4]
 8000b60:	f000 f89f 	bl	8000ca2 <_ZN12A4960_Helper16update_directionEi>
 8000b64:	4603      	mov	r3, r0
 8000b66:	461a      	mov	r2, r3
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	761a      	strb	r2, [r3, #24]
	}

	int32_t timer_CCR = 0;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	60fb      	str	r3, [r7, #12]
	if (sgn(pwm_signed) == -1) {
 8000b70:	6839      	ldr	r1, [r7, #0]
 8000b72:	6878      	ldr	r0, [r7, #4]
 8000b74:	f000 f8fa 	bl	8000d6c <_ZN12A4960_Helper3sgnEl>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b7e:	bf0c      	ite	eq
 8000b80:	2301      	moveq	r3, #1
 8000b82:	2300      	movne	r3, #0
 8000b84:	b2db      	uxtb	r3, r3
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d003      	beq.n	8000b92 <_ZN12A4960_Helper3runEl+0x80>
		timer_CCR = -pwm_signed;
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	425b      	negs	r3, r3
 8000b8e:	60fb      	str	r3, [r7, #12]
 8000b90:	e001      	b.n	8000b96 <_ZN12A4960_Helper3runEl+0x84>
	} else {
		timer_CCR = pwm_signed;
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	60fb      	str	r3, [r7, #12]
	}

	if (timer_CCR < 0) {
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	db7e      	blt.n	8000c9a <_ZN12A4960_Helper3runEl+0x188>
		return;
	} else if (timer_CCR >= this->htim->Init.Period * MAX_TIMER_CCR_RATIO) {
 8000b9c:	68f8      	ldr	r0, [r7, #12]
 8000b9e:	f7ff fd93 	bl	80006c8 <__aeabi_i2d>
 8000ba2:	4604      	mov	r4, r0
 8000ba4:	460d      	mov	r5, r1
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	68db      	ldr	r3, [r3, #12]
 8000baa:	68db      	ldr	r3, [r3, #12]
 8000bac:	4618      	mov	r0, r3
 8000bae:	f7ff fd7b 	bl	80006a8 <__aeabi_ui2d>
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8000bb8:	f7ff fb0a 	bl	80001d0 <__aeabi_dmul>
 8000bbc:	4602      	mov	r2, r0
 8000bbe:	460b      	mov	r3, r1
 8000bc0:	4620      	mov	r0, r4
 8000bc2:	4629      	mov	r1, r5
 8000bc4:	f7ff fe5e 	bl	8000884 <__aeabi_dcmpge>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d012      	beq.n	8000bf4 <_ZN12A4960_Helper3runEl+0xe2>
		timer_CCR = this->htim->Init.Period * MAX_TIMER_CCR_RATIO;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	68db      	ldr	r3, [r3, #12]
 8000bd2:	68db      	ldr	r3, [r3, #12]
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f7ff fd67 	bl	80006a8 <__aeabi_ui2d>
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8000be0:	f7ff faf6 	bl	80001d0 <__aeabi_dmul>
 8000be4:	4602      	mov	r2, r0
 8000be6:	460b      	mov	r3, r1
 8000be8:	4610      	mov	r0, r2
 8000bea:	4619      	mov	r1, r3
 8000bec:	f7ff fe5e 	bl	80008ac <__aeabi_d2iz>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	60fb      	str	r3, [r7, #12]
	}

	uint8_t spi_data[2];
	spi_data[0] = A4960_REG_WRITE | A4960_REG_RUN | 0b00000010; //Default
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000c00:	4313      	orrs	r3, r2
 8000c02:	b2db      	uxtb	r3, r3
 8000c04:	f043 0302 	orr.w	r3, r3, #2
 8000c08:	b2db      	uxtb	r3, r3
 8000c0a:	723b      	strb	r3, [r7, #8]
	spi_data[1] = 0b00001001 | direction_bit; //RUN enable
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	7e1b      	ldrb	r3, [r3, #24]
 8000c10:	f043 0309 	orr.w	r3, r3, #9
 8000c14:	b2db      	uxtb	r3, r3
 8000c16:	727b      	strb	r3, [r7, #9]
	write_register(spi_data);
 8000c18:	f107 0308 	add.w	r3, r7, #8
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	6878      	ldr	r0, [r7, #4]
 8000c20:	f000 f881 	bl	8000d26 <_ZN12A4960_Helper14write_registerEPh>
	__HAL_TIM_SET_COMPARE(this->htim, this->channel, timer_CCR);
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	691b      	ldr	r3, [r3, #16]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d105      	bne.n	8000c38 <_ZN12A4960_Helper3runEl+0x126>
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	68db      	ldr	r3, [r3, #12]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	68fa      	ldr	r2, [r7, #12]
 8000c34:	635a      	str	r2, [r3, #52]	; 0x34
 8000c36:	e02c      	b.n	8000c92 <_ZN12A4960_Helper3runEl+0x180>
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	691b      	ldr	r3, [r3, #16]
 8000c3c:	2b04      	cmp	r3, #4
 8000c3e:	d105      	bne.n	8000c4c <_ZN12A4960_Helper3runEl+0x13a>
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	68db      	ldr	r3, [r3, #12]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	68fa      	ldr	r2, [r7, #12]
 8000c48:	639a      	str	r2, [r3, #56]	; 0x38
 8000c4a:	e022      	b.n	8000c92 <_ZN12A4960_Helper3runEl+0x180>
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	691b      	ldr	r3, [r3, #16]
 8000c50:	2b08      	cmp	r3, #8
 8000c52:	d105      	bne.n	8000c60 <_ZN12A4960_Helper3runEl+0x14e>
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	68db      	ldr	r3, [r3, #12]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	68fa      	ldr	r2, [r7, #12]
 8000c5c:	63da      	str	r2, [r3, #60]	; 0x3c
 8000c5e:	e018      	b.n	8000c92 <_ZN12A4960_Helper3runEl+0x180>
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	691b      	ldr	r3, [r3, #16]
 8000c64:	2b0c      	cmp	r3, #12
 8000c66:	d105      	bne.n	8000c74 <_ZN12A4960_Helper3runEl+0x162>
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	68db      	ldr	r3, [r3, #12]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	68fa      	ldr	r2, [r7, #12]
 8000c70:	641a      	str	r2, [r3, #64]	; 0x40
 8000c72:	e00e      	b.n	8000c92 <_ZN12A4960_Helper3runEl+0x180>
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	691b      	ldr	r3, [r3, #16]
 8000c78:	2b10      	cmp	r3, #16
 8000c7a:	d105      	bne.n	8000c88 <_ZN12A4960_Helper3runEl+0x176>
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	68db      	ldr	r3, [r3, #12]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	68fa      	ldr	r2, [r7, #12]
 8000c84:	659a      	str	r2, [r3, #88]	; 0x58
 8000c86:	e004      	b.n	8000c92 <_ZN12A4960_Helper3runEl+0x180>
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	68db      	ldr	r3, [r3, #12]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	68fa      	ldr	r2, [r7, #12]
 8000c90:	65da      	str	r2, [r3, #92]	; 0x5c
	pwm_prev = pwm_signed;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	683a      	ldr	r2, [r7, #0]
 8000c96:	615a      	str	r2, [r3, #20]
 8000c98:	e000      	b.n	8000c9c <_ZN12A4960_Helper3runEl+0x18a>
		return;
 8000c9a:	bf00      	nop
}
 8000c9c:	3710      	adds	r7, #16
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bdb0      	pop	{r4, r5, r7, pc}

08000ca2 <_ZN12A4960_Helper16update_directionEi>:

uint8_t A4960_Helper::update_direction(int sign) {
 8000ca2:	b580      	push	{r7, lr}
 8000ca4:	b086      	sub	sp, #24
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	6078      	str	r0, [r7, #4]
 8000caa:	6039      	str	r1, [r7, #0]
	//safety
	if (sign == 0) {
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d102      	bne.n	8000cb8 <_ZN12A4960_Helper16update_directionEi+0x16>
		return direction_bit;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	7e1b      	ldrb	r3, [r3, #24]
 8000cb6:	e032      	b.n	8000d1e <_ZN12A4960_Helper16update_directionEi+0x7c>
	}

	uint8_t spi_data[2];
	uint8_t dir_bit = 0;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	75fb      	strb	r3, [r7, #23]
	if (sign == 1) {
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	2b01      	cmp	r3, #1
 8000cc0:	d102      	bne.n	8000cc8 <_ZN12A4960_Helper16update_directionEi+0x26>
		dir_bit = 0b00000000;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	75fb      	strb	r3, [r7, #23]
 8000cc6:	e009      	b.n	8000cdc <_ZN12A4960_Helper16update_directionEi+0x3a>
	} else if (sign == -1) {
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cce:	d102      	bne.n	8000cd6 <_ZN12A4960_Helper16update_directionEi+0x34>
		dir_bit = 0b00000010;
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	75fb      	strb	r3, [r7, #23]
 8000cd4:	e002      	b.n	8000cdc <_ZN12A4960_Helper16update_directionEi+0x3a>
	} else {
		return direction_bit;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	7e1b      	ldrb	r3, [r3, #24]
 8000cda:	e020      	b.n	8000d1e <_ZN12A4960_Helper16update_directionEi+0x7c>
	}

	for (int i = 0; i < 3; i++) {
 8000cdc:	2300      	movs	r3, #0
 8000cde:	613b      	str	r3, [r7, #16]
 8000ce0:	693b      	ldr	r3, [r7, #16]
 8000ce2:	2b02      	cmp	r3, #2
 8000ce4:	dc1a      	bgt.n	8000d1c <_ZN12A4960_Helper16update_directionEi+0x7a>
		//setting Run to disable and change direction
		spi_data[0] = A4960_REG_WRITE | A4960_REG_RUN | 0b00000010; //Default
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000cf2:	4313      	orrs	r3, r2
 8000cf4:	b2db      	uxtb	r3, r3
 8000cf6:	f043 0302 	orr.w	r3, r3, #2
 8000cfa:	b2db      	uxtb	r3, r3
 8000cfc:	733b      	strb	r3, [r7, #12]
		spi_data[1] = 0b00001000 | dir_bit; //RUN disable
 8000cfe:	7dfb      	ldrb	r3, [r7, #23]
 8000d00:	f043 0308 	orr.w	r3, r3, #8
 8000d04:	b2db      	uxtb	r3, r3
 8000d06:	737b      	strb	r3, [r7, #13]
		write_register(spi_data);
 8000d08:	f107 030c 	add.w	r3, r7, #12
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	6878      	ldr	r0, [r7, #4]
 8000d10:	f000 f809 	bl	8000d26 <_ZN12A4960_Helper14write_registerEPh>
	for (int i = 0; i < 3; i++) {
 8000d14:	693b      	ldr	r3, [r7, #16]
 8000d16:	3301      	adds	r3, #1
 8000d18:	613b      	str	r3, [r7, #16]
 8000d1a:	e7e1      	b.n	8000ce0 <_ZN12A4960_Helper16update_directionEi+0x3e>
	}
	return dir_bit;
 8000d1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3718      	adds	r7, #24
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}

08000d26 <_ZN12A4960_Helper14write_registerEPh>:

int16_t A4960_Helper::write_register(uint8_t *data) {
 8000d26:	b580      	push	{r7, lr}
 8000d28:	b082      	sub	sp, #8
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	6078      	str	r0, [r7, #4]
 8000d2e:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(this->GPIOx, this->GPIO_Pin, GPIO_PIN_RESET);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	6858      	ldr	r0, [r3, #4]
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	891b      	ldrh	r3, [r3, #8]
 8000d38:	2200      	movs	r2, #0
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	f001 fbc2 	bl	80024c4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(this->hspi, data, 2, 1000);
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	6818      	ldr	r0, [r3, #0]
 8000d44:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d48:	2202      	movs	r2, #2
 8000d4a:	6839      	ldr	r1, [r7, #0]
 8000d4c:	f002 fdfd 	bl	800394a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(this->GPIOx, this->GPIO_Pin, GPIO_PIN_SET);
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	6858      	ldr	r0, [r3, #4]
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	891b      	ldrh	r3, [r3, #8]
 8000d58:	2201      	movs	r2, #1
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	f001 fbb2 	bl	80024c4 <HAL_GPIO_WritePin>
	__NOP();
 8000d60:	bf00      	nop
	return 0;
 8000d62:	2300      	movs	r3, #0
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	3708      	adds	r7, #8
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}

08000d6c <_ZN12A4960_Helper3sgnEl>:

int8_t A4960_Helper::sgn(int32_t pwm_signed) {
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
 8000d74:	6039      	str	r1, [r7, #0]
	if (pwm_signed == 0)
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d101      	bne.n	8000d80 <_ZN12A4960_Helper3sgnEl+0x14>
		return 0;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	e006      	b.n	8000d8e <_ZN12A4960_Helper3sgnEl+0x22>
	if (pwm_signed > 0)
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	dd01      	ble.n	8000d8a <_ZN12A4960_Helper3sgnEl+0x1e>
		return 1;
 8000d86:	2301      	movs	r3, #1
 8000d88:	e001      	b.n	8000d8e <_ZN12A4960_Helper3sgnEl+0x22>
	return -1;
 8000d8a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	370c      	adds	r7, #12
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
	...

08000d9c <HAL_GPIO_EXTI_Callback>:
volatile uint32_t diag_count = 0;
volatile uint8_t BLDC_DIR_CW = 1;

//shun defined user EXTI callback.
//override __weak HAL_GPIO_EXTI_Callback in stm32fxx_it.c
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	4603      	mov	r3, r0
 8000da4:	80fb      	strh	r3, [r7, #6]
	//TACHO Pin
	if (GPIO_Pin == GPIO_PIN_0) {
 8000da6:	88fb      	ldrh	r3, [r7, #6]
 8000da8:	2b01      	cmp	r3, #1
 8000daa:	d104      	bne.n	8000db6 <HAL_GPIO_EXTI_Callback+0x1a>
		tacho_count++;
 8000dac:	4b09      	ldr	r3, [pc, #36]	; (8000dd4 <HAL_GPIO_EXTI_Callback+0x38>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	3301      	adds	r3, #1
 8000db2:	4a08      	ldr	r2, [pc, #32]	; (8000dd4 <HAL_GPIO_EXTI_Callback+0x38>)
 8000db4:	6013      	str	r3, [r2, #0]
	}

	//DIAG Pin
	if (GPIO_Pin == GPIO_PIN_8) {
 8000db6:	88fb      	ldrh	r3, [r7, #6]
 8000db8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000dbc:	d104      	bne.n	8000dc8 <HAL_GPIO_EXTI_Callback+0x2c>
		diag_count++;
 8000dbe:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	4a04      	ldr	r2, [pc, #16]	; (8000dd8 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000dc6:	6013      	str	r3, [r2, #0]
	}
}
 8000dc8:	bf00      	nop
 8000dca:	370c      	adds	r7, #12
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr
 8000dd4:	200004e0 	.word	0x200004e0
 8000dd8:	200004e4 	.word	0x200004e4

08000ddc <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000ddc:	b5b0      	push	{r4, r5, r7, lr}
 8000dde:	b088      	sub	sp, #32
 8000de0:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000de2:	f000 fcef 	bl	80017c4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000de6:	f000 f823 	bl	8000e30 <_Z18SystemClock_Configv>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000dea:	f000 f989 	bl	8001100 <_ZL12MX_GPIO_Initv>
	MX_SPI1_Init();
 8000dee:	f000 f8a7 	bl	8000f40 <_ZL12MX_SPI1_Initv>
	MX_TIM3_Init();
 8000df2:	f000 f8e7 	bl	8000fc4 <_ZL12MX_TIM3_Initv>
	MX_USART2_UART_Init();
 8000df6:	f000 f94f 	bl	8001098 <_ZL19MX_USART2_UART_Initv>
	MX_CAN_Init();
 8000dfa:	f000 f865 	bl	8000ec8 <_ZL11MX_CAN_Initv>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of BLDCTask */
	osThreadDef(BLDCTask, StartBLDCTask, osPriorityNormal, 0, 128);
 8000dfe:	4b0a      	ldr	r3, [pc, #40]	; (8000e28 <main+0x4c>)
 8000e00:	1d3c      	adds	r4, r7, #4
 8000e02:	461d      	mov	r5, r3
 8000e04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e08:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e0c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	BLDCTaskHandle = osThreadCreate(osThread(BLDCTask), NULL);
 8000e10:	1d3b      	adds	r3, r7, #4
 8000e12:	2100      	movs	r1, #0
 8000e14:	4618      	mov	r0, r3
 8000e16:	f004 fc0d 	bl	8005634 <osThreadCreate>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	4a03      	ldr	r2, [pc, #12]	; (8000e2c <main+0x50>)
 8000e1e:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 8000e20:	f004 fbf1 	bl	8005606 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000e24:	e7fe      	b.n	8000e24 <main+0x48>
 8000e26:	bf00      	nop
 8000e28:	08006e38 	.word	0x08006e38
 8000e2c:	200004a4 	.word	0x200004a4

08000e30 <_Z18SystemClock_Configv>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b090      	sub	sp, #64	; 0x40
 8000e34:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000e36:	f107 0318 	add.w	r3, r7, #24
 8000e3a:	2228      	movs	r2, #40	; 0x28
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f005 ff1a 	bl	8006c78 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000e44:	1d3b      	adds	r3, r7, #4
 8000e46:	2200      	movs	r2, #0
 8000e48:	601a      	str	r2, [r3, #0]
 8000e4a:	605a      	str	r2, [r3, #4]
 8000e4c:	609a      	str	r2, [r3, #8]
 8000e4e:	60da      	str	r2, [r3, #12]
 8000e50:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e52:	2302      	movs	r3, #2
 8000e54:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e56:	2301      	movs	r3, #1
 8000e58:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e5a:	2310      	movs	r3, #16
 8000e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e5e:	2302      	movs	r3, #2
 8000e60:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e62:	2300      	movs	r3, #0
 8000e64:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000e66:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000e6c:	f107 0318 	add.w	r3, r7, #24
 8000e70:	4618      	mov	r0, r3
 8000e72:	f001 fb57 	bl	8002524 <HAL_RCC_OscConfig>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	bf14      	ite	ne
 8000e7c:	2301      	movne	r3, #1
 8000e7e:	2300      	moveq	r3, #0
 8000e80:	b2db      	uxtb	r3, r3
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <_Z18SystemClock_Configv+0x5a>
		Error_Handler();
 8000e86:	f000 fa4f 	bl	8001328 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000e8a:	230f      	movs	r3, #15
 8000e8c:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e8e:	2302      	movs	r3, #2
 8000e90:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e92:	2300      	movs	r3, #0
 8000e94:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e9a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000ea0:	1d3b      	adds	r3, r7, #4
 8000ea2:	2102      	movs	r1, #2
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f002 fa45 	bl	8003334 <HAL_RCC_ClockConfig>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	bf14      	ite	ne
 8000eb0:	2301      	movne	r3, #1
 8000eb2:	2300      	moveq	r3, #0
 8000eb4:	b2db      	uxtb	r3, r3
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <_Z18SystemClock_Configv+0x8e>
		Error_Handler();
 8000eba:	f000 fa35 	bl	8001328 <Error_Handler>
	}
}
 8000ebe:	bf00      	nop
 8000ec0:	3740      	adds	r7, #64	; 0x40
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
	...

08000ec8 <_ZL11MX_CAN_Initv>:
/**
 * @brief CAN Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN_Init(void) {
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
	/* USER CODE END CAN_Init 0 */

	/* USER CODE BEGIN CAN_Init 1 */

	/* USER CODE END CAN_Init 1 */
	hcan.Instance = CAN;
 8000ecc:	4b1a      	ldr	r3, [pc, #104]	; (8000f38 <_ZL11MX_CAN_Initv+0x70>)
 8000ece:	4a1b      	ldr	r2, [pc, #108]	; (8000f3c <_ZL11MX_CAN_Initv+0x74>)
 8000ed0:	601a      	str	r2, [r3, #0]
	hcan.Init.Prescaler = 2;
 8000ed2:	4b19      	ldr	r3, [pc, #100]	; (8000f38 <_ZL11MX_CAN_Initv+0x70>)
 8000ed4:	2202      	movs	r2, #2
 8000ed6:	605a      	str	r2, [r3, #4]
	hcan.Init.Mode = CAN_MODE_NORMAL;
 8000ed8:	4b17      	ldr	r3, [pc, #92]	; (8000f38 <_ZL11MX_CAN_Initv+0x70>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	609a      	str	r2, [r3, #8]
	hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000ede:	4b16      	ldr	r3, [pc, #88]	; (8000f38 <_ZL11MX_CAN_Initv+0x70>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	60da      	str	r2, [r3, #12]
	hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000ee4:	4b14      	ldr	r3, [pc, #80]	; (8000f38 <_ZL11MX_CAN_Initv+0x70>)
 8000ee6:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000eea:	611a      	str	r2, [r3, #16]
	hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000eec:	4b12      	ldr	r3, [pc, #72]	; (8000f38 <_ZL11MX_CAN_Initv+0x70>)
 8000eee:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000ef2:	615a      	str	r2, [r3, #20]
	hcan.Init.TimeTriggeredMode = DISABLE;
 8000ef4:	4b10      	ldr	r3, [pc, #64]	; (8000f38 <_ZL11MX_CAN_Initv+0x70>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	761a      	strb	r2, [r3, #24]
	hcan.Init.AutoBusOff = DISABLE;
 8000efa:	4b0f      	ldr	r3, [pc, #60]	; (8000f38 <_ZL11MX_CAN_Initv+0x70>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	765a      	strb	r2, [r3, #25]
	hcan.Init.AutoWakeUp = DISABLE;
 8000f00:	4b0d      	ldr	r3, [pc, #52]	; (8000f38 <_ZL11MX_CAN_Initv+0x70>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	769a      	strb	r2, [r3, #26]
	hcan.Init.AutoRetransmission = DISABLE;
 8000f06:	4b0c      	ldr	r3, [pc, #48]	; (8000f38 <_ZL11MX_CAN_Initv+0x70>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	76da      	strb	r2, [r3, #27]
	hcan.Init.ReceiveFifoLocked = DISABLE;
 8000f0c:	4b0a      	ldr	r3, [pc, #40]	; (8000f38 <_ZL11MX_CAN_Initv+0x70>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	771a      	strb	r2, [r3, #28]
	hcan.Init.TransmitFifoPriority = DISABLE;
 8000f12:	4b09      	ldr	r3, [pc, #36]	; (8000f38 <_ZL11MX_CAN_Initv+0x70>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan) != HAL_OK) {
 8000f18:	4807      	ldr	r0, [pc, #28]	; (8000f38 <_ZL11MX_CAN_Initv+0x70>)
 8000f1a:	f000 fc89 	bl	8001830 <HAL_CAN_Init>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	bf14      	ite	ne
 8000f24:	2301      	movne	r3, #1
 8000f26:	2300      	moveq	r3, #0
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <_ZL11MX_CAN_Initv+0x6a>
		Error_Handler();
 8000f2e:	f000 f9fb 	bl	8001328 <Error_Handler>
	}
	/* USER CODE BEGIN CAN_Init 2 */

	/* USER CODE END CAN_Init 2 */

}
 8000f32:	bf00      	nop
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	20000348 	.word	0x20000348
 8000f3c:	40006400 	.word	0x40006400

08000f40 <_ZL12MX_SPI1_Initv>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8000f44:	4b1d      	ldr	r3, [pc, #116]	; (8000fbc <_ZL12MX_SPI1_Initv+0x7c>)
 8000f46:	4a1e      	ldr	r2, [pc, #120]	; (8000fc0 <_ZL12MX_SPI1_Initv+0x80>)
 8000f48:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f4a:	4b1c      	ldr	r3, [pc, #112]	; (8000fbc <_ZL12MX_SPI1_Initv+0x7c>)
 8000f4c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f50:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f52:	4b1a      	ldr	r3, [pc, #104]	; (8000fbc <_ZL12MX_SPI1_Initv+0x7c>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f58:	4b18      	ldr	r3, [pc, #96]	; (8000fbc <_ZL12MX_SPI1_Initv+0x7c>)
 8000f5a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000f5e:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f60:	4b16      	ldr	r3, [pc, #88]	; (8000fbc <_ZL12MX_SPI1_Initv+0x7c>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f66:	4b15      	ldr	r3, [pc, #84]	; (8000fbc <_ZL12MX_SPI1_Initv+0x7c>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f6c:	4b13      	ldr	r3, [pc, #76]	; (8000fbc <_ZL12MX_SPI1_Initv+0x7c>)
 8000f6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f72:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000f74:	4b11      	ldr	r3, [pc, #68]	; (8000fbc <_ZL12MX_SPI1_Initv+0x7c>)
 8000f76:	2210      	movs	r2, #16
 8000f78:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f7a:	4b10      	ldr	r3, [pc, #64]	; (8000fbc <_ZL12MX_SPI1_Initv+0x7c>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f80:	4b0e      	ldr	r3, [pc, #56]	; (8000fbc <_ZL12MX_SPI1_Initv+0x7c>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f86:	4b0d      	ldr	r3, [pc, #52]	; (8000fbc <_ZL12MX_SPI1_Initv+0x7c>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 8000f8c:	4b0b      	ldr	r3, [pc, #44]	; (8000fbc <_ZL12MX_SPI1_Initv+0x7c>)
 8000f8e:	2207      	movs	r2, #7
 8000f90:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f92:	4b0a      	ldr	r3, [pc, #40]	; (8000fbc <_ZL12MX_SPI1_Initv+0x7c>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f98:	4b08      	ldr	r3, [pc, #32]	; (8000fbc <_ZL12MX_SPI1_Initv+0x7c>)
 8000f9a:	2208      	movs	r2, #8
 8000f9c:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8000f9e:	4807      	ldr	r0, [pc, #28]	; (8000fbc <_ZL12MX_SPI1_Initv+0x7c>)
 8000fa0:	f002 fc30 	bl	8003804 <HAL_SPI_Init>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	bf14      	ite	ne
 8000faa:	2301      	movne	r3, #1
 8000fac:	2300      	moveq	r3, #0
 8000fae:	b2db      	uxtb	r3, r3
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <_ZL12MX_SPI1_Initv+0x78>
		Error_Handler();
 8000fb4:	f000 f9b8 	bl	8001328 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8000fb8:	bf00      	nop
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	20000370 	.word	0x20000370
 8000fc0:	40013000 	.word	0x40013000

08000fc4 <_ZL12MX_TIM3_Initv>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b08a      	sub	sp, #40	; 0x28
 8000fc8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000fca:	f107 031c 	add.w	r3, r7, #28
 8000fce:	2200      	movs	r2, #0
 8000fd0:	601a      	str	r2, [r3, #0]
 8000fd2:	605a      	str	r2, [r3, #4]
 8000fd4:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000fd6:	463b      	mov	r3, r7
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
 8000fdc:	605a      	str	r2, [r3, #4]
 8000fde:	609a      	str	r2, [r3, #8]
 8000fe0:	60da      	str	r2, [r3, #12]
 8000fe2:	611a      	str	r2, [r3, #16]
 8000fe4:	615a      	str	r2, [r3, #20]
 8000fe6:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8000fe8:	4b29      	ldr	r3, [pc, #164]	; (8001090 <_ZL12MX_TIM3_Initv+0xcc>)
 8000fea:	4a2a      	ldr	r2, [pc, #168]	; (8001094 <_ZL12MX_TIM3_Initv+0xd0>)
 8000fec:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8000fee:	4b28      	ldr	r3, [pc, #160]	; (8001090 <_ZL12MX_TIM3_Initv+0xcc>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ff4:	4b26      	ldr	r3, [pc, #152]	; (8001090 <_ZL12MX_TIM3_Initv+0xcc>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 1000;
 8000ffa:	4b25      	ldr	r3, [pc, #148]	; (8001090 <_ZL12MX_TIM3_Initv+0xcc>)
 8000ffc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001000:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001002:	4b23      	ldr	r3, [pc, #140]	; (8001090 <_ZL12MX_TIM3_Initv+0xcc>)
 8001004:	2200      	movs	r2, #0
 8001006:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001008:	4b21      	ldr	r3, [pc, #132]	; (8001090 <_ZL12MX_TIM3_Initv+0xcc>)
 800100a:	2200      	movs	r2, #0
 800100c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 800100e:	4820      	ldr	r0, [pc, #128]	; (8001090 <_ZL12MX_TIM3_Initv+0xcc>)
 8001010:	f003 f82c 	bl	800406c <HAL_TIM_PWM_Init>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	bf14      	ite	ne
 800101a:	2301      	movne	r3, #1
 800101c:	2300      	moveq	r3, #0
 800101e:	b2db      	uxtb	r3, r3
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <_ZL12MX_TIM3_Initv+0x64>
		Error_Handler();
 8001024:	f000 f980 	bl	8001328 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001028:	2300      	movs	r3, #0
 800102a:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800102c:	2300      	movs	r3, #0
 800102e:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8001030:	f107 031c 	add.w	r3, r7, #28
 8001034:	4619      	mov	r1, r3
 8001036:	4816      	ldr	r0, [pc, #88]	; (8001090 <_ZL12MX_TIM3_Initv+0xcc>)
 8001038:	f003 fefc 	bl	8004e34 <HAL_TIMEx_MasterConfigSynchronization>
 800103c:	4603      	mov	r3, r0
			!= HAL_OK) {
 800103e:	2b00      	cmp	r3, #0
 8001040:	bf14      	ite	ne
 8001042:	2301      	movne	r3, #1
 8001044:	2300      	moveq	r3, #0
 8001046:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <_ZL12MX_TIM3_Initv+0x8c>
		Error_Handler();
 800104c:	f000 f96c 	bl	8001328 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001050:	2360      	movs	r3, #96	; 0x60
 8001052:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 8001054:	2300      	movs	r3, #0
 8001056:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001058:	2300      	movs	r3, #0
 800105a:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800105c:	2300      	movs	r3, #0
 800105e:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4)
 8001060:	463b      	mov	r3, r7
 8001062:	220c      	movs	r2, #12
 8001064:	4619      	mov	r1, r3
 8001066:	480a      	ldr	r0, [pc, #40]	; (8001090 <_ZL12MX_TIM3_Initv+0xcc>)
 8001068:	f003 fa64 	bl	8004534 <HAL_TIM_PWM_ConfigChannel>
 800106c:	4603      	mov	r3, r0
			!= HAL_OK) {
 800106e:	2b00      	cmp	r3, #0
 8001070:	bf14      	ite	ne
 8001072:	2301      	movne	r3, #1
 8001074:	2300      	moveq	r3, #0
 8001076:	b2db      	uxtb	r3, r3
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4)
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <_ZL12MX_TIM3_Initv+0xbc>
		Error_Handler();
 800107c:	f000 f954 	bl	8001328 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8001080:	4803      	ldr	r0, [pc, #12]	; (8001090 <_ZL12MX_TIM3_Initv+0xcc>)
 8001082:	f000 fa63 	bl	800154c <HAL_TIM_MspPostInit>

}
 8001086:	bf00      	nop
 8001088:	3728      	adds	r7, #40	; 0x28
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	200003d4 	.word	0x200003d4
 8001094:	40000400 	.word	0x40000400

08001098 <_ZL19MX_USART2_UART_Initv>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 800109c:	4b16      	ldr	r3, [pc, #88]	; (80010f8 <_ZL19MX_USART2_UART_Initv+0x60>)
 800109e:	4a17      	ldr	r2, [pc, #92]	; (80010fc <_ZL19MX_USART2_UART_Initv+0x64>)
 80010a0:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80010a2:	4b15      	ldr	r3, [pc, #84]	; (80010f8 <_ZL19MX_USART2_UART_Initv+0x60>)
 80010a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010a8:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010aa:	4b13      	ldr	r3, [pc, #76]	; (80010f8 <_ZL19MX_USART2_UART_Initv+0x60>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80010b0:	4b11      	ldr	r3, [pc, #68]	; (80010f8 <_ZL19MX_USART2_UART_Initv+0x60>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80010b6:	4b10      	ldr	r3, [pc, #64]	; (80010f8 <_ZL19MX_USART2_UART_Initv+0x60>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80010bc:	4b0e      	ldr	r3, [pc, #56]	; (80010f8 <_ZL19MX_USART2_UART_Initv+0x60>)
 80010be:	220c      	movs	r2, #12
 80010c0:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010c2:	4b0d      	ldr	r3, [pc, #52]	; (80010f8 <_ZL19MX_USART2_UART_Initv+0x60>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010c8:	4b0b      	ldr	r3, [pc, #44]	; (80010f8 <_ZL19MX_USART2_UART_Initv+0x60>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010ce:	4b0a      	ldr	r3, [pc, #40]	; (80010f8 <_ZL19MX_USART2_UART_Initv+0x60>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010d4:	4b08      	ldr	r3, [pc, #32]	; (80010f8 <_ZL19MX_USART2_UART_Initv+0x60>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80010da:	4807      	ldr	r0, [pc, #28]	; (80010f8 <_ZL19MX_USART2_UART_Initv+0x60>)
 80010dc:	f003 ff36 	bl	8004f4c <HAL_UART_Init>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	bf14      	ite	ne
 80010e6:	2301      	movne	r3, #1
 80010e8:	2300      	moveq	r3, #0
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <_ZL19MX_USART2_UART_Initv+0x5c>
		Error_Handler();
 80010f0:	f000 f91a 	bl	8001328 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80010f4:	bf00      	nop
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	20000420 	.word	0x20000420
 80010fc:	40004400 	.word	0x40004400

08001100 <_ZL12MX_GPIO_Initv>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001100:	b580      	push	{r7, lr}
 8001102:	b088      	sub	sp, #32
 8001104:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001106:	f107 030c 	add.w	r3, r7, #12
 800110a:	2200      	movs	r2, #0
 800110c:	601a      	str	r2, [r3, #0]
 800110e:	605a      	str	r2, [r3, #4]
 8001110:	609a      	str	r2, [r3, #8]
 8001112:	60da      	str	r2, [r3, #12]
 8001114:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001116:	4b2f      	ldr	r3, [pc, #188]	; (80011d4 <_ZL12MX_GPIO_Initv+0xd4>)
 8001118:	695b      	ldr	r3, [r3, #20]
 800111a:	4a2e      	ldr	r2, [pc, #184]	; (80011d4 <_ZL12MX_GPIO_Initv+0xd4>)
 800111c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001120:	6153      	str	r3, [r2, #20]
 8001122:	4b2c      	ldr	r3, [pc, #176]	; (80011d4 <_ZL12MX_GPIO_Initv+0xd4>)
 8001124:	695b      	ldr	r3, [r3, #20]
 8001126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800112a:	60bb      	str	r3, [r7, #8]
 800112c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800112e:	4b29      	ldr	r3, [pc, #164]	; (80011d4 <_ZL12MX_GPIO_Initv+0xd4>)
 8001130:	695b      	ldr	r3, [r3, #20]
 8001132:	4a28      	ldr	r2, [pc, #160]	; (80011d4 <_ZL12MX_GPIO_Initv+0xd4>)
 8001134:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001138:	6153      	str	r3, [r2, #20]
 800113a:	4b26      	ldr	r3, [pc, #152]	; (80011d4 <_ZL12MX_GPIO_Initv+0xd4>)
 800113c:	695b      	ldr	r3, [r3, #20]
 800113e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001142:	607b      	str	r3, [r7, #4]
 8001144:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, Slave_Select_Pin | Reset_Pin, GPIO_PIN_RESET);
 8001146:	2200      	movs	r2, #0
 8001148:	f44f 7104 	mov.w	r1, #528	; 0x210
 800114c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001150:	f001 f9b8 	bl	80024c4 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : Slave_Select_Pin Reset_Pin */
	GPIO_InitStruct.Pin = Slave_Select_Pin | Reset_Pin;
 8001154:	f44f 7304 	mov.w	r3, #528	; 0x210
 8001158:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800115a:	2301      	movs	r3, #1
 800115c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115e:	2300      	movs	r3, #0
 8001160:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001162:	2300      	movs	r3, #0
 8001164:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001166:	f107 030c 	add.w	r3, r7, #12
 800116a:	4619      	mov	r1, r3
 800116c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001170:	f001 f836 	bl	80021e0 <HAL_GPIO_Init>

	/*Configure GPIO pin : OHCAT_Pin */
	GPIO_InitStruct.Pin = OHCAT_Pin;
 8001174:	2301      	movs	r3, #1
 8001176:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001178:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800117c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117e:	2300      	movs	r3, #0
 8001180:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(OHCAT_GPIO_Port, &GPIO_InitStruct);
 8001182:	f107 030c 	add.w	r3, r7, #12
 8001186:	4619      	mov	r1, r3
 8001188:	4813      	ldr	r0, [pc, #76]	; (80011d8 <_ZL12MX_GPIO_Initv+0xd8>)
 800118a:	f001 f829 	bl	80021e0 <HAL_GPIO_Init>

	/*Configure GPIO pin : DIAG_Pin */
	GPIO_InitStruct.Pin = DIAG_Pin;
 800118e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001192:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001194:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001198:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119a:	2300      	movs	r3, #0
 800119c:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(DIAG_GPIO_Port, &GPIO_InitStruct);
 800119e:	f107 030c 	add.w	r3, r7, #12
 80011a2:	4619      	mov	r1, r3
 80011a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011a8:	f001 f81a 	bl	80021e0 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80011ac:	2200      	movs	r2, #0
 80011ae:	2105      	movs	r1, #5
 80011b0:	2006      	movs	r0, #6
 80011b2:	f000 ffeb 	bl	800218c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80011b6:	2006      	movs	r0, #6
 80011b8:	f001 f804 	bl	80021c4 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80011bc:	2200      	movs	r2, #0
 80011be:	2105      	movs	r1, #5
 80011c0:	2017      	movs	r0, #23
 80011c2:	f000 ffe3 	bl	800218c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80011c6:	2017      	movs	r0, #23
 80011c8:	f000 fffc 	bl	80021c4 <HAL_NVIC_EnableIRQ>

}
 80011cc:	bf00      	nop
 80011ce:	3720      	adds	r7, #32
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	40021000 	.word	0x40021000
 80011d8:	48000400 	.word	0x48000400

080011dc <_Z13StartBLDCTaskPKv>:
 * @brief  Function implementing the BLDCTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartBLDCTask */
void StartBLDCTask(void const *argument) {
 80011dc:	b580      	push	{r7, lr}
 80011de:	b098      	sub	sp, #96	; 0x60
 80011e0:	af02      	add	r7, sp, #8
 80011e2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	HAL_CAN_Start(&hcan);
 80011e4:	4844      	ldr	r0, [pc, #272]	; (80012f8 <_Z13StartBLDCTaskPKv+0x11c>)
 80011e6:	f000 fce8 	bl	8001bba <HAL_CAN_Start>
	CAN_Filter_Init(&hcan, 0x002, 0x000, 0x000, 0x000);
 80011ea:	2300      	movs	r3, #0
 80011ec:	9300      	str	r3, [sp, #0]
 80011ee:	2300      	movs	r3, #0
 80011f0:	2200      	movs	r2, #0
 80011f2:	2102      	movs	r1, #2
 80011f4:	4840      	ldr	r0, [pc, #256]	; (80012f8 <_Z13StartBLDCTaskPKv+0x11c>)
 80011f6:	f7ff fb9b 	bl	8000930 <_Z15CAN_Filter_InitP19__CAN_HandleTypeDefmmmm>
	uint32_t PreviousWakeTime = osKernelSysTick();
 80011fa:	f004 fa0b 	bl	8005614 <osKernelSysTick>
 80011fe:	4603      	mov	r3, r0
 8001200:	653b      	str	r3, [r7, #80]	; 0x50
	A4960.init();
 8001202:	483e      	ldr	r0, [pc, #248]	; (80012fc <_Z13StartBLDCTaskPKv+0x120>)
 8001204:	f7ff fc21 	bl	8000a4a <_ZN12A4960_Helper4initEv>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8001208:	2201      	movs	r2, #1
 800120a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800120e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001212:	f001 f957 	bl	80024c4 <HAL_GPIO_WritePin>

	/* Infinite loop */
	for (;;) {
		CAN_RxHeaderTypeDef RxHeader;
		uint8_t RxData[8];
		uint8_t breake = 1;
 8001216:	2301      	movs	r3, #1
 8001218:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &RxHeader, RxData)
 800121c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001220:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001224:	2100      	movs	r1, #0
 8001226:	4834      	ldr	r0, [pc, #208]	; (80012f8 <_Z13StartBLDCTaskPKv+0x11c>)
 8001228:	f000 fde6 	bl	8001df8 <HAL_CAN_GetRxMessage>
 800122c:	4603      	mov	r3, r0
				== HAL_OK) {
 800122e:	2b00      	cmp	r3, #0
 8001230:	bf0c      	ite	eq
 8001232:	2301      	moveq	r3, #1
 8001234:	2300      	movne	r3, #0
 8001236:	b2db      	uxtb	r3, r3
		if (HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &RxHeader, RxData)
 8001238:	2b00      	cmp	r3, #0
 800123a:	d002      	beq.n	8001242 <_Z13StartBLDCTaskPKv+0x66>
			breake = 0;
 800123c:	2300      	movs	r3, #0
 800123e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		}
		if (HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO1, &RxHeader, RxData)
 8001242:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001246:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800124a:	2101      	movs	r1, #1
 800124c:	482a      	ldr	r0, [pc, #168]	; (80012f8 <_Z13StartBLDCTaskPKv+0x11c>)
 800124e:	f000 fdd3 	bl	8001df8 <HAL_CAN_GetRxMessage>
 8001252:	4603      	mov	r3, r0
				== HAL_OK) {
 8001254:	2b00      	cmp	r3, #0
 8001256:	bf0c      	ite	eq
 8001258:	2301      	moveq	r3, #1
 800125a:	2300      	movne	r3, #0
 800125c:	b2db      	uxtb	r3, r3
		if (HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO1, &RxHeader, RxData)
 800125e:	2b00      	cmp	r3, #0
 8001260:	d002      	beq.n	8001268 <_Z13StartBLDCTaskPKv+0x8c>
			breake = 0;
 8001262:	2300      	movs	r3, #0
 8001264:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		}
		if (breake) {
 8001268:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800126c:	2b00      	cmp	r3, #0
 800126e:	d141      	bne.n	80012f4 <_Z13StartBLDCTaskPKv+0x118>
			continue;
		}

		int16_t pwm_signed = (int16_t) ((int16_t) (RxData[6] << 8)
 8001270:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8001274:	021b      	lsls	r3, r3, #8
				| (int16_t) RxData[7]);
 8001276:	b21a      	sxth	r2, r3
 8001278:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800127c:	b21b      	sxth	r3, r3
		int16_t pwm_signed = (int16_t) ((int16_t) (RxData[6] << 8)
 800127e:	4313      	orrs	r3, r2
 8001280:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54

		A4960.run(pwm_signed);
 8001284:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 8001288:	4619      	mov	r1, r3
 800128a:	481c      	ldr	r0, [pc, #112]	; (80012fc <_Z13StartBLDCTaskPKv+0x120>)
 800128c:	f7ff fc41 	bl	8000b12 <_ZN12A4960_Helper3runEl>

		CAN_TxHeaderTypeDef TxHeader;
		uint32_t TxMailbox;
		uint8_t TxData[8];
		TxHeader.StdId = 0x5;
 8001290:	2305      	movs	r3, #5
 8001292:	617b      	str	r3, [r7, #20]
		TxHeader.RTR = CAN_RTR_DATA;
 8001294:	2300      	movs	r3, #0
 8001296:	623b      	str	r3, [r7, #32]
		TxHeader.IDE = CAN_ID_STD;
 8001298:	2300      	movs	r3, #0
 800129a:	61fb      	str	r3, [r7, #28]
		TxHeader.DLC = 4;
 800129c:	2304      	movs	r3, #4
 800129e:	627b      	str	r3, [r7, #36]	; 0x24
		TxHeader.TransmitGlobalTime = DISABLE;
 80012a0:	2300      	movs	r3, #0
 80012a2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
		TxData[0] = (tacho_count >> 24) & 0xFF;
 80012a6:	4b16      	ldr	r3, [pc, #88]	; (8001300 <_Z13StartBLDCTaskPKv+0x124>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	0e1b      	lsrs	r3, r3, #24
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	723b      	strb	r3, [r7, #8]
		TxData[1] = (tacho_count >> 16) & 0xFF;
 80012b0:	4b13      	ldr	r3, [pc, #76]	; (8001300 <_Z13StartBLDCTaskPKv+0x124>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	0c1b      	lsrs	r3, r3, #16
 80012b6:	b2db      	uxtb	r3, r3
 80012b8:	727b      	strb	r3, [r7, #9]
		TxData[2] = (tacho_count >> 8) & 0xFF;
 80012ba:	4b11      	ldr	r3, [pc, #68]	; (8001300 <_Z13StartBLDCTaskPKv+0x124>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	0a1b      	lsrs	r3, r3, #8
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	72bb      	strb	r3, [r7, #10]
		TxData[3] = (tacho_count >> 0) & 0xFF;
 80012c4:	4b0e      	ldr	r3, [pc, #56]	; (8001300 <_Z13StartBLDCTaskPKv+0x124>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	72fb      	strb	r3, [r7, #11]
		HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 80012cc:	f107 0310 	add.w	r3, r7, #16
 80012d0:	f107 0208 	add.w	r2, r7, #8
 80012d4:	f107 0114 	add.w	r1, r7, #20
 80012d8:	4807      	ldr	r0, [pc, #28]	; (80012f8 <_Z13StartBLDCTaskPKv+0x11c>)
 80012da:	f000 fcb2 	bl	8001c42 <HAL_CAN_AddTxMessage>
////			continue;
////		}
//
//		RunA4960(&hspi1, GPIOA, GPIO_PIN_4, &htim3, TIM_CHANNEL_4, pwm, dir);

		osDelayUntil(&PreviousWakeTime, 1);
 80012de:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80012e2:	2101      	movs	r1, #1
 80012e4:	4618      	mov	r0, r3
 80012e6:	f004 f9f1 	bl	80056cc <osDelayUntil>
		PreviousWakeTime = osKernelSysTick();
 80012ea:	f004 f993 	bl	8005614 <osKernelSysTick>
 80012ee:	4603      	mov	r3, r0
 80012f0:	653b      	str	r3, [r7, #80]	; 0x50
 80012f2:	e790      	b.n	8001216 <_Z13StartBLDCTaskPKv+0x3a>
			continue;
 80012f4:	bf00      	nop
	}
 80012f6:	e78e      	b.n	8001216 <_Z13StartBLDCTaskPKv+0x3a>
 80012f8:	20000348 	.word	0x20000348
 80012fc:	200004a8 	.word	0x200004a8
 8001300:	200004e0 	.word	0x200004e0

08001304 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM17) {
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a04      	ldr	r2, [pc, #16]	; (8001324 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d101      	bne.n	800131a <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8001316:	f000 fa6b 	bl	80017f0 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 800131a:	bf00      	nop
 800131c:	3708      	adds	r7, #8
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	40014800 	.word	0x40014800

08001328 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800132c:	b672      	cpsid	i
}
 800132e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001330:	e7fe      	b.n	8001330 <Error_Handler+0x8>
	...

08001334 <_Z41__static_initialization_and_destruction_0ii>:
	}
	/* USER CODE END Error_Handler_Debug */
}
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af02      	add	r7, sp, #8
 800133a:	6078      	str	r0, [r7, #4]
 800133c:	6039      	str	r1, [r7, #0]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2b01      	cmp	r3, #1
 8001342:	d10f      	bne.n	8001364 <_Z41__static_initialization_and_destruction_0ii+0x30>
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800134a:	4293      	cmp	r3, r2
 800134c:	d10a      	bne.n	8001364 <_Z41__static_initialization_and_destruction_0ii+0x30>
A4960_Helper A4960(&hspi1, GPIOA, GPIO_PIN_4, &htim3, TIM_CHANNEL_4);
 800134e:	230c      	movs	r3, #12
 8001350:	9301      	str	r3, [sp, #4]
 8001352:	4b0c      	ldr	r3, [pc, #48]	; (8001384 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8001354:	9300      	str	r3, [sp, #0]
 8001356:	2310      	movs	r3, #16
 8001358:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800135c:	490a      	ldr	r1, [pc, #40]	; (8001388 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 800135e:	480b      	ldr	r0, [pc, #44]	; (800138c <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8001360:	f7ff fb1a 	bl	8000998 <_ZN12A4960_HelperC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftP17TIM_HandleTypeDefm>
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d107      	bne.n	800137a <_Z41__static_initialization_and_destruction_0ii+0x46>
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001370:	4293      	cmp	r3, r2
 8001372:	d102      	bne.n	800137a <_Z41__static_initialization_and_destruction_0ii+0x46>
 8001374:	4805      	ldr	r0, [pc, #20]	; (800138c <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8001376:	f7ff fb5d 	bl	8000a34 <_ZN12A4960_HelperD1Ev>
}
 800137a:	bf00      	nop
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	200003d4 	.word	0x200003d4
 8001388:	20000370 	.word	0x20000370
 800138c:	200004a8 	.word	0x200004a8

08001390 <_GLOBAL__sub_I__Z15CAN_Filter_InitP19__CAN_HandleTypeDefmmmm>:
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
 8001394:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001398:	2001      	movs	r0, #1
 800139a:	f7ff ffcb 	bl	8001334 <_Z41__static_initialization_and_destruction_0ii>
 800139e:	bd80      	pop	{r7, pc}

080013a0 <_GLOBAL__sub_D__Z15CAN_Filter_InitP19__CAN_HandleTypeDefmmmm>:
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80013a8:	2000      	movs	r0, #0
 80013aa:	f7ff ffc3 	bl	8001334 <_Z41__static_initialization_and_destruction_0ii>
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013b6:	4b11      	ldr	r3, [pc, #68]	; (80013fc <HAL_MspInit+0x4c>)
 80013b8:	699b      	ldr	r3, [r3, #24]
 80013ba:	4a10      	ldr	r2, [pc, #64]	; (80013fc <HAL_MspInit+0x4c>)
 80013bc:	f043 0301 	orr.w	r3, r3, #1
 80013c0:	6193      	str	r3, [r2, #24]
 80013c2:	4b0e      	ldr	r3, [pc, #56]	; (80013fc <HAL_MspInit+0x4c>)
 80013c4:	699b      	ldr	r3, [r3, #24]
 80013c6:	f003 0301 	and.w	r3, r3, #1
 80013ca:	607b      	str	r3, [r7, #4]
 80013cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ce:	4b0b      	ldr	r3, [pc, #44]	; (80013fc <HAL_MspInit+0x4c>)
 80013d0:	69db      	ldr	r3, [r3, #28]
 80013d2:	4a0a      	ldr	r2, [pc, #40]	; (80013fc <HAL_MspInit+0x4c>)
 80013d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013d8:	61d3      	str	r3, [r2, #28]
 80013da:	4b08      	ldr	r3, [pc, #32]	; (80013fc <HAL_MspInit+0x4c>)
 80013dc:	69db      	ldr	r3, [r3, #28]
 80013de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013e2:	603b      	str	r3, [r7, #0]
 80013e4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80013e6:	2200      	movs	r2, #0
 80013e8:	210f      	movs	r1, #15
 80013ea:	f06f 0001 	mvn.w	r0, #1
 80013ee:	f000 fecd 	bl	800218c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013f2:	bf00      	nop
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	40021000 	.word	0x40021000

08001400 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b08a      	sub	sp, #40	; 0x28
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001408:	f107 0314 	add.w	r3, r7, #20
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	605a      	str	r2, [r3, #4]
 8001412:	609a      	str	r2, [r3, #8]
 8001414:	60da      	str	r2, [r3, #12]
 8001416:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a18      	ldr	r2, [pc, #96]	; (8001480 <HAL_CAN_MspInit+0x80>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d129      	bne.n	8001476 <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001422:	4b18      	ldr	r3, [pc, #96]	; (8001484 <HAL_CAN_MspInit+0x84>)
 8001424:	69db      	ldr	r3, [r3, #28]
 8001426:	4a17      	ldr	r2, [pc, #92]	; (8001484 <HAL_CAN_MspInit+0x84>)
 8001428:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800142c:	61d3      	str	r3, [r2, #28]
 800142e:	4b15      	ldr	r3, [pc, #84]	; (8001484 <HAL_CAN_MspInit+0x84>)
 8001430:	69db      	ldr	r3, [r3, #28]
 8001432:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001436:	613b      	str	r3, [r7, #16]
 8001438:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800143a:	4b12      	ldr	r3, [pc, #72]	; (8001484 <HAL_CAN_MspInit+0x84>)
 800143c:	695b      	ldr	r3, [r3, #20]
 800143e:	4a11      	ldr	r2, [pc, #68]	; (8001484 <HAL_CAN_MspInit+0x84>)
 8001440:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001444:	6153      	str	r3, [r2, #20]
 8001446:	4b0f      	ldr	r3, [pc, #60]	; (8001484 <HAL_CAN_MspInit+0x84>)
 8001448:	695b      	ldr	r3, [r3, #20]
 800144a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800144e:	60fb      	str	r3, [r7, #12]
 8001450:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001452:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001456:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001458:	2302      	movs	r3, #2
 800145a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145c:	2300      	movs	r3, #0
 800145e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001460:	2303      	movs	r3, #3
 8001462:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8001464:	2309      	movs	r3, #9
 8001466:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001468:	f107 0314 	add.w	r3, r7, #20
 800146c:	4619      	mov	r1, r3
 800146e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001472:	f000 feb5 	bl	80021e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8001476:	bf00      	nop
 8001478:	3728      	adds	r7, #40	; 0x28
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	40006400 	.word	0x40006400
 8001484:	40021000 	.word	0x40021000

08001488 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b08a      	sub	sp, #40	; 0x28
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001490:	f107 0314 	add.w	r3, r7, #20
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]
 8001498:	605a      	str	r2, [r3, #4]
 800149a:	609a      	str	r2, [r3, #8]
 800149c:	60da      	str	r2, [r3, #12]
 800149e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a17      	ldr	r2, [pc, #92]	; (8001504 <HAL_SPI_MspInit+0x7c>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d128      	bne.n	80014fc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80014aa:	4b17      	ldr	r3, [pc, #92]	; (8001508 <HAL_SPI_MspInit+0x80>)
 80014ac:	699b      	ldr	r3, [r3, #24]
 80014ae:	4a16      	ldr	r2, [pc, #88]	; (8001508 <HAL_SPI_MspInit+0x80>)
 80014b0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80014b4:	6193      	str	r3, [r2, #24]
 80014b6:	4b14      	ldr	r3, [pc, #80]	; (8001508 <HAL_SPI_MspInit+0x80>)
 80014b8:	699b      	ldr	r3, [r3, #24]
 80014ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014be:	613b      	str	r3, [r7, #16]
 80014c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c2:	4b11      	ldr	r3, [pc, #68]	; (8001508 <HAL_SPI_MspInit+0x80>)
 80014c4:	695b      	ldr	r3, [r3, #20]
 80014c6:	4a10      	ldr	r2, [pc, #64]	; (8001508 <HAL_SPI_MspInit+0x80>)
 80014c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014cc:	6153      	str	r3, [r2, #20]
 80014ce:	4b0e      	ldr	r3, [pc, #56]	; (8001508 <HAL_SPI_MspInit+0x80>)
 80014d0:	695b      	ldr	r3, [r3, #20]
 80014d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014d6:	60fb      	str	r3, [r7, #12]
 80014d8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80014da:	23e0      	movs	r3, #224	; 0xe0
 80014dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014de:	2302      	movs	r3, #2
 80014e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e2:	2300      	movs	r3, #0
 80014e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014e6:	2303      	movs	r3, #3
 80014e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80014ea:	2305      	movs	r3, #5
 80014ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ee:	f107 0314 	add.w	r3, r7, #20
 80014f2:	4619      	mov	r1, r3
 80014f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014f8:	f000 fe72 	bl	80021e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80014fc:	bf00      	nop
 80014fe:	3728      	adds	r7, #40	; 0x28
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	40013000 	.word	0x40013000
 8001508:	40021000 	.word	0x40021000

0800150c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800150c:	b480      	push	{r7}
 800150e:	b085      	sub	sp, #20
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a0a      	ldr	r2, [pc, #40]	; (8001544 <HAL_TIM_PWM_MspInit+0x38>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d10b      	bne.n	8001536 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800151e:	4b0a      	ldr	r3, [pc, #40]	; (8001548 <HAL_TIM_PWM_MspInit+0x3c>)
 8001520:	69db      	ldr	r3, [r3, #28]
 8001522:	4a09      	ldr	r2, [pc, #36]	; (8001548 <HAL_TIM_PWM_MspInit+0x3c>)
 8001524:	f043 0302 	orr.w	r3, r3, #2
 8001528:	61d3      	str	r3, [r2, #28]
 800152a:	4b07      	ldr	r3, [pc, #28]	; (8001548 <HAL_TIM_PWM_MspInit+0x3c>)
 800152c:	69db      	ldr	r3, [r3, #28]
 800152e:	f003 0302 	and.w	r3, r3, #2
 8001532:	60fb      	str	r3, [r7, #12]
 8001534:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001536:	bf00      	nop
 8001538:	3714      	adds	r7, #20
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	40000400 	.word	0x40000400
 8001548:	40021000 	.word	0x40021000

0800154c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b088      	sub	sp, #32
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001554:	f107 030c 	add.w	r3, r7, #12
 8001558:	2200      	movs	r2, #0
 800155a:	601a      	str	r2, [r3, #0]
 800155c:	605a      	str	r2, [r3, #4]
 800155e:	609a      	str	r2, [r3, #8]
 8001560:	60da      	str	r2, [r3, #12]
 8001562:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a11      	ldr	r2, [pc, #68]	; (80015b0 <HAL_TIM_MspPostInit+0x64>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d11b      	bne.n	80015a6 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800156e:	4b11      	ldr	r3, [pc, #68]	; (80015b4 <HAL_TIM_MspPostInit+0x68>)
 8001570:	695b      	ldr	r3, [r3, #20]
 8001572:	4a10      	ldr	r2, [pc, #64]	; (80015b4 <HAL_TIM_MspPostInit+0x68>)
 8001574:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001578:	6153      	str	r3, [r2, #20]
 800157a:	4b0e      	ldr	r3, [pc, #56]	; (80015b4 <HAL_TIM_MspPostInit+0x68>)
 800157c:	695b      	ldr	r3, [r3, #20]
 800157e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001582:	60bb      	str	r3, [r7, #8]
 8001584:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001586:	2302      	movs	r3, #2
 8001588:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800158a:	2302      	movs	r3, #2
 800158c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158e:	2300      	movs	r3, #0
 8001590:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001592:	2300      	movs	r3, #0
 8001594:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001596:	2302      	movs	r3, #2
 8001598:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800159a:	f107 030c 	add.w	r3, r7, #12
 800159e:	4619      	mov	r1, r3
 80015a0:	4805      	ldr	r0, [pc, #20]	; (80015b8 <HAL_TIM_MspPostInit+0x6c>)
 80015a2:	f000 fe1d 	bl	80021e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80015a6:	bf00      	nop
 80015a8:	3720      	adds	r7, #32
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	40000400 	.word	0x40000400
 80015b4:	40021000 	.word	0x40021000
 80015b8:	48000400 	.word	0x48000400

080015bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b08a      	sub	sp, #40	; 0x28
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c4:	f107 0314 	add.w	r3, r7, #20
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]
 80015cc:	605a      	str	r2, [r3, #4]
 80015ce:	609a      	str	r2, [r3, #8]
 80015d0:	60da      	str	r2, [r3, #12]
 80015d2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a17      	ldr	r2, [pc, #92]	; (8001638 <HAL_UART_MspInit+0x7c>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d128      	bne.n	8001630 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015de:	4b17      	ldr	r3, [pc, #92]	; (800163c <HAL_UART_MspInit+0x80>)
 80015e0:	69db      	ldr	r3, [r3, #28]
 80015e2:	4a16      	ldr	r2, [pc, #88]	; (800163c <HAL_UART_MspInit+0x80>)
 80015e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015e8:	61d3      	str	r3, [r2, #28]
 80015ea:	4b14      	ldr	r3, [pc, #80]	; (800163c <HAL_UART_MspInit+0x80>)
 80015ec:	69db      	ldr	r3, [r3, #28]
 80015ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015f2:	613b      	str	r3, [r7, #16]
 80015f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015f6:	4b11      	ldr	r3, [pc, #68]	; (800163c <HAL_UART_MspInit+0x80>)
 80015f8:	695b      	ldr	r3, [r3, #20]
 80015fa:	4a10      	ldr	r2, [pc, #64]	; (800163c <HAL_UART_MspInit+0x80>)
 80015fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001600:	6153      	str	r3, [r2, #20]
 8001602:	4b0e      	ldr	r3, [pc, #56]	; (800163c <HAL_UART_MspInit+0x80>)
 8001604:	695b      	ldr	r3, [r3, #20]
 8001606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800160a:	60fb      	str	r3, [r7, #12]
 800160c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800160e:	230c      	movs	r3, #12
 8001610:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001612:	2302      	movs	r3, #2
 8001614:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001616:	2300      	movs	r3, #0
 8001618:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800161a:	2303      	movs	r3, #3
 800161c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800161e:	2307      	movs	r3, #7
 8001620:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001622:	f107 0314 	add.w	r3, r7, #20
 8001626:	4619      	mov	r1, r3
 8001628:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800162c:	f000 fdd8 	bl	80021e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001630:	bf00      	nop
 8001632:	3728      	adds	r7, #40	; 0x28
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	40004400 	.word	0x40004400
 800163c:	40021000 	.word	0x40021000

08001640 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b08c      	sub	sp, #48	; 0x30
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001648:	2300      	movs	r3, #0
 800164a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800164c:	2300      	movs	r3, #0
 800164e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM17 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, TickPriority ,0);
 8001650:	2200      	movs	r2, #0
 8001652:	6879      	ldr	r1, [r7, #4]
 8001654:	201a      	movs	r0, #26
 8001656:	f000 fd99 	bl	800218c <HAL_NVIC_SetPriority>

  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 800165a:	201a      	movs	r0, #26
 800165c:	f000 fdb2 	bl	80021c4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8001660:	4b1e      	ldr	r3, [pc, #120]	; (80016dc <HAL_InitTick+0x9c>)
 8001662:	699b      	ldr	r3, [r3, #24]
 8001664:	4a1d      	ldr	r2, [pc, #116]	; (80016dc <HAL_InitTick+0x9c>)
 8001666:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800166a:	6193      	str	r3, [r2, #24]
 800166c:	4b1b      	ldr	r3, [pc, #108]	; (80016dc <HAL_InitTick+0x9c>)
 800166e:	699b      	ldr	r3, [r3, #24]
 8001670:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001674:	60fb      	str	r3, [r7, #12]
 8001676:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001678:	f107 0210 	add.w	r2, r7, #16
 800167c:	f107 0314 	add.w	r3, r7, #20
 8001680:	4611      	mov	r1, r2
 8001682:	4618      	mov	r0, r3
 8001684:	f002 f88c 	bl	80037a0 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001688:	f002 f868 	bl	800375c <HAL_RCC_GetPCLK2Freq>
 800168c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800168e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001690:	4a13      	ldr	r2, [pc, #76]	; (80016e0 <HAL_InitTick+0xa0>)
 8001692:	fba2 2303 	umull	r2, r3, r2, r3
 8001696:	0c9b      	lsrs	r3, r3, #18
 8001698:	3b01      	subs	r3, #1
 800169a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 800169c:	4b11      	ldr	r3, [pc, #68]	; (80016e4 <HAL_InitTick+0xa4>)
 800169e:	4a12      	ldr	r2, [pc, #72]	; (80016e8 <HAL_InitTick+0xa8>)
 80016a0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 80016a2:	4b10      	ldr	r3, [pc, #64]	; (80016e4 <HAL_InitTick+0xa4>)
 80016a4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80016a8:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 80016aa:	4a0e      	ldr	r2, [pc, #56]	; (80016e4 <HAL_InitTick+0xa4>)
 80016ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016ae:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 80016b0:	4b0c      	ldr	r3, [pc, #48]	; (80016e4 <HAL_InitTick+0xa4>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016b6:	4b0b      	ldr	r3, [pc, #44]	; (80016e4 <HAL_InitTick+0xa4>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 80016bc:	4809      	ldr	r0, [pc, #36]	; (80016e4 <HAL_InitTick+0xa4>)
 80016be:	f002 fc17 	bl	8003ef0 <HAL_TIM_Base_Init>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d104      	bne.n	80016d2 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 80016c8:	4806      	ldr	r0, [pc, #24]	; (80016e4 <HAL_InitTick+0xa4>)
 80016ca:	f002 fc73 	bl	8003fb4 <HAL_TIM_Base_Start_IT>
 80016ce:	4603      	mov	r3, r0
 80016d0:	e000      	b.n	80016d4 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3730      	adds	r7, #48	; 0x30
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	40021000 	.word	0x40021000
 80016e0:	431bde83 	.word	0x431bde83
 80016e4:	20001238 	.word	0x20001238
 80016e8:	40014800 	.word	0x40014800

080016ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016f0:	e7fe      	b.n	80016f0 <NMI_Handler+0x4>

080016f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016f2:	b480      	push	{r7}
 80016f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016f6:	e7fe      	b.n	80016f6 <HardFault_Handler+0x4>

080016f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016fc:	e7fe      	b.n	80016fc <MemManage_Handler+0x4>

080016fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016fe:	b480      	push	{r7}
 8001700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001702:	e7fe      	b.n	8001702 <BusFault_Handler+0x4>

08001704 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001708:	e7fe      	b.n	8001708 <UsageFault_Handler+0x4>

0800170a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800170a:	b480      	push	{r7}
 800170c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800170e:	bf00      	nop
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr

08001718 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(OHCAT_Pin);
 800171c:	2001      	movs	r0, #1
 800171e:	f000 fee9 	bl	80024f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001722:	bf00      	nop
 8001724:	bd80      	pop	{r7, pc}

08001726 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001726:	b580      	push	{r7, lr}
 8001728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIAG_Pin);
 800172a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800172e:	f000 fee1 	bl	80024f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001732:	bf00      	nop
 8001734:	bd80      	pop	{r7, pc}
	...

08001738 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation and TIM17 interrupts.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 800173c:	4802      	ldr	r0, [pc, #8]	; (8001748 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 800173e:	f002 fdd9 	bl	80042f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8001742:	bf00      	nop
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	20001238 	.word	0x20001238

0800174c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001750:	4b06      	ldr	r3, [pc, #24]	; (800176c <SystemInit+0x20>)
 8001752:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001756:	4a05      	ldr	r2, [pc, #20]	; (800176c <SystemInit+0x20>)
 8001758:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800175c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001760:	bf00      	nop
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	e000ed00 	.word	0xe000ed00

08001770 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001770:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017a8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001774:	480d      	ldr	r0, [pc, #52]	; (80017ac <LoopForever+0x6>)
  ldr r1, =_edata
 8001776:	490e      	ldr	r1, [pc, #56]	; (80017b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001778:	4a0e      	ldr	r2, [pc, #56]	; (80017b4 <LoopForever+0xe>)
  movs r3, #0
 800177a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800177c:	e002      	b.n	8001784 <LoopCopyDataInit>

0800177e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800177e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001780:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001782:	3304      	adds	r3, #4

08001784 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001784:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001786:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001788:	d3f9      	bcc.n	800177e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800178a:	4a0b      	ldr	r2, [pc, #44]	; (80017b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 800178c:	4c0b      	ldr	r4, [pc, #44]	; (80017bc <LoopForever+0x16>)
  movs r3, #0
 800178e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001790:	e001      	b.n	8001796 <LoopFillZerobss>

08001792 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001792:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001794:	3204      	adds	r2, #4

08001796 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001796:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001798:	d3fb      	bcc.n	8001792 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800179a:	f7ff ffd7 	bl	800174c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800179e:	f005 fa45 	bl	8006c2c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80017a2:	f7ff fb1b 	bl	8000ddc <main>

080017a6 <LoopForever>:

LoopForever:
    b LoopForever
 80017a6:	e7fe      	b.n	80017a6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80017a8:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80017ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017b0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80017b4:	08006f04 	.word	0x08006f04
  ldr r2, =_sbss
 80017b8:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80017bc:	20001294 	.word	0x20001294

080017c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80017c0:	e7fe      	b.n	80017c0 <ADC1_2_IRQHandler>
	...

080017c4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017c8:	4b08      	ldr	r3, [pc, #32]	; (80017ec <HAL_Init+0x28>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a07      	ldr	r2, [pc, #28]	; (80017ec <HAL_Init+0x28>)
 80017ce:	f043 0310 	orr.w	r3, r3, #16
 80017d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017d4:	2003      	movs	r0, #3
 80017d6:	f000 fcce 	bl	8002176 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017da:	200f      	movs	r0, #15
 80017dc:	f7ff ff30 	bl	8001640 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017e0:	f7ff fde6 	bl	80013b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017e4:	2300      	movs	r3, #0
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	40022000 	.word	0x40022000

080017f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017f4:	4b06      	ldr	r3, [pc, #24]	; (8001810 <HAL_IncTick+0x20>)
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	461a      	mov	r2, r3
 80017fa:	4b06      	ldr	r3, [pc, #24]	; (8001814 <HAL_IncTick+0x24>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4413      	add	r3, r2
 8001800:	4a04      	ldr	r2, [pc, #16]	; (8001814 <HAL_IncTick+0x24>)
 8001802:	6013      	str	r3, [r2, #0]
}
 8001804:	bf00      	nop
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	20000008 	.word	0x20000008
 8001814:	20001284 	.word	0x20001284

08001818 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  return uwTick;  
 800181c:	4b03      	ldr	r3, [pc, #12]	; (800182c <HAL_GetTick+0x14>)
 800181e:	681b      	ldr	r3, [r3, #0]
}
 8001820:	4618      	mov	r0, r3
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	20001284 	.word	0x20001284

08001830 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b084      	sub	sp, #16
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d101      	bne.n	8001842 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e0ed      	b.n	8001a1e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001848:	b2db      	uxtb	r3, r3
 800184a:	2b00      	cmp	r3, #0
 800184c:	d102      	bne.n	8001854 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	f7ff fdd6 	bl	8001400 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f042 0201 	orr.w	r2, r2, #1
 8001862:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001864:	f7ff ffd8 	bl	8001818 <HAL_GetTick>
 8001868:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800186a:	e012      	b.n	8001892 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800186c:	f7ff ffd4 	bl	8001818 <HAL_GetTick>
 8001870:	4602      	mov	r2, r0
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	2b0a      	cmp	r3, #10
 8001878:	d90b      	bls.n	8001892 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800187e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2205      	movs	r2, #5
 800188a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e0c5      	b.n	8001a1e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f003 0301 	and.w	r3, r3, #1
 800189c:	2b00      	cmp	r3, #0
 800189e:	d0e5      	beq.n	800186c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f022 0202 	bic.w	r2, r2, #2
 80018ae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80018b0:	f7ff ffb2 	bl	8001818 <HAL_GetTick>
 80018b4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80018b6:	e012      	b.n	80018de <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80018b8:	f7ff ffae 	bl	8001818 <HAL_GetTick>
 80018bc:	4602      	mov	r2, r0
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	2b0a      	cmp	r3, #10
 80018c4:	d90b      	bls.n	80018de <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ca:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2205      	movs	r2, #5
 80018d6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	e09f      	b.n	8001a1e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f003 0302 	and.w	r3, r3, #2
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d1e5      	bne.n	80018b8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	7e1b      	ldrb	r3, [r3, #24]
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d108      	bne.n	8001906 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001902:	601a      	str	r2, [r3, #0]
 8001904:	e007      	b.n	8001916 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001914:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	7e5b      	ldrb	r3, [r3, #25]
 800191a:	2b01      	cmp	r3, #1
 800191c:	d108      	bne.n	8001930 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800192c:	601a      	str	r2, [r3, #0]
 800192e:	e007      	b.n	8001940 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800193e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	7e9b      	ldrb	r3, [r3, #26]
 8001944:	2b01      	cmp	r3, #1
 8001946:	d108      	bne.n	800195a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f042 0220 	orr.w	r2, r2, #32
 8001956:	601a      	str	r2, [r3, #0]
 8001958:	e007      	b.n	800196a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f022 0220 	bic.w	r2, r2, #32
 8001968:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	7edb      	ldrb	r3, [r3, #27]
 800196e:	2b01      	cmp	r3, #1
 8001970:	d108      	bne.n	8001984 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f022 0210 	bic.w	r2, r2, #16
 8001980:	601a      	str	r2, [r3, #0]
 8001982:	e007      	b.n	8001994 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f042 0210 	orr.w	r2, r2, #16
 8001992:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	7f1b      	ldrb	r3, [r3, #28]
 8001998:	2b01      	cmp	r3, #1
 800199a:	d108      	bne.n	80019ae <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f042 0208 	orr.w	r2, r2, #8
 80019aa:	601a      	str	r2, [r3, #0]
 80019ac:	e007      	b.n	80019be <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f022 0208 	bic.w	r2, r2, #8
 80019bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	7f5b      	ldrb	r3, [r3, #29]
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d108      	bne.n	80019d8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f042 0204 	orr.w	r2, r2, #4
 80019d4:	601a      	str	r2, [r3, #0]
 80019d6:	e007      	b.n	80019e8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f022 0204 	bic.w	r2, r2, #4
 80019e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	689a      	ldr	r2, [r3, #8]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	431a      	orrs	r2, r3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	691b      	ldr	r3, [r3, #16]
 80019f6:	431a      	orrs	r2, r3
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	695b      	ldr	r3, [r3, #20]
 80019fc:	ea42 0103 	orr.w	r1, r2, r3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	1e5a      	subs	r2, r3, #1
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	430a      	orrs	r2, r1
 8001a0c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2200      	movs	r2, #0
 8001a12:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2201      	movs	r2, #1
 8001a18:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001a1c:	2300      	movs	r3, #0
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3710      	adds	r7, #16
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}

08001a26 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001a26:	b480      	push	{r7}
 8001a28:	b087      	sub	sp, #28
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	6078      	str	r0, [r7, #4]
 8001a2e:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a3c:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001a3e:	7cfb      	ldrb	r3, [r7, #19]
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d003      	beq.n	8001a4c <HAL_CAN_ConfigFilter+0x26>
 8001a44:	7cfb      	ldrb	r3, [r7, #19]
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	f040 80aa 	bne.w	8001ba0 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001a52:	f043 0201 	orr.w	r2, r3, #1
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	695b      	ldr	r3, [r3, #20]
 8001a60:	f003 031f 	and.w	r3, r3, #31
 8001a64:	2201      	movs	r2, #1
 8001a66:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	43db      	mvns	r3, r3
 8001a76:	401a      	ands	r2, r3
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	69db      	ldr	r3, [r3, #28]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d123      	bne.n	8001ace <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	43db      	mvns	r3, r3
 8001a90:	401a      	ands	r2, r3
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001aa4:	683a      	ldr	r2, [r7, #0]
 8001aa6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001aa8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	3248      	adds	r2, #72	; 0x48
 8001aae:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001ac2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001ac4:	6979      	ldr	r1, [r7, #20]
 8001ac6:	3348      	adds	r3, #72	; 0x48
 8001ac8:	00db      	lsls	r3, r3, #3
 8001aca:	440b      	add	r3, r1
 8001acc:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	69db      	ldr	r3, [r3, #28]
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d122      	bne.n	8001b1c <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	431a      	orrs	r2, r3
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001af2:	683a      	ldr	r2, [r7, #0]
 8001af4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001af6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	3248      	adds	r2, #72	; 0x48
 8001afc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	68db      	ldr	r3, [r3, #12]
 8001b0a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b10:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b12:	6979      	ldr	r1, [r7, #20]
 8001b14:	3348      	adds	r3, #72	; 0x48
 8001b16:	00db      	lsls	r3, r3, #3
 8001b18:	440b      	add	r3, r1
 8001b1a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	699b      	ldr	r3, [r3, #24]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d109      	bne.n	8001b38 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	43db      	mvns	r3, r3
 8001b2e:	401a      	ands	r2, r3
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001b36:	e007      	b.n	8001b48 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	431a      	orrs	r2, r3
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	691b      	ldr	r3, [r3, #16]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d109      	bne.n	8001b64 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	43db      	mvns	r3, r3
 8001b5a:	401a      	ands	r2, r3
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001b62:	e007      	b.n	8001b74 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	431a      	orrs	r2, r3
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	6a1b      	ldr	r3, [r3, #32]
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d107      	bne.n	8001b8c <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	431a      	orrs	r2, r3
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001b92:	f023 0201 	bic.w	r2, r3, #1
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	e006      	b.n	8001bae <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
  }
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	371c      	adds	r7, #28
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr

08001bba <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001bba:	b580      	push	{r7, lr}
 8001bbc:	b084      	sub	sp, #16
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d12e      	bne.n	8001c2c <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2202      	movs	r2, #2
 8001bd2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f022 0201 	bic.w	r2, r2, #1
 8001be4:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001be6:	f7ff fe17 	bl	8001818 <HAL_GetTick>
 8001bea:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001bec:	e012      	b.n	8001c14 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001bee:	f7ff fe13 	bl	8001818 <HAL_GetTick>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	1ad3      	subs	r3, r2, r3
 8001bf8:	2b0a      	cmp	r3, #10
 8001bfa:	d90b      	bls.n	8001c14 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c00:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2205      	movs	r2, #5
 8001c0c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e012      	b.n	8001c3a <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	f003 0301 	and.w	r3, r3, #1
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d1e5      	bne.n	8001bee <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2200      	movs	r2, #0
 8001c26:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	e006      	b.n	8001c3a <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c30:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
  }
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3710      	adds	r7, #16
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}

08001c42 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001c42:	b480      	push	{r7}
 8001c44:	b089      	sub	sp, #36	; 0x24
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	60f8      	str	r0, [r7, #12]
 8001c4a:	60b9      	str	r1, [r7, #8]
 8001c4c:	607a      	str	r2, [r7, #4]
 8001c4e:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c56:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001c60:	7ffb      	ldrb	r3, [r7, #31]
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d003      	beq.n	8001c6e <HAL_CAN_AddTxMessage+0x2c>
 8001c66:	7ffb      	ldrb	r3, [r7, #31]
 8001c68:	2b02      	cmp	r3, #2
 8001c6a:	f040 80b8 	bne.w	8001dde <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001c6e:	69bb      	ldr	r3, [r7, #24]
 8001c70:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d10a      	bne.n	8001c8e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001c78:	69bb      	ldr	r3, [r7, #24]
 8001c7a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d105      	bne.n	8001c8e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001c82:	69bb      	ldr	r3, [r7, #24]
 8001c84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	f000 80a0 	beq.w	8001dce <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001c8e:	69bb      	ldr	r3, [r7, #24]
 8001c90:	0e1b      	lsrs	r3, r3, #24
 8001c92:	f003 0303 	and.w	r3, r3, #3
 8001c96:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	2b02      	cmp	r3, #2
 8001c9c:	d907      	bls.n	8001cae <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e09e      	b.n	8001dec <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001cae:	2201      	movs	r2, #1
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	409a      	lsls	r2, r3
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d10d      	bne.n	8001cdc <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001cca:	68f9      	ldr	r1, [r7, #12]
 8001ccc:	6809      	ldr	r1, [r1, #0]
 8001cce:	431a      	orrs	r2, r3
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	3318      	adds	r3, #24
 8001cd4:	011b      	lsls	r3, r3, #4
 8001cd6:	440b      	add	r3, r1
 8001cd8:	601a      	str	r2, [r3, #0]
 8001cda:	e00f      	b.n	8001cfc <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001ce6:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001cec:	68f9      	ldr	r1, [r7, #12]
 8001cee:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001cf0:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	3318      	adds	r3, #24
 8001cf6:	011b      	lsls	r3, r3, #4
 8001cf8:	440b      	add	r3, r1
 8001cfa:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	6819      	ldr	r1, [r3, #0]
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	691a      	ldr	r2, [r3, #16]
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	3318      	adds	r3, #24
 8001d08:	011b      	lsls	r3, r3, #4
 8001d0a:	440b      	add	r3, r1
 8001d0c:	3304      	adds	r3, #4
 8001d0e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	7d1b      	ldrb	r3, [r3, #20]
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d111      	bne.n	8001d3c <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	3318      	adds	r3, #24
 8001d20:	011b      	lsls	r3, r3, #4
 8001d22:	4413      	add	r3, r2
 8001d24:	3304      	adds	r3, #4
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	68fa      	ldr	r2, [r7, #12]
 8001d2a:	6811      	ldr	r1, [r2, #0]
 8001d2c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	3318      	adds	r3, #24
 8001d34:	011b      	lsls	r3, r3, #4
 8001d36:	440b      	add	r3, r1
 8001d38:	3304      	adds	r3, #4
 8001d3a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	3307      	adds	r3, #7
 8001d40:	781b      	ldrb	r3, [r3, #0]
 8001d42:	061a      	lsls	r2, r3, #24
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	3306      	adds	r3, #6
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	041b      	lsls	r3, r3, #16
 8001d4c:	431a      	orrs	r2, r3
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	3305      	adds	r3, #5
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	021b      	lsls	r3, r3, #8
 8001d56:	4313      	orrs	r3, r2
 8001d58:	687a      	ldr	r2, [r7, #4]
 8001d5a:	3204      	adds	r2, #4
 8001d5c:	7812      	ldrb	r2, [r2, #0]
 8001d5e:	4610      	mov	r0, r2
 8001d60:	68fa      	ldr	r2, [r7, #12]
 8001d62:	6811      	ldr	r1, [r2, #0]
 8001d64:	ea43 0200 	orr.w	r2, r3, r0
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	011b      	lsls	r3, r3, #4
 8001d6c:	440b      	add	r3, r1
 8001d6e:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001d72:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	3303      	adds	r3, #3
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	061a      	lsls	r2, r3, #24
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	3302      	adds	r3, #2
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	041b      	lsls	r3, r3, #16
 8001d84:	431a      	orrs	r2, r3
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	3301      	adds	r3, #1
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	021b      	lsls	r3, r3, #8
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	687a      	ldr	r2, [r7, #4]
 8001d92:	7812      	ldrb	r2, [r2, #0]
 8001d94:	4610      	mov	r0, r2
 8001d96:	68fa      	ldr	r2, [r7, #12]
 8001d98:	6811      	ldr	r1, [r2, #0]
 8001d9a:	ea43 0200 	orr.w	r2, r3, r0
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	011b      	lsls	r3, r3, #4
 8001da2:	440b      	add	r3, r1
 8001da4:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001da8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	3318      	adds	r3, #24
 8001db2:	011b      	lsls	r3, r3, #4
 8001db4:	4413      	add	r3, r2
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	68fa      	ldr	r2, [r7, #12]
 8001dba:	6811      	ldr	r1, [r2, #0]
 8001dbc:	f043 0201 	orr.w	r2, r3, #1
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	3318      	adds	r3, #24
 8001dc4:	011b      	lsls	r3, r3, #4
 8001dc6:	440b      	add	r3, r1
 8001dc8:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	e00e      	b.n	8001dec <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e006      	b.n	8001dec <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
  }
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3724      	adds	r7, #36	; 0x24
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr

08001df8 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b087      	sub	sp, #28
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	60f8      	str	r0, [r7, #12]
 8001e00:	60b9      	str	r1, [r7, #8]
 8001e02:	607a      	str	r2, [r7, #4]
 8001e04:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e0c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001e0e:	7dfb      	ldrb	r3, [r7, #23]
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d003      	beq.n	8001e1c <HAL_CAN_GetRxMessage+0x24>
 8001e14:	7dfb      	ldrb	r3, [r7, #23]
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	f040 80f3 	bne.w	8002002 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d10e      	bne.n	8001e40 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	f003 0303 	and.w	r3, r3, #3
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d116      	bne.n	8001e5e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e34:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e0e7      	b.n	8002010 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	691b      	ldr	r3, [r3, #16]
 8001e46:	f003 0303 	and.w	r3, r3, #3
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d107      	bne.n	8001e5e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e52:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e0d8      	b.n	8002010 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	331b      	adds	r3, #27
 8001e66:	011b      	lsls	r3, r3, #4
 8001e68:	4413      	add	r3, r2
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 0204 	and.w	r2, r3, #4
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d10c      	bne.n	8001e96 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	331b      	adds	r3, #27
 8001e84:	011b      	lsls	r3, r3, #4
 8001e86:	4413      	add	r3, r2
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	0d5b      	lsrs	r3, r3, #21
 8001e8c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	601a      	str	r2, [r3, #0]
 8001e94:	e00b      	b.n	8001eae <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	331b      	adds	r3, #27
 8001e9e:	011b      	lsls	r3, r3, #4
 8001ea0:	4413      	add	r3, r2
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	08db      	lsrs	r3, r3, #3
 8001ea6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	331b      	adds	r3, #27
 8001eb6:	011b      	lsls	r3, r3, #4
 8001eb8:	4413      	add	r3, r2
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0202 	and.w	r2, r3, #2
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	331b      	adds	r3, #27
 8001ecc:	011b      	lsls	r3, r3, #4
 8001ece:	4413      	add	r3, r2
 8001ed0:	3304      	adds	r3, #4
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 020f 	and.w	r2, r3, #15
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	331b      	adds	r3, #27
 8001ee4:	011b      	lsls	r3, r3, #4
 8001ee6:	4413      	add	r3, r2
 8001ee8:	3304      	adds	r3, #4
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	0a1b      	lsrs	r3, r3, #8
 8001eee:	b2da      	uxtb	r2, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	331b      	adds	r3, #27
 8001efc:	011b      	lsls	r3, r3, #4
 8001efe:	4413      	add	r3, r2
 8001f00:	3304      	adds	r3, #4
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	0c1b      	lsrs	r3, r3, #16
 8001f06:	b29a      	uxth	r2, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	011b      	lsls	r3, r3, #4
 8001f14:	4413      	add	r3, r2
 8001f16:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	b2da      	uxtb	r2, r3
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	011b      	lsls	r3, r3, #4
 8001f2a:	4413      	add	r3, r2
 8001f2c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	0a1a      	lsrs	r2, r3, #8
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	3301      	adds	r3, #1
 8001f38:	b2d2      	uxtb	r2, r2
 8001f3a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	011b      	lsls	r3, r3, #4
 8001f44:	4413      	add	r3, r2
 8001f46:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	0c1a      	lsrs	r2, r3, #16
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	3302      	adds	r3, #2
 8001f52:	b2d2      	uxtb	r2, r2
 8001f54:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	011b      	lsls	r3, r3, #4
 8001f5e:	4413      	add	r3, r2
 8001f60:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	0e1a      	lsrs	r2, r3, #24
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	3303      	adds	r3, #3
 8001f6c:	b2d2      	uxtb	r2, r2
 8001f6e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	011b      	lsls	r3, r3, #4
 8001f78:	4413      	add	r3, r2
 8001f7a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	3304      	adds	r3, #4
 8001f84:	b2d2      	uxtb	r2, r2
 8001f86:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	011b      	lsls	r3, r3, #4
 8001f90:	4413      	add	r3, r2
 8001f92:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	0a1a      	lsrs	r2, r3, #8
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	3305      	adds	r3, #5
 8001f9e:	b2d2      	uxtb	r2, r2
 8001fa0:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	011b      	lsls	r3, r3, #4
 8001faa:	4413      	add	r3, r2
 8001fac:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	0c1a      	lsrs	r2, r3, #16
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	3306      	adds	r3, #6
 8001fb8:	b2d2      	uxtb	r2, r2
 8001fba:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	011b      	lsls	r3, r3, #4
 8001fc4:	4413      	add	r3, r2
 8001fc6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	0e1a      	lsrs	r2, r3, #24
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	3307      	adds	r3, #7
 8001fd2:	b2d2      	uxtb	r2, r2
 8001fd4:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d108      	bne.n	8001fee <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	68da      	ldr	r2, [r3, #12]
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f042 0220 	orr.w	r2, r2, #32
 8001fea:	60da      	str	r2, [r3, #12]
 8001fec:	e007      	b.n	8001ffe <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	691a      	ldr	r2, [r3, #16]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f042 0220 	orr.w	r2, r2, #32
 8001ffc:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001ffe:	2300      	movs	r3, #0
 8002000:	e006      	b.n	8002010 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002006:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
  }
}
 8002010:	4618      	mov	r0, r3
 8002012:	371c      	adds	r7, #28
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr

0800201c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800201c:	b480      	push	{r7}
 800201e:	b085      	sub	sp, #20
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	f003 0307 	and.w	r3, r3, #7
 800202a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800202c:	4b0c      	ldr	r3, [pc, #48]	; (8002060 <__NVIC_SetPriorityGrouping+0x44>)
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002032:	68ba      	ldr	r2, [r7, #8]
 8002034:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002038:	4013      	ands	r3, r2
 800203a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002044:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002048:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800204c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800204e:	4a04      	ldr	r2, [pc, #16]	; (8002060 <__NVIC_SetPriorityGrouping+0x44>)
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	60d3      	str	r3, [r2, #12]
}
 8002054:	bf00      	nop
 8002056:	3714      	adds	r7, #20
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr
 8002060:	e000ed00 	.word	0xe000ed00

08002064 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002068:	4b04      	ldr	r3, [pc, #16]	; (800207c <__NVIC_GetPriorityGrouping+0x18>)
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	0a1b      	lsrs	r3, r3, #8
 800206e:	f003 0307 	and.w	r3, r3, #7
}
 8002072:	4618      	mov	r0, r3
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr
 800207c:	e000ed00 	.word	0xe000ed00

08002080 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	4603      	mov	r3, r0
 8002088:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800208a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800208e:	2b00      	cmp	r3, #0
 8002090:	db0b      	blt.n	80020aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002092:	79fb      	ldrb	r3, [r7, #7]
 8002094:	f003 021f 	and.w	r2, r3, #31
 8002098:	4907      	ldr	r1, [pc, #28]	; (80020b8 <__NVIC_EnableIRQ+0x38>)
 800209a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800209e:	095b      	lsrs	r3, r3, #5
 80020a0:	2001      	movs	r0, #1
 80020a2:	fa00 f202 	lsl.w	r2, r0, r2
 80020a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020aa:	bf00      	nop
 80020ac:	370c      	adds	r7, #12
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr
 80020b6:	bf00      	nop
 80020b8:	e000e100 	.word	0xe000e100

080020bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	4603      	mov	r3, r0
 80020c4:	6039      	str	r1, [r7, #0]
 80020c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	db0a      	blt.n	80020e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	b2da      	uxtb	r2, r3
 80020d4:	490c      	ldr	r1, [pc, #48]	; (8002108 <__NVIC_SetPriority+0x4c>)
 80020d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020da:	0112      	lsls	r2, r2, #4
 80020dc:	b2d2      	uxtb	r2, r2
 80020de:	440b      	add	r3, r1
 80020e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020e4:	e00a      	b.n	80020fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	b2da      	uxtb	r2, r3
 80020ea:	4908      	ldr	r1, [pc, #32]	; (800210c <__NVIC_SetPriority+0x50>)
 80020ec:	79fb      	ldrb	r3, [r7, #7]
 80020ee:	f003 030f 	and.w	r3, r3, #15
 80020f2:	3b04      	subs	r3, #4
 80020f4:	0112      	lsls	r2, r2, #4
 80020f6:	b2d2      	uxtb	r2, r2
 80020f8:	440b      	add	r3, r1
 80020fa:	761a      	strb	r2, [r3, #24]
}
 80020fc:	bf00      	nop
 80020fe:	370c      	adds	r7, #12
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr
 8002108:	e000e100 	.word	0xe000e100
 800210c:	e000ed00 	.word	0xe000ed00

08002110 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002110:	b480      	push	{r7}
 8002112:	b089      	sub	sp, #36	; 0x24
 8002114:	af00      	add	r7, sp, #0
 8002116:	60f8      	str	r0, [r7, #12]
 8002118:	60b9      	str	r1, [r7, #8]
 800211a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	f003 0307 	and.w	r3, r3, #7
 8002122:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	f1c3 0307 	rsb	r3, r3, #7
 800212a:	2b04      	cmp	r3, #4
 800212c:	bf28      	it	cs
 800212e:	2304      	movcs	r3, #4
 8002130:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	3304      	adds	r3, #4
 8002136:	2b06      	cmp	r3, #6
 8002138:	d902      	bls.n	8002140 <NVIC_EncodePriority+0x30>
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	3b03      	subs	r3, #3
 800213e:	e000      	b.n	8002142 <NVIC_EncodePriority+0x32>
 8002140:	2300      	movs	r3, #0
 8002142:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002144:	f04f 32ff 	mov.w	r2, #4294967295
 8002148:	69bb      	ldr	r3, [r7, #24]
 800214a:	fa02 f303 	lsl.w	r3, r2, r3
 800214e:	43da      	mvns	r2, r3
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	401a      	ands	r2, r3
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002158:	f04f 31ff 	mov.w	r1, #4294967295
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	fa01 f303 	lsl.w	r3, r1, r3
 8002162:	43d9      	mvns	r1, r3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002168:	4313      	orrs	r3, r2
         );
}
 800216a:	4618      	mov	r0, r3
 800216c:	3724      	adds	r7, #36	; 0x24
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr

08002176 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002176:	b580      	push	{r7, lr}
 8002178:	b082      	sub	sp, #8
 800217a:	af00      	add	r7, sp, #0
 800217c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f7ff ff4c 	bl	800201c <__NVIC_SetPriorityGrouping>
}
 8002184:	bf00      	nop
 8002186:	3708      	adds	r7, #8
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}

0800218c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b086      	sub	sp, #24
 8002190:	af00      	add	r7, sp, #0
 8002192:	4603      	mov	r3, r0
 8002194:	60b9      	str	r1, [r7, #8]
 8002196:	607a      	str	r2, [r7, #4]
 8002198:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800219a:	2300      	movs	r3, #0
 800219c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800219e:	f7ff ff61 	bl	8002064 <__NVIC_GetPriorityGrouping>
 80021a2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	68b9      	ldr	r1, [r7, #8]
 80021a8:	6978      	ldr	r0, [r7, #20]
 80021aa:	f7ff ffb1 	bl	8002110 <NVIC_EncodePriority>
 80021ae:	4602      	mov	r2, r0
 80021b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021b4:	4611      	mov	r1, r2
 80021b6:	4618      	mov	r0, r3
 80021b8:	f7ff ff80 	bl	80020bc <__NVIC_SetPriority>
}
 80021bc:	bf00      	nop
 80021be:	3718      	adds	r7, #24
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}

080021c4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	4603      	mov	r3, r0
 80021cc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d2:	4618      	mov	r0, r3
 80021d4:	f7ff ff54 	bl	8002080 <__NVIC_EnableIRQ>
}
 80021d8:	bf00      	nop
 80021da:	3708      	adds	r7, #8
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}

080021e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b087      	sub	sp, #28
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021ea:	2300      	movs	r3, #0
 80021ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021ee:	e14e      	b.n	800248e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	2101      	movs	r1, #1
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	fa01 f303 	lsl.w	r3, r1, r3
 80021fc:	4013      	ands	r3, r2
 80021fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	2b00      	cmp	r3, #0
 8002204:	f000 8140 	beq.w	8002488 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f003 0303 	and.w	r3, r3, #3
 8002210:	2b01      	cmp	r3, #1
 8002212:	d005      	beq.n	8002220 <HAL_GPIO_Init+0x40>
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f003 0303 	and.w	r3, r3, #3
 800221c:	2b02      	cmp	r3, #2
 800221e:	d130      	bne.n	8002282 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	005b      	lsls	r3, r3, #1
 800222a:	2203      	movs	r2, #3
 800222c:	fa02 f303 	lsl.w	r3, r2, r3
 8002230:	43db      	mvns	r3, r3
 8002232:	693a      	ldr	r2, [r7, #16]
 8002234:	4013      	ands	r3, r2
 8002236:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	68da      	ldr	r2, [r3, #12]
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	005b      	lsls	r3, r3, #1
 8002240:	fa02 f303 	lsl.w	r3, r2, r3
 8002244:	693a      	ldr	r2, [r7, #16]
 8002246:	4313      	orrs	r3, r2
 8002248:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	693a      	ldr	r2, [r7, #16]
 800224e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002256:	2201      	movs	r2, #1
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	fa02 f303 	lsl.w	r3, r2, r3
 800225e:	43db      	mvns	r3, r3
 8002260:	693a      	ldr	r2, [r7, #16]
 8002262:	4013      	ands	r3, r2
 8002264:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	091b      	lsrs	r3, r3, #4
 800226c:	f003 0201 	and.w	r2, r3, #1
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	fa02 f303 	lsl.w	r3, r2, r3
 8002276:	693a      	ldr	r2, [r7, #16]
 8002278:	4313      	orrs	r3, r2
 800227a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	693a      	ldr	r2, [r7, #16]
 8002280:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	f003 0303 	and.w	r3, r3, #3
 800228a:	2b03      	cmp	r3, #3
 800228c:	d017      	beq.n	80022be <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	68db      	ldr	r3, [r3, #12]
 8002292:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	005b      	lsls	r3, r3, #1
 8002298:	2203      	movs	r2, #3
 800229a:	fa02 f303 	lsl.w	r3, r2, r3
 800229e:	43db      	mvns	r3, r3
 80022a0:	693a      	ldr	r2, [r7, #16]
 80022a2:	4013      	ands	r3, r2
 80022a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	689a      	ldr	r2, [r3, #8]
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	005b      	lsls	r3, r3, #1
 80022ae:	fa02 f303 	lsl.w	r3, r2, r3
 80022b2:	693a      	ldr	r2, [r7, #16]
 80022b4:	4313      	orrs	r3, r2
 80022b6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	693a      	ldr	r2, [r7, #16]
 80022bc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	f003 0303 	and.w	r3, r3, #3
 80022c6:	2b02      	cmp	r3, #2
 80022c8:	d123      	bne.n	8002312 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	08da      	lsrs	r2, r3, #3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	3208      	adds	r2, #8
 80022d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	f003 0307 	and.w	r3, r3, #7
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	220f      	movs	r2, #15
 80022e2:	fa02 f303 	lsl.w	r3, r2, r3
 80022e6:	43db      	mvns	r3, r3
 80022e8:	693a      	ldr	r2, [r7, #16]
 80022ea:	4013      	ands	r3, r2
 80022ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	691a      	ldr	r2, [r3, #16]
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	f003 0307 	and.w	r3, r3, #7
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	fa02 f303 	lsl.w	r3, r2, r3
 80022fe:	693a      	ldr	r2, [r7, #16]
 8002300:	4313      	orrs	r3, r2
 8002302:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	08da      	lsrs	r2, r3, #3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	3208      	adds	r2, #8
 800230c:	6939      	ldr	r1, [r7, #16]
 800230e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	005b      	lsls	r3, r3, #1
 800231c:	2203      	movs	r2, #3
 800231e:	fa02 f303 	lsl.w	r3, r2, r3
 8002322:	43db      	mvns	r3, r3
 8002324:	693a      	ldr	r2, [r7, #16]
 8002326:	4013      	ands	r3, r2
 8002328:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	f003 0203 	and.w	r2, r3, #3
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	005b      	lsls	r3, r3, #1
 8002336:	fa02 f303 	lsl.w	r3, r2, r3
 800233a:	693a      	ldr	r2, [r7, #16]
 800233c:	4313      	orrs	r3, r2
 800233e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	693a      	ldr	r2, [r7, #16]
 8002344:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800234e:	2b00      	cmp	r3, #0
 8002350:	f000 809a 	beq.w	8002488 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002354:	4b55      	ldr	r3, [pc, #340]	; (80024ac <HAL_GPIO_Init+0x2cc>)
 8002356:	699b      	ldr	r3, [r3, #24]
 8002358:	4a54      	ldr	r2, [pc, #336]	; (80024ac <HAL_GPIO_Init+0x2cc>)
 800235a:	f043 0301 	orr.w	r3, r3, #1
 800235e:	6193      	str	r3, [r2, #24]
 8002360:	4b52      	ldr	r3, [pc, #328]	; (80024ac <HAL_GPIO_Init+0x2cc>)
 8002362:	699b      	ldr	r3, [r3, #24]
 8002364:	f003 0301 	and.w	r3, r3, #1
 8002368:	60bb      	str	r3, [r7, #8]
 800236a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800236c:	4a50      	ldr	r2, [pc, #320]	; (80024b0 <HAL_GPIO_Init+0x2d0>)
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	089b      	lsrs	r3, r3, #2
 8002372:	3302      	adds	r3, #2
 8002374:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002378:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	f003 0303 	and.w	r3, r3, #3
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	220f      	movs	r2, #15
 8002384:	fa02 f303 	lsl.w	r3, r2, r3
 8002388:	43db      	mvns	r3, r3
 800238a:	693a      	ldr	r2, [r7, #16]
 800238c:	4013      	ands	r3, r2
 800238e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002396:	d013      	beq.n	80023c0 <HAL_GPIO_Init+0x1e0>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	4a46      	ldr	r2, [pc, #280]	; (80024b4 <HAL_GPIO_Init+0x2d4>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d00d      	beq.n	80023bc <HAL_GPIO_Init+0x1dc>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	4a45      	ldr	r2, [pc, #276]	; (80024b8 <HAL_GPIO_Init+0x2d8>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d007      	beq.n	80023b8 <HAL_GPIO_Init+0x1d8>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	4a44      	ldr	r2, [pc, #272]	; (80024bc <HAL_GPIO_Init+0x2dc>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d101      	bne.n	80023b4 <HAL_GPIO_Init+0x1d4>
 80023b0:	2303      	movs	r3, #3
 80023b2:	e006      	b.n	80023c2 <HAL_GPIO_Init+0x1e2>
 80023b4:	2305      	movs	r3, #5
 80023b6:	e004      	b.n	80023c2 <HAL_GPIO_Init+0x1e2>
 80023b8:	2302      	movs	r3, #2
 80023ba:	e002      	b.n	80023c2 <HAL_GPIO_Init+0x1e2>
 80023bc:	2301      	movs	r3, #1
 80023be:	e000      	b.n	80023c2 <HAL_GPIO_Init+0x1e2>
 80023c0:	2300      	movs	r3, #0
 80023c2:	697a      	ldr	r2, [r7, #20]
 80023c4:	f002 0203 	and.w	r2, r2, #3
 80023c8:	0092      	lsls	r2, r2, #2
 80023ca:	4093      	lsls	r3, r2
 80023cc:	693a      	ldr	r2, [r7, #16]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80023d2:	4937      	ldr	r1, [pc, #220]	; (80024b0 <HAL_GPIO_Init+0x2d0>)
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	089b      	lsrs	r3, r3, #2
 80023d8:	3302      	adds	r3, #2
 80023da:	693a      	ldr	r2, [r7, #16]
 80023dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023e0:	4b37      	ldr	r3, [pc, #220]	; (80024c0 <HAL_GPIO_Init+0x2e0>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	43db      	mvns	r3, r3
 80023ea:	693a      	ldr	r2, [r7, #16]
 80023ec:	4013      	ands	r3, r2
 80023ee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d003      	beq.n	8002404 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80023fc:	693a      	ldr	r2, [r7, #16]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	4313      	orrs	r3, r2
 8002402:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002404:	4a2e      	ldr	r2, [pc, #184]	; (80024c0 <HAL_GPIO_Init+0x2e0>)
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800240a:	4b2d      	ldr	r3, [pc, #180]	; (80024c0 <HAL_GPIO_Init+0x2e0>)
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	43db      	mvns	r3, r3
 8002414:	693a      	ldr	r2, [r7, #16]
 8002416:	4013      	ands	r3, r2
 8002418:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d003      	beq.n	800242e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002426:	693a      	ldr	r2, [r7, #16]
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	4313      	orrs	r3, r2
 800242c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800242e:	4a24      	ldr	r2, [pc, #144]	; (80024c0 <HAL_GPIO_Init+0x2e0>)
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002434:	4b22      	ldr	r3, [pc, #136]	; (80024c0 <HAL_GPIO_Init+0x2e0>)
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	43db      	mvns	r3, r3
 800243e:	693a      	ldr	r2, [r7, #16]
 8002440:	4013      	ands	r3, r2
 8002442:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800244c:	2b00      	cmp	r3, #0
 800244e:	d003      	beq.n	8002458 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002450:	693a      	ldr	r2, [r7, #16]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	4313      	orrs	r3, r2
 8002456:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002458:	4a19      	ldr	r2, [pc, #100]	; (80024c0 <HAL_GPIO_Init+0x2e0>)
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800245e:	4b18      	ldr	r3, [pc, #96]	; (80024c0 <HAL_GPIO_Init+0x2e0>)
 8002460:	68db      	ldr	r3, [r3, #12]
 8002462:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	43db      	mvns	r3, r3
 8002468:	693a      	ldr	r2, [r7, #16]
 800246a:	4013      	ands	r3, r2
 800246c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d003      	beq.n	8002482 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800247a:	693a      	ldr	r2, [r7, #16]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	4313      	orrs	r3, r2
 8002480:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002482:	4a0f      	ldr	r2, [pc, #60]	; (80024c0 <HAL_GPIO_Init+0x2e0>)
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	3301      	adds	r3, #1
 800248c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	fa22 f303 	lsr.w	r3, r2, r3
 8002498:	2b00      	cmp	r3, #0
 800249a:	f47f aea9 	bne.w	80021f0 <HAL_GPIO_Init+0x10>
  }
}
 800249e:	bf00      	nop
 80024a0:	bf00      	nop
 80024a2:	371c      	adds	r7, #28
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr
 80024ac:	40021000 	.word	0x40021000
 80024b0:	40010000 	.word	0x40010000
 80024b4:	48000400 	.word	0x48000400
 80024b8:	48000800 	.word	0x48000800
 80024bc:	48000c00 	.word	0x48000c00
 80024c0:	40010400 	.word	0x40010400

080024c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	460b      	mov	r3, r1
 80024ce:	807b      	strh	r3, [r7, #2]
 80024d0:	4613      	mov	r3, r2
 80024d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024d4:	787b      	ldrb	r3, [r7, #1]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d003      	beq.n	80024e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80024da:	887a      	ldrh	r2, [r7, #2]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80024e0:	e002      	b.n	80024e8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80024e2:	887a      	ldrh	r2, [r7, #2]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80024e8:	bf00      	nop
 80024ea:	370c      	adds	r7, #12
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr

080024f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	4603      	mov	r3, r0
 80024fc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80024fe:	4b08      	ldr	r3, [pc, #32]	; (8002520 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002500:	695a      	ldr	r2, [r3, #20]
 8002502:	88fb      	ldrh	r3, [r7, #6]
 8002504:	4013      	ands	r3, r2
 8002506:	2b00      	cmp	r3, #0
 8002508:	d006      	beq.n	8002518 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800250a:	4a05      	ldr	r2, [pc, #20]	; (8002520 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800250c:	88fb      	ldrh	r3, [r7, #6]
 800250e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002510:	88fb      	ldrh	r3, [r7, #6]
 8002512:	4618      	mov	r0, r3
 8002514:	f7fe fc42 	bl	8000d9c <HAL_GPIO_EXTI_Callback>
  }
}
 8002518:	bf00      	nop
 800251a:	3708      	adds	r7, #8
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	40010400 	.word	0x40010400

08002524 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800252a:	af00      	add	r7, sp, #0
 800252c:	1d3b      	adds	r3, r7, #4
 800252e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002530:	1d3b      	adds	r3, r7, #4
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d102      	bne.n	800253e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	f000 bef4 	b.w	8003326 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800253e:	1d3b      	adds	r3, r7, #4
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0301 	and.w	r3, r3, #1
 8002548:	2b00      	cmp	r3, #0
 800254a:	f000 816a 	beq.w	8002822 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800254e:	4bb3      	ldr	r3, [pc, #716]	; (800281c <HAL_RCC_OscConfig+0x2f8>)
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f003 030c 	and.w	r3, r3, #12
 8002556:	2b04      	cmp	r3, #4
 8002558:	d00c      	beq.n	8002574 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800255a:	4bb0      	ldr	r3, [pc, #704]	; (800281c <HAL_RCC_OscConfig+0x2f8>)
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	f003 030c 	and.w	r3, r3, #12
 8002562:	2b08      	cmp	r3, #8
 8002564:	d159      	bne.n	800261a <HAL_RCC_OscConfig+0xf6>
 8002566:	4bad      	ldr	r3, [pc, #692]	; (800281c <HAL_RCC_OscConfig+0x2f8>)
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800256e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002572:	d152      	bne.n	800261a <HAL_RCC_OscConfig+0xf6>
 8002574:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002578:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800257c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002580:	fa93 f3a3 	rbit	r3, r3
 8002584:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002588:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800258c:	fab3 f383 	clz	r3, r3
 8002590:	b2db      	uxtb	r3, r3
 8002592:	095b      	lsrs	r3, r3, #5
 8002594:	b2db      	uxtb	r3, r3
 8002596:	f043 0301 	orr.w	r3, r3, #1
 800259a:	b2db      	uxtb	r3, r3
 800259c:	2b01      	cmp	r3, #1
 800259e:	d102      	bne.n	80025a6 <HAL_RCC_OscConfig+0x82>
 80025a0:	4b9e      	ldr	r3, [pc, #632]	; (800281c <HAL_RCC_OscConfig+0x2f8>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	e015      	b.n	80025d2 <HAL_RCC_OscConfig+0xae>
 80025a6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025aa:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ae:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80025b2:	fa93 f3a3 	rbit	r3, r3
 80025b6:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80025ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025be:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80025c2:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80025c6:	fa93 f3a3 	rbit	r3, r3
 80025ca:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80025ce:	4b93      	ldr	r3, [pc, #588]	; (800281c <HAL_RCC_OscConfig+0x2f8>)
 80025d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80025d6:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80025da:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80025de:	fa92 f2a2 	rbit	r2, r2
 80025e2:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80025e6:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80025ea:	fab2 f282 	clz	r2, r2
 80025ee:	b2d2      	uxtb	r2, r2
 80025f0:	f042 0220 	orr.w	r2, r2, #32
 80025f4:	b2d2      	uxtb	r2, r2
 80025f6:	f002 021f 	and.w	r2, r2, #31
 80025fa:	2101      	movs	r1, #1
 80025fc:	fa01 f202 	lsl.w	r2, r1, r2
 8002600:	4013      	ands	r3, r2
 8002602:	2b00      	cmp	r3, #0
 8002604:	f000 810c 	beq.w	8002820 <HAL_RCC_OscConfig+0x2fc>
 8002608:	1d3b      	adds	r3, r7, #4
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	2b00      	cmp	r3, #0
 8002610:	f040 8106 	bne.w	8002820 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	f000 be86 	b.w	8003326 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800261a:	1d3b      	adds	r3, r7, #4
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002624:	d106      	bne.n	8002634 <HAL_RCC_OscConfig+0x110>
 8002626:	4b7d      	ldr	r3, [pc, #500]	; (800281c <HAL_RCC_OscConfig+0x2f8>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a7c      	ldr	r2, [pc, #496]	; (800281c <HAL_RCC_OscConfig+0x2f8>)
 800262c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002630:	6013      	str	r3, [r2, #0]
 8002632:	e030      	b.n	8002696 <HAL_RCC_OscConfig+0x172>
 8002634:	1d3b      	adds	r3, r7, #4
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d10c      	bne.n	8002658 <HAL_RCC_OscConfig+0x134>
 800263e:	4b77      	ldr	r3, [pc, #476]	; (800281c <HAL_RCC_OscConfig+0x2f8>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a76      	ldr	r2, [pc, #472]	; (800281c <HAL_RCC_OscConfig+0x2f8>)
 8002644:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002648:	6013      	str	r3, [r2, #0]
 800264a:	4b74      	ldr	r3, [pc, #464]	; (800281c <HAL_RCC_OscConfig+0x2f8>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a73      	ldr	r2, [pc, #460]	; (800281c <HAL_RCC_OscConfig+0x2f8>)
 8002650:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002654:	6013      	str	r3, [r2, #0]
 8002656:	e01e      	b.n	8002696 <HAL_RCC_OscConfig+0x172>
 8002658:	1d3b      	adds	r3, r7, #4
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002662:	d10c      	bne.n	800267e <HAL_RCC_OscConfig+0x15a>
 8002664:	4b6d      	ldr	r3, [pc, #436]	; (800281c <HAL_RCC_OscConfig+0x2f8>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a6c      	ldr	r2, [pc, #432]	; (800281c <HAL_RCC_OscConfig+0x2f8>)
 800266a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800266e:	6013      	str	r3, [r2, #0]
 8002670:	4b6a      	ldr	r3, [pc, #424]	; (800281c <HAL_RCC_OscConfig+0x2f8>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a69      	ldr	r2, [pc, #420]	; (800281c <HAL_RCC_OscConfig+0x2f8>)
 8002676:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800267a:	6013      	str	r3, [r2, #0]
 800267c:	e00b      	b.n	8002696 <HAL_RCC_OscConfig+0x172>
 800267e:	4b67      	ldr	r3, [pc, #412]	; (800281c <HAL_RCC_OscConfig+0x2f8>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a66      	ldr	r2, [pc, #408]	; (800281c <HAL_RCC_OscConfig+0x2f8>)
 8002684:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002688:	6013      	str	r3, [r2, #0]
 800268a:	4b64      	ldr	r3, [pc, #400]	; (800281c <HAL_RCC_OscConfig+0x2f8>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a63      	ldr	r2, [pc, #396]	; (800281c <HAL_RCC_OscConfig+0x2f8>)
 8002690:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002694:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002696:	4b61      	ldr	r3, [pc, #388]	; (800281c <HAL_RCC_OscConfig+0x2f8>)
 8002698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800269a:	f023 020f 	bic.w	r2, r3, #15
 800269e:	1d3b      	adds	r3, r7, #4
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	495d      	ldr	r1, [pc, #372]	; (800281c <HAL_RCC_OscConfig+0x2f8>)
 80026a6:	4313      	orrs	r3, r2
 80026a8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026aa:	1d3b      	adds	r3, r7, #4
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d059      	beq.n	8002768 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b4:	f7ff f8b0 	bl	8001818 <HAL_GetTick>
 80026b8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026bc:	e00a      	b.n	80026d4 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026be:	f7ff f8ab 	bl	8001818 <HAL_GetTick>
 80026c2:	4602      	mov	r2, r0
 80026c4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	2b64      	cmp	r3, #100	; 0x64
 80026cc:	d902      	bls.n	80026d4 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	f000 be29 	b.w	8003326 <HAL_RCC_OscConfig+0xe02>
 80026d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026d8:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026dc:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80026e0:	fa93 f3a3 	rbit	r3, r3
 80026e4:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80026e8:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ec:	fab3 f383 	clz	r3, r3
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	095b      	lsrs	r3, r3, #5
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	f043 0301 	orr.w	r3, r3, #1
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d102      	bne.n	8002706 <HAL_RCC_OscConfig+0x1e2>
 8002700:	4b46      	ldr	r3, [pc, #280]	; (800281c <HAL_RCC_OscConfig+0x2f8>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	e015      	b.n	8002732 <HAL_RCC_OscConfig+0x20e>
 8002706:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800270a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800270e:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002712:	fa93 f3a3 	rbit	r3, r3
 8002716:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800271a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800271e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002722:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002726:	fa93 f3a3 	rbit	r3, r3
 800272a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800272e:	4b3b      	ldr	r3, [pc, #236]	; (800281c <HAL_RCC_OscConfig+0x2f8>)
 8002730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002732:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002736:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800273a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800273e:	fa92 f2a2 	rbit	r2, r2
 8002742:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002746:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800274a:	fab2 f282 	clz	r2, r2
 800274e:	b2d2      	uxtb	r2, r2
 8002750:	f042 0220 	orr.w	r2, r2, #32
 8002754:	b2d2      	uxtb	r2, r2
 8002756:	f002 021f 	and.w	r2, r2, #31
 800275a:	2101      	movs	r1, #1
 800275c:	fa01 f202 	lsl.w	r2, r1, r2
 8002760:	4013      	ands	r3, r2
 8002762:	2b00      	cmp	r3, #0
 8002764:	d0ab      	beq.n	80026be <HAL_RCC_OscConfig+0x19a>
 8002766:	e05c      	b.n	8002822 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002768:	f7ff f856 	bl	8001818 <HAL_GetTick>
 800276c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002770:	e00a      	b.n	8002788 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002772:	f7ff f851 	bl	8001818 <HAL_GetTick>
 8002776:	4602      	mov	r2, r0
 8002778:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	2b64      	cmp	r3, #100	; 0x64
 8002780:	d902      	bls.n	8002788 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	f000 bdcf 	b.w	8003326 <HAL_RCC_OscConfig+0xe02>
 8002788:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800278c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002790:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002794:	fa93 f3a3 	rbit	r3, r3
 8002798:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800279c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027a0:	fab3 f383 	clz	r3, r3
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	095b      	lsrs	r3, r3, #5
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	f043 0301 	orr.w	r3, r3, #1
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d102      	bne.n	80027ba <HAL_RCC_OscConfig+0x296>
 80027b4:	4b19      	ldr	r3, [pc, #100]	; (800281c <HAL_RCC_OscConfig+0x2f8>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	e015      	b.n	80027e6 <HAL_RCC_OscConfig+0x2c2>
 80027ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027be:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80027c6:	fa93 f3a3 	rbit	r3, r3
 80027ca:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80027ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027d2:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80027d6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80027da:	fa93 f3a3 	rbit	r3, r3
 80027de:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80027e2:	4b0e      	ldr	r3, [pc, #56]	; (800281c <HAL_RCC_OscConfig+0x2f8>)
 80027e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80027ea:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80027ee:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80027f2:	fa92 f2a2 	rbit	r2, r2
 80027f6:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80027fa:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80027fe:	fab2 f282 	clz	r2, r2
 8002802:	b2d2      	uxtb	r2, r2
 8002804:	f042 0220 	orr.w	r2, r2, #32
 8002808:	b2d2      	uxtb	r2, r2
 800280a:	f002 021f 	and.w	r2, r2, #31
 800280e:	2101      	movs	r1, #1
 8002810:	fa01 f202 	lsl.w	r2, r1, r2
 8002814:	4013      	ands	r3, r2
 8002816:	2b00      	cmp	r3, #0
 8002818:	d1ab      	bne.n	8002772 <HAL_RCC_OscConfig+0x24e>
 800281a:	e002      	b.n	8002822 <HAL_RCC_OscConfig+0x2fe>
 800281c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002820:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002822:	1d3b      	adds	r3, r7, #4
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0302 	and.w	r3, r3, #2
 800282c:	2b00      	cmp	r3, #0
 800282e:	f000 816f 	beq.w	8002b10 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002832:	4bd0      	ldr	r3, [pc, #832]	; (8002b74 <HAL_RCC_OscConfig+0x650>)
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	f003 030c 	and.w	r3, r3, #12
 800283a:	2b00      	cmp	r3, #0
 800283c:	d00b      	beq.n	8002856 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800283e:	4bcd      	ldr	r3, [pc, #820]	; (8002b74 <HAL_RCC_OscConfig+0x650>)
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	f003 030c 	and.w	r3, r3, #12
 8002846:	2b08      	cmp	r3, #8
 8002848:	d16c      	bne.n	8002924 <HAL_RCC_OscConfig+0x400>
 800284a:	4bca      	ldr	r3, [pc, #808]	; (8002b74 <HAL_RCC_OscConfig+0x650>)
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002852:	2b00      	cmp	r3, #0
 8002854:	d166      	bne.n	8002924 <HAL_RCC_OscConfig+0x400>
 8002856:	2302      	movs	r3, #2
 8002858:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800285c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002860:	fa93 f3a3 	rbit	r3, r3
 8002864:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002868:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800286c:	fab3 f383 	clz	r3, r3
 8002870:	b2db      	uxtb	r3, r3
 8002872:	095b      	lsrs	r3, r3, #5
 8002874:	b2db      	uxtb	r3, r3
 8002876:	f043 0301 	orr.w	r3, r3, #1
 800287a:	b2db      	uxtb	r3, r3
 800287c:	2b01      	cmp	r3, #1
 800287e:	d102      	bne.n	8002886 <HAL_RCC_OscConfig+0x362>
 8002880:	4bbc      	ldr	r3, [pc, #752]	; (8002b74 <HAL_RCC_OscConfig+0x650>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	e013      	b.n	80028ae <HAL_RCC_OscConfig+0x38a>
 8002886:	2302      	movs	r3, #2
 8002888:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800288c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002890:	fa93 f3a3 	rbit	r3, r3
 8002894:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002898:	2302      	movs	r3, #2
 800289a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800289e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80028a2:	fa93 f3a3 	rbit	r3, r3
 80028a6:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80028aa:	4bb2      	ldr	r3, [pc, #712]	; (8002b74 <HAL_RCC_OscConfig+0x650>)
 80028ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ae:	2202      	movs	r2, #2
 80028b0:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80028b4:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80028b8:	fa92 f2a2 	rbit	r2, r2
 80028bc:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80028c0:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80028c4:	fab2 f282 	clz	r2, r2
 80028c8:	b2d2      	uxtb	r2, r2
 80028ca:	f042 0220 	orr.w	r2, r2, #32
 80028ce:	b2d2      	uxtb	r2, r2
 80028d0:	f002 021f 	and.w	r2, r2, #31
 80028d4:	2101      	movs	r1, #1
 80028d6:	fa01 f202 	lsl.w	r2, r1, r2
 80028da:	4013      	ands	r3, r2
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d007      	beq.n	80028f0 <HAL_RCC_OscConfig+0x3cc>
 80028e0:	1d3b      	adds	r3, r7, #4
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	691b      	ldr	r3, [r3, #16]
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d002      	beq.n	80028f0 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	f000 bd1b 	b.w	8003326 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028f0:	4ba0      	ldr	r3, [pc, #640]	; (8002b74 <HAL_RCC_OscConfig+0x650>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028f8:	1d3b      	adds	r3, r7, #4
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	695b      	ldr	r3, [r3, #20]
 80028fe:	21f8      	movs	r1, #248	; 0xf8
 8002900:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002904:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002908:	fa91 f1a1 	rbit	r1, r1
 800290c:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002910:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002914:	fab1 f181 	clz	r1, r1
 8002918:	b2c9      	uxtb	r1, r1
 800291a:	408b      	lsls	r3, r1
 800291c:	4995      	ldr	r1, [pc, #596]	; (8002b74 <HAL_RCC_OscConfig+0x650>)
 800291e:	4313      	orrs	r3, r2
 8002920:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002922:	e0f5      	b.n	8002b10 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002924:	1d3b      	adds	r3, r7, #4
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	691b      	ldr	r3, [r3, #16]
 800292a:	2b00      	cmp	r3, #0
 800292c:	f000 8085 	beq.w	8002a3a <HAL_RCC_OscConfig+0x516>
 8002930:	2301      	movs	r3, #1
 8002932:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002936:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800293a:	fa93 f3a3 	rbit	r3, r3
 800293e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002942:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002946:	fab3 f383 	clz	r3, r3
 800294a:	b2db      	uxtb	r3, r3
 800294c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002950:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	461a      	mov	r2, r3
 8002958:	2301      	movs	r3, #1
 800295a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800295c:	f7fe ff5c 	bl	8001818 <HAL_GetTick>
 8002960:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002964:	e00a      	b.n	800297c <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002966:	f7fe ff57 	bl	8001818 <HAL_GetTick>
 800296a:	4602      	mov	r2, r0
 800296c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	2b02      	cmp	r3, #2
 8002974:	d902      	bls.n	800297c <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	f000 bcd5 	b.w	8003326 <HAL_RCC_OscConfig+0xe02>
 800297c:	2302      	movs	r3, #2
 800297e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002982:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002986:	fa93 f3a3 	rbit	r3, r3
 800298a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800298e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002992:	fab3 f383 	clz	r3, r3
 8002996:	b2db      	uxtb	r3, r3
 8002998:	095b      	lsrs	r3, r3, #5
 800299a:	b2db      	uxtb	r3, r3
 800299c:	f043 0301 	orr.w	r3, r3, #1
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d102      	bne.n	80029ac <HAL_RCC_OscConfig+0x488>
 80029a6:	4b73      	ldr	r3, [pc, #460]	; (8002b74 <HAL_RCC_OscConfig+0x650>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	e013      	b.n	80029d4 <HAL_RCC_OscConfig+0x4b0>
 80029ac:	2302      	movs	r3, #2
 80029ae:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80029b6:	fa93 f3a3 	rbit	r3, r3
 80029ba:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80029be:	2302      	movs	r3, #2
 80029c0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80029c4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80029c8:	fa93 f3a3 	rbit	r3, r3
 80029cc:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80029d0:	4b68      	ldr	r3, [pc, #416]	; (8002b74 <HAL_RCC_OscConfig+0x650>)
 80029d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d4:	2202      	movs	r2, #2
 80029d6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80029da:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80029de:	fa92 f2a2 	rbit	r2, r2
 80029e2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80029e6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80029ea:	fab2 f282 	clz	r2, r2
 80029ee:	b2d2      	uxtb	r2, r2
 80029f0:	f042 0220 	orr.w	r2, r2, #32
 80029f4:	b2d2      	uxtb	r2, r2
 80029f6:	f002 021f 	and.w	r2, r2, #31
 80029fa:	2101      	movs	r1, #1
 80029fc:	fa01 f202 	lsl.w	r2, r1, r2
 8002a00:	4013      	ands	r3, r2
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d0af      	beq.n	8002966 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a06:	4b5b      	ldr	r3, [pc, #364]	; (8002b74 <HAL_RCC_OscConfig+0x650>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a0e:	1d3b      	adds	r3, r7, #4
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	695b      	ldr	r3, [r3, #20]
 8002a14:	21f8      	movs	r1, #248	; 0xf8
 8002a16:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a1a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002a1e:	fa91 f1a1 	rbit	r1, r1
 8002a22:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002a26:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002a2a:	fab1 f181 	clz	r1, r1
 8002a2e:	b2c9      	uxtb	r1, r1
 8002a30:	408b      	lsls	r3, r1
 8002a32:	4950      	ldr	r1, [pc, #320]	; (8002b74 <HAL_RCC_OscConfig+0x650>)
 8002a34:	4313      	orrs	r3, r2
 8002a36:	600b      	str	r3, [r1, #0]
 8002a38:	e06a      	b.n	8002b10 <HAL_RCC_OscConfig+0x5ec>
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a40:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002a44:	fa93 f3a3 	rbit	r3, r3
 8002a48:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002a4c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a50:	fab3 f383 	clz	r3, r3
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002a5a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	461a      	mov	r2, r3
 8002a62:	2300      	movs	r3, #0
 8002a64:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a66:	f7fe fed7 	bl	8001818 <HAL_GetTick>
 8002a6a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a6e:	e00a      	b.n	8002a86 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a70:	f7fe fed2 	bl	8001818 <HAL_GetTick>
 8002a74:	4602      	mov	r2, r0
 8002a76:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a7a:	1ad3      	subs	r3, r2, r3
 8002a7c:	2b02      	cmp	r3, #2
 8002a7e:	d902      	bls.n	8002a86 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8002a80:	2303      	movs	r3, #3
 8002a82:	f000 bc50 	b.w	8003326 <HAL_RCC_OscConfig+0xe02>
 8002a86:	2302      	movs	r3, #2
 8002a88:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a8c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002a90:	fa93 f3a3 	rbit	r3, r3
 8002a94:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002a98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a9c:	fab3 f383 	clz	r3, r3
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	095b      	lsrs	r3, r3, #5
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	f043 0301 	orr.w	r3, r3, #1
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d102      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x592>
 8002ab0:	4b30      	ldr	r3, [pc, #192]	; (8002b74 <HAL_RCC_OscConfig+0x650>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	e013      	b.n	8002ade <HAL_RCC_OscConfig+0x5ba>
 8002ab6:	2302      	movs	r3, #2
 8002ab8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002abc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002ac0:	fa93 f3a3 	rbit	r3, r3
 8002ac4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002ac8:	2302      	movs	r3, #2
 8002aca:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002ace:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002ad2:	fa93 f3a3 	rbit	r3, r3
 8002ad6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002ada:	4b26      	ldr	r3, [pc, #152]	; (8002b74 <HAL_RCC_OscConfig+0x650>)
 8002adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ade:	2202      	movs	r2, #2
 8002ae0:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002ae4:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002ae8:	fa92 f2a2 	rbit	r2, r2
 8002aec:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002af0:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002af4:	fab2 f282 	clz	r2, r2
 8002af8:	b2d2      	uxtb	r2, r2
 8002afa:	f042 0220 	orr.w	r2, r2, #32
 8002afe:	b2d2      	uxtb	r2, r2
 8002b00:	f002 021f 	and.w	r2, r2, #31
 8002b04:	2101      	movs	r1, #1
 8002b06:	fa01 f202 	lsl.w	r2, r1, r2
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d1af      	bne.n	8002a70 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b10:	1d3b      	adds	r3, r7, #4
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0308 	and.w	r3, r3, #8
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	f000 80da 	beq.w	8002cd4 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b20:	1d3b      	adds	r3, r7, #4
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	699b      	ldr	r3, [r3, #24]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d069      	beq.n	8002bfe <HAL_RCC_OscConfig+0x6da>
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b30:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002b34:	fa93 f3a3 	rbit	r3, r3
 8002b38:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002b3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b40:	fab3 f383 	clz	r3, r3
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	461a      	mov	r2, r3
 8002b48:	4b0b      	ldr	r3, [pc, #44]	; (8002b78 <HAL_RCC_OscConfig+0x654>)
 8002b4a:	4413      	add	r3, r2
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	461a      	mov	r2, r3
 8002b50:	2301      	movs	r3, #1
 8002b52:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b54:	f7fe fe60 	bl	8001818 <HAL_GetTick>
 8002b58:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b5c:	e00e      	b.n	8002b7c <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b5e:	f7fe fe5b 	bl	8001818 <HAL_GetTick>
 8002b62:	4602      	mov	r2, r0
 8002b64:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d906      	bls.n	8002b7c <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e3d9      	b.n	8003326 <HAL_RCC_OscConfig+0xe02>
 8002b72:	bf00      	nop
 8002b74:	40021000 	.word	0x40021000
 8002b78:	10908120 	.word	0x10908120
 8002b7c:	2302      	movs	r3, #2
 8002b7e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b82:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002b86:	fa93 f3a3 	rbit	r3, r3
 8002b8a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002b8e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002b92:	2202      	movs	r2, #2
 8002b94:	601a      	str	r2, [r3, #0]
 8002b96:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	fa93 f2a3 	rbit	r2, r3
 8002ba0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002ba4:	601a      	str	r2, [r3, #0]
 8002ba6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002baa:	2202      	movs	r2, #2
 8002bac:	601a      	str	r2, [r3, #0]
 8002bae:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	fa93 f2a3 	rbit	r2, r3
 8002bb8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002bbc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bbe:	4ba5      	ldr	r3, [pc, #660]	; (8002e54 <HAL_RCC_OscConfig+0x930>)
 8002bc0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bc2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002bc6:	2102      	movs	r1, #2
 8002bc8:	6019      	str	r1, [r3, #0]
 8002bca:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	fa93 f1a3 	rbit	r1, r3
 8002bd4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002bd8:	6019      	str	r1, [r3, #0]
  return result;
 8002bda:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	fab3 f383 	clz	r3, r3
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	f003 031f 	and.w	r3, r3, #31
 8002bf0:	2101      	movs	r1, #1
 8002bf2:	fa01 f303 	lsl.w	r3, r1, r3
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d0b0      	beq.n	8002b5e <HAL_RCC_OscConfig+0x63a>
 8002bfc:	e06a      	b.n	8002cd4 <HAL_RCC_OscConfig+0x7b0>
 8002bfe:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002c02:	2201      	movs	r2, #1
 8002c04:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c06:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	fa93 f2a3 	rbit	r2, r3
 8002c10:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002c14:	601a      	str	r2, [r3, #0]
  return result;
 8002c16:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002c1a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c1c:	fab3 f383 	clz	r3, r3
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	461a      	mov	r2, r3
 8002c24:	4b8c      	ldr	r3, [pc, #560]	; (8002e58 <HAL_RCC_OscConfig+0x934>)
 8002c26:	4413      	add	r3, r2
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c30:	f7fe fdf2 	bl	8001818 <HAL_GetTick>
 8002c34:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c38:	e009      	b.n	8002c4e <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c3a:	f7fe fded 	bl	8001818 <HAL_GetTick>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d901      	bls.n	8002c4e <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e36b      	b.n	8003326 <HAL_RCC_OscConfig+0xe02>
 8002c4e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002c52:	2202      	movs	r2, #2
 8002c54:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c56:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	fa93 f2a3 	rbit	r2, r3
 8002c60:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002c64:	601a      	str	r2, [r3, #0]
 8002c66:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002c6a:	2202      	movs	r2, #2
 8002c6c:	601a      	str	r2, [r3, #0]
 8002c6e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	fa93 f2a3 	rbit	r2, r3
 8002c78:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002c7c:	601a      	str	r2, [r3, #0]
 8002c7e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002c82:	2202      	movs	r2, #2
 8002c84:	601a      	str	r2, [r3, #0]
 8002c86:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	fa93 f2a3 	rbit	r2, r3
 8002c90:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002c94:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c96:	4b6f      	ldr	r3, [pc, #444]	; (8002e54 <HAL_RCC_OscConfig+0x930>)
 8002c98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c9a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002c9e:	2102      	movs	r1, #2
 8002ca0:	6019      	str	r1, [r3, #0]
 8002ca2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	fa93 f1a3 	rbit	r1, r3
 8002cac:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002cb0:	6019      	str	r1, [r3, #0]
  return result;
 8002cb2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	fab3 f383 	clz	r3, r3
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	f003 031f 	and.w	r3, r3, #31
 8002cc8:	2101      	movs	r1, #1
 8002cca:	fa01 f303 	lsl.w	r3, r1, r3
 8002cce:	4013      	ands	r3, r2
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d1b2      	bne.n	8002c3a <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cd4:	1d3b      	adds	r3, r7, #4
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0304 	and.w	r3, r3, #4
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	f000 8158 	beq.w	8002f94 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cea:	4b5a      	ldr	r3, [pc, #360]	; (8002e54 <HAL_RCC_OscConfig+0x930>)
 8002cec:	69db      	ldr	r3, [r3, #28]
 8002cee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d112      	bne.n	8002d1c <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cf6:	4b57      	ldr	r3, [pc, #348]	; (8002e54 <HAL_RCC_OscConfig+0x930>)
 8002cf8:	69db      	ldr	r3, [r3, #28]
 8002cfa:	4a56      	ldr	r2, [pc, #344]	; (8002e54 <HAL_RCC_OscConfig+0x930>)
 8002cfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d00:	61d3      	str	r3, [r2, #28]
 8002d02:	4b54      	ldr	r3, [pc, #336]	; (8002e54 <HAL_RCC_OscConfig+0x930>)
 8002d04:	69db      	ldr	r3, [r3, #28]
 8002d06:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002d0a:	f107 0308 	add.w	r3, r7, #8
 8002d0e:	601a      	str	r2, [r3, #0]
 8002d10:	f107 0308 	add.w	r3, r7, #8
 8002d14:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002d16:	2301      	movs	r3, #1
 8002d18:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d1c:	4b4f      	ldr	r3, [pc, #316]	; (8002e5c <HAL_RCC_OscConfig+0x938>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d11a      	bne.n	8002d5e <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d28:	4b4c      	ldr	r3, [pc, #304]	; (8002e5c <HAL_RCC_OscConfig+0x938>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a4b      	ldr	r2, [pc, #300]	; (8002e5c <HAL_RCC_OscConfig+0x938>)
 8002d2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d32:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d34:	f7fe fd70 	bl	8001818 <HAL_GetTick>
 8002d38:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d3c:	e009      	b.n	8002d52 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d3e:	f7fe fd6b 	bl	8001818 <HAL_GetTick>
 8002d42:	4602      	mov	r2, r0
 8002d44:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	2b64      	cmp	r3, #100	; 0x64
 8002d4c:	d901      	bls.n	8002d52 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e2e9      	b.n	8003326 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d52:	4b42      	ldr	r3, [pc, #264]	; (8002e5c <HAL_RCC_OscConfig+0x938>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d0ef      	beq.n	8002d3e <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d5e:	1d3b      	adds	r3, r7, #4
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d106      	bne.n	8002d76 <HAL_RCC_OscConfig+0x852>
 8002d68:	4b3a      	ldr	r3, [pc, #232]	; (8002e54 <HAL_RCC_OscConfig+0x930>)
 8002d6a:	6a1b      	ldr	r3, [r3, #32]
 8002d6c:	4a39      	ldr	r2, [pc, #228]	; (8002e54 <HAL_RCC_OscConfig+0x930>)
 8002d6e:	f043 0301 	orr.w	r3, r3, #1
 8002d72:	6213      	str	r3, [r2, #32]
 8002d74:	e02f      	b.n	8002dd6 <HAL_RCC_OscConfig+0x8b2>
 8002d76:	1d3b      	adds	r3, r7, #4
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d10c      	bne.n	8002d9a <HAL_RCC_OscConfig+0x876>
 8002d80:	4b34      	ldr	r3, [pc, #208]	; (8002e54 <HAL_RCC_OscConfig+0x930>)
 8002d82:	6a1b      	ldr	r3, [r3, #32]
 8002d84:	4a33      	ldr	r2, [pc, #204]	; (8002e54 <HAL_RCC_OscConfig+0x930>)
 8002d86:	f023 0301 	bic.w	r3, r3, #1
 8002d8a:	6213      	str	r3, [r2, #32]
 8002d8c:	4b31      	ldr	r3, [pc, #196]	; (8002e54 <HAL_RCC_OscConfig+0x930>)
 8002d8e:	6a1b      	ldr	r3, [r3, #32]
 8002d90:	4a30      	ldr	r2, [pc, #192]	; (8002e54 <HAL_RCC_OscConfig+0x930>)
 8002d92:	f023 0304 	bic.w	r3, r3, #4
 8002d96:	6213      	str	r3, [r2, #32]
 8002d98:	e01d      	b.n	8002dd6 <HAL_RCC_OscConfig+0x8b2>
 8002d9a:	1d3b      	adds	r3, r7, #4
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	2b05      	cmp	r3, #5
 8002da2:	d10c      	bne.n	8002dbe <HAL_RCC_OscConfig+0x89a>
 8002da4:	4b2b      	ldr	r3, [pc, #172]	; (8002e54 <HAL_RCC_OscConfig+0x930>)
 8002da6:	6a1b      	ldr	r3, [r3, #32]
 8002da8:	4a2a      	ldr	r2, [pc, #168]	; (8002e54 <HAL_RCC_OscConfig+0x930>)
 8002daa:	f043 0304 	orr.w	r3, r3, #4
 8002dae:	6213      	str	r3, [r2, #32]
 8002db0:	4b28      	ldr	r3, [pc, #160]	; (8002e54 <HAL_RCC_OscConfig+0x930>)
 8002db2:	6a1b      	ldr	r3, [r3, #32]
 8002db4:	4a27      	ldr	r2, [pc, #156]	; (8002e54 <HAL_RCC_OscConfig+0x930>)
 8002db6:	f043 0301 	orr.w	r3, r3, #1
 8002dba:	6213      	str	r3, [r2, #32]
 8002dbc:	e00b      	b.n	8002dd6 <HAL_RCC_OscConfig+0x8b2>
 8002dbe:	4b25      	ldr	r3, [pc, #148]	; (8002e54 <HAL_RCC_OscConfig+0x930>)
 8002dc0:	6a1b      	ldr	r3, [r3, #32]
 8002dc2:	4a24      	ldr	r2, [pc, #144]	; (8002e54 <HAL_RCC_OscConfig+0x930>)
 8002dc4:	f023 0301 	bic.w	r3, r3, #1
 8002dc8:	6213      	str	r3, [r2, #32]
 8002dca:	4b22      	ldr	r3, [pc, #136]	; (8002e54 <HAL_RCC_OscConfig+0x930>)
 8002dcc:	6a1b      	ldr	r3, [r3, #32]
 8002dce:	4a21      	ldr	r2, [pc, #132]	; (8002e54 <HAL_RCC_OscConfig+0x930>)
 8002dd0:	f023 0304 	bic.w	r3, r3, #4
 8002dd4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002dd6:	1d3b      	adds	r3, r7, #4
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d06b      	beq.n	8002eb8 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002de0:	f7fe fd1a 	bl	8001818 <HAL_GetTick>
 8002de4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002de8:	e00b      	b.n	8002e02 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dea:	f7fe fd15 	bl	8001818 <HAL_GetTick>
 8002dee:	4602      	mov	r2, r0
 8002df0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d901      	bls.n	8002e02 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e291      	b.n	8003326 <HAL_RCC_OscConfig+0xe02>
 8002e02:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002e06:	2202      	movs	r2, #2
 8002e08:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e0a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	fa93 f2a3 	rbit	r2, r3
 8002e14:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002e18:	601a      	str	r2, [r3, #0]
 8002e1a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002e1e:	2202      	movs	r2, #2
 8002e20:	601a      	str	r2, [r3, #0]
 8002e22:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	fa93 f2a3 	rbit	r2, r3
 8002e2c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002e30:	601a      	str	r2, [r3, #0]
  return result;
 8002e32:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002e36:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e38:	fab3 f383 	clz	r3, r3
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	095b      	lsrs	r3, r3, #5
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	f043 0302 	orr.w	r3, r3, #2
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	d109      	bne.n	8002e60 <HAL_RCC_OscConfig+0x93c>
 8002e4c:	4b01      	ldr	r3, [pc, #4]	; (8002e54 <HAL_RCC_OscConfig+0x930>)
 8002e4e:	6a1b      	ldr	r3, [r3, #32]
 8002e50:	e014      	b.n	8002e7c <HAL_RCC_OscConfig+0x958>
 8002e52:	bf00      	nop
 8002e54:	40021000 	.word	0x40021000
 8002e58:	10908120 	.word	0x10908120
 8002e5c:	40007000 	.word	0x40007000
 8002e60:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002e64:	2202      	movs	r2, #2
 8002e66:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e68:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	fa93 f2a3 	rbit	r2, r3
 8002e72:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002e76:	601a      	str	r2, [r3, #0]
 8002e78:	4bbb      	ldr	r3, [pc, #748]	; (8003168 <HAL_RCC_OscConfig+0xc44>)
 8002e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002e80:	2102      	movs	r1, #2
 8002e82:	6011      	str	r1, [r2, #0]
 8002e84:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002e88:	6812      	ldr	r2, [r2, #0]
 8002e8a:	fa92 f1a2 	rbit	r1, r2
 8002e8e:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002e92:	6011      	str	r1, [r2, #0]
  return result;
 8002e94:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002e98:	6812      	ldr	r2, [r2, #0]
 8002e9a:	fab2 f282 	clz	r2, r2
 8002e9e:	b2d2      	uxtb	r2, r2
 8002ea0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ea4:	b2d2      	uxtb	r2, r2
 8002ea6:	f002 021f 	and.w	r2, r2, #31
 8002eaa:	2101      	movs	r1, #1
 8002eac:	fa01 f202 	lsl.w	r2, r1, r2
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d099      	beq.n	8002dea <HAL_RCC_OscConfig+0x8c6>
 8002eb6:	e063      	b.n	8002f80 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eb8:	f7fe fcae 	bl	8001818 <HAL_GetTick>
 8002ebc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ec0:	e00b      	b.n	8002eda <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ec2:	f7fe fca9 	bl	8001818 <HAL_GetTick>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d901      	bls.n	8002eda <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	e225      	b.n	8003326 <HAL_RCC_OscConfig+0xe02>
 8002eda:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002ede:	2202      	movs	r2, #2
 8002ee0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	fa93 f2a3 	rbit	r2, r3
 8002eec:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002ef0:	601a      	str	r2, [r3, #0]
 8002ef2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002ef6:	2202      	movs	r2, #2
 8002ef8:	601a      	str	r2, [r3, #0]
 8002efa:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	fa93 f2a3 	rbit	r2, r3
 8002f04:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002f08:	601a      	str	r2, [r3, #0]
  return result;
 8002f0a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002f0e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f10:	fab3 f383 	clz	r3, r3
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	095b      	lsrs	r3, r3, #5
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	f043 0302 	orr.w	r3, r3, #2
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	2b02      	cmp	r3, #2
 8002f22:	d102      	bne.n	8002f2a <HAL_RCC_OscConfig+0xa06>
 8002f24:	4b90      	ldr	r3, [pc, #576]	; (8003168 <HAL_RCC_OscConfig+0xc44>)
 8002f26:	6a1b      	ldr	r3, [r3, #32]
 8002f28:	e00d      	b.n	8002f46 <HAL_RCC_OscConfig+0xa22>
 8002f2a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002f2e:	2202      	movs	r2, #2
 8002f30:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f32:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	fa93 f2a3 	rbit	r2, r3
 8002f3c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002f40:	601a      	str	r2, [r3, #0]
 8002f42:	4b89      	ldr	r3, [pc, #548]	; (8003168 <HAL_RCC_OscConfig+0xc44>)
 8002f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f46:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002f4a:	2102      	movs	r1, #2
 8002f4c:	6011      	str	r1, [r2, #0]
 8002f4e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002f52:	6812      	ldr	r2, [r2, #0]
 8002f54:	fa92 f1a2 	rbit	r1, r2
 8002f58:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002f5c:	6011      	str	r1, [r2, #0]
  return result;
 8002f5e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002f62:	6812      	ldr	r2, [r2, #0]
 8002f64:	fab2 f282 	clz	r2, r2
 8002f68:	b2d2      	uxtb	r2, r2
 8002f6a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f6e:	b2d2      	uxtb	r2, r2
 8002f70:	f002 021f 	and.w	r2, r2, #31
 8002f74:	2101      	movs	r1, #1
 8002f76:	fa01 f202 	lsl.w	r2, r1, r2
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d1a0      	bne.n	8002ec2 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002f80:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d105      	bne.n	8002f94 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f88:	4b77      	ldr	r3, [pc, #476]	; (8003168 <HAL_RCC_OscConfig+0xc44>)
 8002f8a:	69db      	ldr	r3, [r3, #28]
 8002f8c:	4a76      	ldr	r2, [pc, #472]	; (8003168 <HAL_RCC_OscConfig+0xc44>)
 8002f8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f92:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f94:	1d3b      	adds	r3, r7, #4
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	69db      	ldr	r3, [r3, #28]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	f000 81c2 	beq.w	8003324 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fa0:	4b71      	ldr	r3, [pc, #452]	; (8003168 <HAL_RCC_OscConfig+0xc44>)
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	f003 030c 	and.w	r3, r3, #12
 8002fa8:	2b08      	cmp	r3, #8
 8002faa:	f000 819c 	beq.w	80032e6 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fae:	1d3b      	adds	r3, r7, #4
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	69db      	ldr	r3, [r3, #28]
 8002fb4:	2b02      	cmp	r3, #2
 8002fb6:	f040 8114 	bne.w	80031e2 <HAL_RCC_OscConfig+0xcbe>
 8002fba:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002fbe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002fc2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fc4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	fa93 f2a3 	rbit	r2, r3
 8002fce:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002fd2:	601a      	str	r2, [r3, #0]
  return result;
 8002fd4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002fd8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fda:	fab3 f383 	clz	r3, r3
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002fe4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	461a      	mov	r2, r3
 8002fec:	2300      	movs	r3, #0
 8002fee:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ff0:	f7fe fc12 	bl	8001818 <HAL_GetTick>
 8002ff4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ff8:	e009      	b.n	800300e <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ffa:	f7fe fc0d 	bl	8001818 <HAL_GetTick>
 8002ffe:	4602      	mov	r2, r0
 8003000:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	2b02      	cmp	r3, #2
 8003008:	d901      	bls.n	800300e <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 800300a:	2303      	movs	r3, #3
 800300c:	e18b      	b.n	8003326 <HAL_RCC_OscConfig+0xe02>
 800300e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003012:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003016:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003018:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	fa93 f2a3 	rbit	r2, r3
 8003022:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003026:	601a      	str	r2, [r3, #0]
  return result;
 8003028:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800302c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800302e:	fab3 f383 	clz	r3, r3
 8003032:	b2db      	uxtb	r3, r3
 8003034:	095b      	lsrs	r3, r3, #5
 8003036:	b2db      	uxtb	r3, r3
 8003038:	f043 0301 	orr.w	r3, r3, #1
 800303c:	b2db      	uxtb	r3, r3
 800303e:	2b01      	cmp	r3, #1
 8003040:	d102      	bne.n	8003048 <HAL_RCC_OscConfig+0xb24>
 8003042:	4b49      	ldr	r3, [pc, #292]	; (8003168 <HAL_RCC_OscConfig+0xc44>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	e01b      	b.n	8003080 <HAL_RCC_OscConfig+0xb5c>
 8003048:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800304c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003050:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003052:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	fa93 f2a3 	rbit	r2, r3
 800305c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003060:	601a      	str	r2, [r3, #0]
 8003062:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003066:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800306a:	601a      	str	r2, [r3, #0]
 800306c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	fa93 f2a3 	rbit	r2, r3
 8003076:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800307a:	601a      	str	r2, [r3, #0]
 800307c:	4b3a      	ldr	r3, [pc, #232]	; (8003168 <HAL_RCC_OscConfig+0xc44>)
 800307e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003080:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003084:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003088:	6011      	str	r1, [r2, #0]
 800308a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800308e:	6812      	ldr	r2, [r2, #0]
 8003090:	fa92 f1a2 	rbit	r1, r2
 8003094:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003098:	6011      	str	r1, [r2, #0]
  return result;
 800309a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800309e:	6812      	ldr	r2, [r2, #0]
 80030a0:	fab2 f282 	clz	r2, r2
 80030a4:	b2d2      	uxtb	r2, r2
 80030a6:	f042 0220 	orr.w	r2, r2, #32
 80030aa:	b2d2      	uxtb	r2, r2
 80030ac:	f002 021f 	and.w	r2, r2, #31
 80030b0:	2101      	movs	r1, #1
 80030b2:	fa01 f202 	lsl.w	r2, r1, r2
 80030b6:	4013      	ands	r3, r2
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d19e      	bne.n	8002ffa <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030bc:	4b2a      	ldr	r3, [pc, #168]	; (8003168 <HAL_RCC_OscConfig+0xc44>)
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80030c4:	1d3b      	adds	r3, r7, #4
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80030ca:	1d3b      	adds	r3, r7, #4
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	6a1b      	ldr	r3, [r3, #32]
 80030d0:	430b      	orrs	r3, r1
 80030d2:	4925      	ldr	r1, [pc, #148]	; (8003168 <HAL_RCC_OscConfig+0xc44>)
 80030d4:	4313      	orrs	r3, r2
 80030d6:	604b      	str	r3, [r1, #4]
 80030d8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80030dc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80030e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030e2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	fa93 f2a3 	rbit	r2, r3
 80030ec:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80030f0:	601a      	str	r2, [r3, #0]
  return result;
 80030f2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80030f6:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030f8:	fab3 f383 	clz	r3, r3
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003102:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	461a      	mov	r2, r3
 800310a:	2301      	movs	r3, #1
 800310c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800310e:	f7fe fb83 	bl	8001818 <HAL_GetTick>
 8003112:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003116:	e009      	b.n	800312c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003118:	f7fe fb7e 	bl	8001818 <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003122:	1ad3      	subs	r3, r2, r3
 8003124:	2b02      	cmp	r3, #2
 8003126:	d901      	bls.n	800312c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8003128:	2303      	movs	r3, #3
 800312a:	e0fc      	b.n	8003326 <HAL_RCC_OscConfig+0xe02>
 800312c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003130:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003134:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003136:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	fa93 f2a3 	rbit	r2, r3
 8003140:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003144:	601a      	str	r2, [r3, #0]
  return result;
 8003146:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800314a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800314c:	fab3 f383 	clz	r3, r3
 8003150:	b2db      	uxtb	r3, r3
 8003152:	095b      	lsrs	r3, r3, #5
 8003154:	b2db      	uxtb	r3, r3
 8003156:	f043 0301 	orr.w	r3, r3, #1
 800315a:	b2db      	uxtb	r3, r3
 800315c:	2b01      	cmp	r3, #1
 800315e:	d105      	bne.n	800316c <HAL_RCC_OscConfig+0xc48>
 8003160:	4b01      	ldr	r3, [pc, #4]	; (8003168 <HAL_RCC_OscConfig+0xc44>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	e01e      	b.n	80031a4 <HAL_RCC_OscConfig+0xc80>
 8003166:	bf00      	nop
 8003168:	40021000 	.word	0x40021000
 800316c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003170:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003174:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003176:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	fa93 f2a3 	rbit	r2, r3
 8003180:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003184:	601a      	str	r2, [r3, #0]
 8003186:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800318a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800318e:	601a      	str	r2, [r3, #0]
 8003190:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	fa93 f2a3 	rbit	r2, r3
 800319a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800319e:	601a      	str	r2, [r3, #0]
 80031a0:	4b63      	ldr	r3, [pc, #396]	; (8003330 <HAL_RCC_OscConfig+0xe0c>)
 80031a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80031a8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80031ac:	6011      	str	r1, [r2, #0]
 80031ae:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80031b2:	6812      	ldr	r2, [r2, #0]
 80031b4:	fa92 f1a2 	rbit	r1, r2
 80031b8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80031bc:	6011      	str	r1, [r2, #0]
  return result;
 80031be:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80031c2:	6812      	ldr	r2, [r2, #0]
 80031c4:	fab2 f282 	clz	r2, r2
 80031c8:	b2d2      	uxtb	r2, r2
 80031ca:	f042 0220 	orr.w	r2, r2, #32
 80031ce:	b2d2      	uxtb	r2, r2
 80031d0:	f002 021f 	and.w	r2, r2, #31
 80031d4:	2101      	movs	r1, #1
 80031d6:	fa01 f202 	lsl.w	r2, r1, r2
 80031da:	4013      	ands	r3, r2
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d09b      	beq.n	8003118 <HAL_RCC_OscConfig+0xbf4>
 80031e0:	e0a0      	b.n	8003324 <HAL_RCC_OscConfig+0xe00>
 80031e2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80031e6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80031ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	fa93 f2a3 	rbit	r2, r3
 80031f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80031fa:	601a      	str	r2, [r3, #0]
  return result;
 80031fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003200:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003202:	fab3 f383 	clz	r3, r3
 8003206:	b2db      	uxtb	r3, r3
 8003208:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800320c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	461a      	mov	r2, r3
 8003214:	2300      	movs	r3, #0
 8003216:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003218:	f7fe fafe 	bl	8001818 <HAL_GetTick>
 800321c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003220:	e009      	b.n	8003236 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003222:	f7fe faf9 	bl	8001818 <HAL_GetTick>
 8003226:	4602      	mov	r2, r0
 8003228:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	2b02      	cmp	r3, #2
 8003230:	d901      	bls.n	8003236 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8003232:	2303      	movs	r3, #3
 8003234:	e077      	b.n	8003326 <HAL_RCC_OscConfig+0xe02>
 8003236:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800323a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800323e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003240:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	fa93 f2a3 	rbit	r2, r3
 800324a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800324e:	601a      	str	r2, [r3, #0]
  return result;
 8003250:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003254:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003256:	fab3 f383 	clz	r3, r3
 800325a:	b2db      	uxtb	r3, r3
 800325c:	095b      	lsrs	r3, r3, #5
 800325e:	b2db      	uxtb	r3, r3
 8003260:	f043 0301 	orr.w	r3, r3, #1
 8003264:	b2db      	uxtb	r3, r3
 8003266:	2b01      	cmp	r3, #1
 8003268:	d102      	bne.n	8003270 <HAL_RCC_OscConfig+0xd4c>
 800326a:	4b31      	ldr	r3, [pc, #196]	; (8003330 <HAL_RCC_OscConfig+0xe0c>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	e01b      	b.n	80032a8 <HAL_RCC_OscConfig+0xd84>
 8003270:	f107 0320 	add.w	r3, r7, #32
 8003274:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003278:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800327a:	f107 0320 	add.w	r3, r7, #32
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	fa93 f2a3 	rbit	r2, r3
 8003284:	f107 031c 	add.w	r3, r7, #28
 8003288:	601a      	str	r2, [r3, #0]
 800328a:	f107 0318 	add.w	r3, r7, #24
 800328e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003292:	601a      	str	r2, [r3, #0]
 8003294:	f107 0318 	add.w	r3, r7, #24
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	fa93 f2a3 	rbit	r2, r3
 800329e:	f107 0314 	add.w	r3, r7, #20
 80032a2:	601a      	str	r2, [r3, #0]
 80032a4:	4b22      	ldr	r3, [pc, #136]	; (8003330 <HAL_RCC_OscConfig+0xe0c>)
 80032a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a8:	f107 0210 	add.w	r2, r7, #16
 80032ac:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80032b0:	6011      	str	r1, [r2, #0]
 80032b2:	f107 0210 	add.w	r2, r7, #16
 80032b6:	6812      	ldr	r2, [r2, #0]
 80032b8:	fa92 f1a2 	rbit	r1, r2
 80032bc:	f107 020c 	add.w	r2, r7, #12
 80032c0:	6011      	str	r1, [r2, #0]
  return result;
 80032c2:	f107 020c 	add.w	r2, r7, #12
 80032c6:	6812      	ldr	r2, [r2, #0]
 80032c8:	fab2 f282 	clz	r2, r2
 80032cc:	b2d2      	uxtb	r2, r2
 80032ce:	f042 0220 	orr.w	r2, r2, #32
 80032d2:	b2d2      	uxtb	r2, r2
 80032d4:	f002 021f 	and.w	r2, r2, #31
 80032d8:	2101      	movs	r1, #1
 80032da:	fa01 f202 	lsl.w	r2, r1, r2
 80032de:	4013      	ands	r3, r2
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d19e      	bne.n	8003222 <HAL_RCC_OscConfig+0xcfe>
 80032e4:	e01e      	b.n	8003324 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032e6:	1d3b      	adds	r3, r7, #4
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	69db      	ldr	r3, [r3, #28]
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d101      	bne.n	80032f4 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	e018      	b.n	8003326 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80032f4:	4b0e      	ldr	r3, [pc, #56]	; (8003330 <HAL_RCC_OscConfig+0xe0c>)
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80032fc:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003300:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003304:	1d3b      	adds	r3, r7, #4
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	6a1b      	ldr	r3, [r3, #32]
 800330a:	429a      	cmp	r2, r3
 800330c:	d108      	bne.n	8003320 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800330e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003312:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003316:	1d3b      	adds	r3, r7, #4
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800331c:	429a      	cmp	r2, r3
 800331e:	d001      	beq.n	8003324 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e000      	b.n	8003326 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8003324:	2300      	movs	r3, #0
}
 8003326:	4618      	mov	r0, r3
 8003328:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}
 8003330:	40021000 	.word	0x40021000

08003334 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b09e      	sub	sp, #120	; 0x78
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800333e:	2300      	movs	r3, #0
 8003340:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d101      	bne.n	800334c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e162      	b.n	8003612 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800334c:	4b90      	ldr	r3, [pc, #576]	; (8003590 <HAL_RCC_ClockConfig+0x25c>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 0307 	and.w	r3, r3, #7
 8003354:	683a      	ldr	r2, [r7, #0]
 8003356:	429a      	cmp	r2, r3
 8003358:	d910      	bls.n	800337c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800335a:	4b8d      	ldr	r3, [pc, #564]	; (8003590 <HAL_RCC_ClockConfig+0x25c>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f023 0207 	bic.w	r2, r3, #7
 8003362:	498b      	ldr	r1, [pc, #556]	; (8003590 <HAL_RCC_ClockConfig+0x25c>)
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	4313      	orrs	r3, r2
 8003368:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800336a:	4b89      	ldr	r3, [pc, #548]	; (8003590 <HAL_RCC_ClockConfig+0x25c>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 0307 	and.w	r3, r3, #7
 8003372:	683a      	ldr	r2, [r7, #0]
 8003374:	429a      	cmp	r2, r3
 8003376:	d001      	beq.n	800337c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	e14a      	b.n	8003612 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 0302 	and.w	r3, r3, #2
 8003384:	2b00      	cmp	r3, #0
 8003386:	d008      	beq.n	800339a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003388:	4b82      	ldr	r3, [pc, #520]	; (8003594 <HAL_RCC_ClockConfig+0x260>)
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	497f      	ldr	r1, [pc, #508]	; (8003594 <HAL_RCC_ClockConfig+0x260>)
 8003396:	4313      	orrs	r3, r2
 8003398:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0301 	and.w	r3, r3, #1
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	f000 80dc 	beq.w	8003560 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d13c      	bne.n	800342a <HAL_RCC_ClockConfig+0xf6>
 80033b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033b4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80033b8:	fa93 f3a3 	rbit	r3, r3
 80033bc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80033be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033c0:	fab3 f383 	clz	r3, r3
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	095b      	lsrs	r3, r3, #5
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	f043 0301 	orr.w	r3, r3, #1
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d102      	bne.n	80033da <HAL_RCC_ClockConfig+0xa6>
 80033d4:	4b6f      	ldr	r3, [pc, #444]	; (8003594 <HAL_RCC_ClockConfig+0x260>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	e00f      	b.n	80033fa <HAL_RCC_ClockConfig+0xc6>
 80033da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033de:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80033e2:	fa93 f3a3 	rbit	r3, r3
 80033e6:	667b      	str	r3, [r7, #100]	; 0x64
 80033e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033ec:	663b      	str	r3, [r7, #96]	; 0x60
 80033ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80033f0:	fa93 f3a3 	rbit	r3, r3
 80033f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80033f6:	4b67      	ldr	r3, [pc, #412]	; (8003594 <HAL_RCC_ClockConfig+0x260>)
 80033f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80033fe:	65ba      	str	r2, [r7, #88]	; 0x58
 8003400:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003402:	fa92 f2a2 	rbit	r2, r2
 8003406:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003408:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800340a:	fab2 f282 	clz	r2, r2
 800340e:	b2d2      	uxtb	r2, r2
 8003410:	f042 0220 	orr.w	r2, r2, #32
 8003414:	b2d2      	uxtb	r2, r2
 8003416:	f002 021f 	and.w	r2, r2, #31
 800341a:	2101      	movs	r1, #1
 800341c:	fa01 f202 	lsl.w	r2, r1, r2
 8003420:	4013      	ands	r3, r2
 8003422:	2b00      	cmp	r3, #0
 8003424:	d17b      	bne.n	800351e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e0f3      	b.n	8003612 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	2b02      	cmp	r3, #2
 8003430:	d13c      	bne.n	80034ac <HAL_RCC_ClockConfig+0x178>
 8003432:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003436:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003438:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800343a:	fa93 f3a3 	rbit	r3, r3
 800343e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003440:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003442:	fab3 f383 	clz	r3, r3
 8003446:	b2db      	uxtb	r3, r3
 8003448:	095b      	lsrs	r3, r3, #5
 800344a:	b2db      	uxtb	r3, r3
 800344c:	f043 0301 	orr.w	r3, r3, #1
 8003450:	b2db      	uxtb	r3, r3
 8003452:	2b01      	cmp	r3, #1
 8003454:	d102      	bne.n	800345c <HAL_RCC_ClockConfig+0x128>
 8003456:	4b4f      	ldr	r3, [pc, #316]	; (8003594 <HAL_RCC_ClockConfig+0x260>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	e00f      	b.n	800347c <HAL_RCC_ClockConfig+0x148>
 800345c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003460:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003462:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003464:	fa93 f3a3 	rbit	r3, r3
 8003468:	647b      	str	r3, [r7, #68]	; 0x44
 800346a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800346e:	643b      	str	r3, [r7, #64]	; 0x40
 8003470:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003472:	fa93 f3a3 	rbit	r3, r3
 8003476:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003478:	4b46      	ldr	r3, [pc, #280]	; (8003594 <HAL_RCC_ClockConfig+0x260>)
 800347a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003480:	63ba      	str	r2, [r7, #56]	; 0x38
 8003482:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003484:	fa92 f2a2 	rbit	r2, r2
 8003488:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800348a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800348c:	fab2 f282 	clz	r2, r2
 8003490:	b2d2      	uxtb	r2, r2
 8003492:	f042 0220 	orr.w	r2, r2, #32
 8003496:	b2d2      	uxtb	r2, r2
 8003498:	f002 021f 	and.w	r2, r2, #31
 800349c:	2101      	movs	r1, #1
 800349e:	fa01 f202 	lsl.w	r2, r1, r2
 80034a2:	4013      	ands	r3, r2
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d13a      	bne.n	800351e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	e0b2      	b.n	8003612 <HAL_RCC_ClockConfig+0x2de>
 80034ac:	2302      	movs	r3, #2
 80034ae:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034b2:	fa93 f3a3 	rbit	r3, r3
 80034b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80034b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034ba:	fab3 f383 	clz	r3, r3
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	095b      	lsrs	r3, r3, #5
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	f043 0301 	orr.w	r3, r3, #1
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d102      	bne.n	80034d4 <HAL_RCC_ClockConfig+0x1a0>
 80034ce:	4b31      	ldr	r3, [pc, #196]	; (8003594 <HAL_RCC_ClockConfig+0x260>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	e00d      	b.n	80034f0 <HAL_RCC_ClockConfig+0x1bc>
 80034d4:	2302      	movs	r3, #2
 80034d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034da:	fa93 f3a3 	rbit	r3, r3
 80034de:	627b      	str	r3, [r7, #36]	; 0x24
 80034e0:	2302      	movs	r3, #2
 80034e2:	623b      	str	r3, [r7, #32]
 80034e4:	6a3b      	ldr	r3, [r7, #32]
 80034e6:	fa93 f3a3 	rbit	r3, r3
 80034ea:	61fb      	str	r3, [r7, #28]
 80034ec:	4b29      	ldr	r3, [pc, #164]	; (8003594 <HAL_RCC_ClockConfig+0x260>)
 80034ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f0:	2202      	movs	r2, #2
 80034f2:	61ba      	str	r2, [r7, #24]
 80034f4:	69ba      	ldr	r2, [r7, #24]
 80034f6:	fa92 f2a2 	rbit	r2, r2
 80034fa:	617a      	str	r2, [r7, #20]
  return result;
 80034fc:	697a      	ldr	r2, [r7, #20]
 80034fe:	fab2 f282 	clz	r2, r2
 8003502:	b2d2      	uxtb	r2, r2
 8003504:	f042 0220 	orr.w	r2, r2, #32
 8003508:	b2d2      	uxtb	r2, r2
 800350a:	f002 021f 	and.w	r2, r2, #31
 800350e:	2101      	movs	r1, #1
 8003510:	fa01 f202 	lsl.w	r2, r1, r2
 8003514:	4013      	ands	r3, r2
 8003516:	2b00      	cmp	r3, #0
 8003518:	d101      	bne.n	800351e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e079      	b.n	8003612 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800351e:	4b1d      	ldr	r3, [pc, #116]	; (8003594 <HAL_RCC_ClockConfig+0x260>)
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	f023 0203 	bic.w	r2, r3, #3
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	491a      	ldr	r1, [pc, #104]	; (8003594 <HAL_RCC_ClockConfig+0x260>)
 800352c:	4313      	orrs	r3, r2
 800352e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003530:	f7fe f972 	bl	8001818 <HAL_GetTick>
 8003534:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003536:	e00a      	b.n	800354e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003538:	f7fe f96e 	bl	8001818 <HAL_GetTick>
 800353c:	4602      	mov	r2, r0
 800353e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	f241 3288 	movw	r2, #5000	; 0x1388
 8003546:	4293      	cmp	r3, r2
 8003548:	d901      	bls.n	800354e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800354a:	2303      	movs	r3, #3
 800354c:	e061      	b.n	8003612 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800354e:	4b11      	ldr	r3, [pc, #68]	; (8003594 <HAL_RCC_ClockConfig+0x260>)
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	f003 020c 	and.w	r2, r3, #12
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	429a      	cmp	r2, r3
 800355e:	d1eb      	bne.n	8003538 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003560:	4b0b      	ldr	r3, [pc, #44]	; (8003590 <HAL_RCC_ClockConfig+0x25c>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 0307 	and.w	r3, r3, #7
 8003568:	683a      	ldr	r2, [r7, #0]
 800356a:	429a      	cmp	r2, r3
 800356c:	d214      	bcs.n	8003598 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800356e:	4b08      	ldr	r3, [pc, #32]	; (8003590 <HAL_RCC_ClockConfig+0x25c>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f023 0207 	bic.w	r2, r3, #7
 8003576:	4906      	ldr	r1, [pc, #24]	; (8003590 <HAL_RCC_ClockConfig+0x25c>)
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	4313      	orrs	r3, r2
 800357c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800357e:	4b04      	ldr	r3, [pc, #16]	; (8003590 <HAL_RCC_ClockConfig+0x25c>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 0307 	and.w	r3, r3, #7
 8003586:	683a      	ldr	r2, [r7, #0]
 8003588:	429a      	cmp	r2, r3
 800358a:	d005      	beq.n	8003598 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e040      	b.n	8003612 <HAL_RCC_ClockConfig+0x2de>
 8003590:	40022000 	.word	0x40022000
 8003594:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 0304 	and.w	r3, r3, #4
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d008      	beq.n	80035b6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035a4:	4b1d      	ldr	r3, [pc, #116]	; (800361c <HAL_RCC_ClockConfig+0x2e8>)
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	491a      	ldr	r1, [pc, #104]	; (800361c <HAL_RCC_ClockConfig+0x2e8>)
 80035b2:	4313      	orrs	r3, r2
 80035b4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0308 	and.w	r3, r3, #8
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d009      	beq.n	80035d6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035c2:	4b16      	ldr	r3, [pc, #88]	; (800361c <HAL_RCC_ClockConfig+0x2e8>)
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	691b      	ldr	r3, [r3, #16]
 80035ce:	00db      	lsls	r3, r3, #3
 80035d0:	4912      	ldr	r1, [pc, #72]	; (800361c <HAL_RCC_ClockConfig+0x2e8>)
 80035d2:	4313      	orrs	r3, r2
 80035d4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80035d6:	f000 f829 	bl	800362c <HAL_RCC_GetSysClockFreq>
 80035da:	4601      	mov	r1, r0
 80035dc:	4b0f      	ldr	r3, [pc, #60]	; (800361c <HAL_RCC_ClockConfig+0x2e8>)
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035e4:	22f0      	movs	r2, #240	; 0xf0
 80035e6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035e8:	693a      	ldr	r2, [r7, #16]
 80035ea:	fa92 f2a2 	rbit	r2, r2
 80035ee:	60fa      	str	r2, [r7, #12]
  return result;
 80035f0:	68fa      	ldr	r2, [r7, #12]
 80035f2:	fab2 f282 	clz	r2, r2
 80035f6:	b2d2      	uxtb	r2, r2
 80035f8:	40d3      	lsrs	r3, r2
 80035fa:	4a09      	ldr	r2, [pc, #36]	; (8003620 <HAL_RCC_ClockConfig+0x2ec>)
 80035fc:	5cd3      	ldrb	r3, [r2, r3]
 80035fe:	fa21 f303 	lsr.w	r3, r1, r3
 8003602:	4a08      	ldr	r2, [pc, #32]	; (8003624 <HAL_RCC_ClockConfig+0x2f0>)
 8003604:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003606:	4b08      	ldr	r3, [pc, #32]	; (8003628 <HAL_RCC_ClockConfig+0x2f4>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4618      	mov	r0, r3
 800360c:	f7fe f818 	bl	8001640 <HAL_InitTick>
  
  return HAL_OK;
 8003610:	2300      	movs	r3, #0
}
 8003612:	4618      	mov	r0, r3
 8003614:	3778      	adds	r7, #120	; 0x78
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}
 800361a:	bf00      	nop
 800361c:	40021000 	.word	0x40021000
 8003620:	08006e5c 	.word	0x08006e5c
 8003624:	20000000 	.word	0x20000000
 8003628:	20000004 	.word	0x20000004

0800362c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800362c:	b480      	push	{r7}
 800362e:	b08b      	sub	sp, #44	; 0x2c
 8003630:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003632:	2300      	movs	r3, #0
 8003634:	61fb      	str	r3, [r7, #28]
 8003636:	2300      	movs	r3, #0
 8003638:	61bb      	str	r3, [r7, #24]
 800363a:	2300      	movs	r3, #0
 800363c:	627b      	str	r3, [r7, #36]	; 0x24
 800363e:	2300      	movs	r3, #0
 8003640:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003642:	2300      	movs	r3, #0
 8003644:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003646:	4b29      	ldr	r3, [pc, #164]	; (80036ec <HAL_RCC_GetSysClockFreq+0xc0>)
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800364c:	69fb      	ldr	r3, [r7, #28]
 800364e:	f003 030c 	and.w	r3, r3, #12
 8003652:	2b04      	cmp	r3, #4
 8003654:	d002      	beq.n	800365c <HAL_RCC_GetSysClockFreq+0x30>
 8003656:	2b08      	cmp	r3, #8
 8003658:	d003      	beq.n	8003662 <HAL_RCC_GetSysClockFreq+0x36>
 800365a:	e03c      	b.n	80036d6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800365c:	4b24      	ldr	r3, [pc, #144]	; (80036f0 <HAL_RCC_GetSysClockFreq+0xc4>)
 800365e:	623b      	str	r3, [r7, #32]
      break;
 8003660:	e03c      	b.n	80036dc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003668:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800366c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800366e:	68ba      	ldr	r2, [r7, #8]
 8003670:	fa92 f2a2 	rbit	r2, r2
 8003674:	607a      	str	r2, [r7, #4]
  return result;
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	fab2 f282 	clz	r2, r2
 800367c:	b2d2      	uxtb	r2, r2
 800367e:	40d3      	lsrs	r3, r2
 8003680:	4a1c      	ldr	r2, [pc, #112]	; (80036f4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003682:	5cd3      	ldrb	r3, [r2, r3]
 8003684:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003686:	4b19      	ldr	r3, [pc, #100]	; (80036ec <HAL_RCC_GetSysClockFreq+0xc0>)
 8003688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800368a:	f003 030f 	and.w	r3, r3, #15
 800368e:	220f      	movs	r2, #15
 8003690:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003692:	693a      	ldr	r2, [r7, #16]
 8003694:	fa92 f2a2 	rbit	r2, r2
 8003698:	60fa      	str	r2, [r7, #12]
  return result;
 800369a:	68fa      	ldr	r2, [r7, #12]
 800369c:	fab2 f282 	clz	r2, r2
 80036a0:	b2d2      	uxtb	r2, r2
 80036a2:	40d3      	lsrs	r3, r2
 80036a4:	4a14      	ldr	r2, [pc, #80]	; (80036f8 <HAL_RCC_GetSysClockFreq+0xcc>)
 80036a6:	5cd3      	ldrb	r3, [r2, r3]
 80036a8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d008      	beq.n	80036c6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80036b4:	4a0e      	ldr	r2, [pc, #56]	; (80036f0 <HAL_RCC_GetSysClockFreq+0xc4>)
 80036b6:	69bb      	ldr	r3, [r7, #24]
 80036b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	fb02 f303 	mul.w	r3, r2, r3
 80036c2:	627b      	str	r3, [r7, #36]	; 0x24
 80036c4:	e004      	b.n	80036d0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	4a0c      	ldr	r2, [pc, #48]	; (80036fc <HAL_RCC_GetSysClockFreq+0xd0>)
 80036ca:	fb02 f303 	mul.w	r3, r2, r3
 80036ce:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80036d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d2:	623b      	str	r3, [r7, #32]
      break;
 80036d4:	e002      	b.n	80036dc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80036d6:	4b06      	ldr	r3, [pc, #24]	; (80036f0 <HAL_RCC_GetSysClockFreq+0xc4>)
 80036d8:	623b      	str	r3, [r7, #32]
      break;
 80036da:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036dc:	6a3b      	ldr	r3, [r7, #32]
}
 80036de:	4618      	mov	r0, r3
 80036e0:	372c      	adds	r7, #44	; 0x2c
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr
 80036ea:	bf00      	nop
 80036ec:	40021000 	.word	0x40021000
 80036f0:	007a1200 	.word	0x007a1200
 80036f4:	08006e74 	.word	0x08006e74
 80036f8:	08006e84 	.word	0x08006e84
 80036fc:	003d0900 	.word	0x003d0900

08003700 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003700:	b480      	push	{r7}
 8003702:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003704:	4b03      	ldr	r3, [pc, #12]	; (8003714 <HAL_RCC_GetHCLKFreq+0x14>)
 8003706:	681b      	ldr	r3, [r3, #0]
}
 8003708:	4618      	mov	r0, r3
 800370a:	46bd      	mov	sp, r7
 800370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003710:	4770      	bx	lr
 8003712:	bf00      	nop
 8003714:	20000000 	.word	0x20000000

08003718 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b082      	sub	sp, #8
 800371c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800371e:	f7ff ffef 	bl	8003700 <HAL_RCC_GetHCLKFreq>
 8003722:	4601      	mov	r1, r0
 8003724:	4b0b      	ldr	r3, [pc, #44]	; (8003754 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800372c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003730:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003732:	687a      	ldr	r2, [r7, #4]
 8003734:	fa92 f2a2 	rbit	r2, r2
 8003738:	603a      	str	r2, [r7, #0]
  return result;
 800373a:	683a      	ldr	r2, [r7, #0]
 800373c:	fab2 f282 	clz	r2, r2
 8003740:	b2d2      	uxtb	r2, r2
 8003742:	40d3      	lsrs	r3, r2
 8003744:	4a04      	ldr	r2, [pc, #16]	; (8003758 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003746:	5cd3      	ldrb	r3, [r2, r3]
 8003748:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800374c:	4618      	mov	r0, r3
 800374e:	3708      	adds	r7, #8
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}
 8003754:	40021000 	.word	0x40021000
 8003758:	08006e6c 	.word	0x08006e6c

0800375c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b082      	sub	sp, #8
 8003760:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003762:	f7ff ffcd 	bl	8003700 <HAL_RCC_GetHCLKFreq>
 8003766:	4601      	mov	r1, r0
 8003768:	4b0b      	ldr	r3, [pc, #44]	; (8003798 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003770:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003774:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	fa92 f2a2 	rbit	r2, r2
 800377c:	603a      	str	r2, [r7, #0]
  return result;
 800377e:	683a      	ldr	r2, [r7, #0]
 8003780:	fab2 f282 	clz	r2, r2
 8003784:	b2d2      	uxtb	r2, r2
 8003786:	40d3      	lsrs	r3, r2
 8003788:	4a04      	ldr	r2, [pc, #16]	; (800379c <HAL_RCC_GetPCLK2Freq+0x40>)
 800378a:	5cd3      	ldrb	r3, [r2, r3]
 800378c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003790:	4618      	mov	r0, r3
 8003792:	3708      	adds	r7, #8
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}
 8003798:	40021000 	.word	0x40021000
 800379c:	08006e6c 	.word	0x08006e6c

080037a0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b083      	sub	sp, #12
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	220f      	movs	r2, #15
 80037ae:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80037b0:	4b12      	ldr	r3, [pc, #72]	; (80037fc <HAL_RCC_GetClockConfig+0x5c>)
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	f003 0203 	and.w	r2, r3, #3
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80037bc:	4b0f      	ldr	r3, [pc, #60]	; (80037fc <HAL_RCC_GetClockConfig+0x5c>)
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 80037c8:	4b0c      	ldr	r3, [pc, #48]	; (80037fc <HAL_RCC_GetClockConfig+0x5c>)
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80037d4:	4b09      	ldr	r3, [pc, #36]	; (80037fc <HAL_RCC_GetClockConfig+0x5c>)
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	08db      	lsrs	r3, r3, #3
 80037da:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 80037e2:	4b07      	ldr	r3, [pc, #28]	; (8003800 <HAL_RCC_GetClockConfig+0x60>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 0207 	and.w	r2, r3, #7
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	601a      	str	r2, [r3, #0]
}
 80037ee:	bf00      	nop
 80037f0:	370c      	adds	r7, #12
 80037f2:	46bd      	mov	sp, r7
 80037f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f8:	4770      	bx	lr
 80037fa:	bf00      	nop
 80037fc:	40021000 	.word	0x40021000
 8003800:	40022000 	.word	0x40022000

08003804 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b084      	sub	sp, #16
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d101      	bne.n	8003816 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e095      	b.n	8003942 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381a:	2b00      	cmp	r3, #0
 800381c:	d108      	bne.n	8003830 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003826:	d009      	beq.n	800383c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2200      	movs	r2, #0
 800382c:	61da      	str	r2, [r3, #28]
 800382e:	e005      	b.n	800383c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2200      	movs	r2, #0
 800383a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2200      	movs	r2, #0
 8003840:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003848:	b2db      	uxtb	r3, r3
 800384a:	2b00      	cmp	r3, #0
 800384c:	d106      	bne.n	800385c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2200      	movs	r2, #0
 8003852:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f7fd fe16 	bl	8001488 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2202      	movs	r2, #2
 8003860:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003872:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800387c:	d902      	bls.n	8003884 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800387e:	2300      	movs	r3, #0
 8003880:	60fb      	str	r3, [r7, #12]
 8003882:	e002      	b.n	800388a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003884:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003888:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	68db      	ldr	r3, [r3, #12]
 800388e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003892:	d007      	beq.n	80038a4 <HAL_SPI_Init+0xa0>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800389c:	d002      	beq.n	80038a4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2200      	movs	r2, #0
 80038a2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80038b4:	431a      	orrs	r2, r3
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	691b      	ldr	r3, [r3, #16]
 80038ba:	f003 0302 	and.w	r3, r3, #2
 80038be:	431a      	orrs	r2, r3
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	695b      	ldr	r3, [r3, #20]
 80038c4:	f003 0301 	and.w	r3, r3, #1
 80038c8:	431a      	orrs	r2, r3
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	699b      	ldr	r3, [r3, #24]
 80038ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038d2:	431a      	orrs	r2, r3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	69db      	ldr	r3, [r3, #28]
 80038d8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80038dc:	431a      	orrs	r2, r3
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6a1b      	ldr	r3, [r3, #32]
 80038e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038e6:	ea42 0103 	orr.w	r1, r2, r3
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ee:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	430a      	orrs	r2, r1
 80038f8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	699b      	ldr	r3, [r3, #24]
 80038fe:	0c1b      	lsrs	r3, r3, #16
 8003900:	f003 0204 	and.w	r2, r3, #4
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003908:	f003 0310 	and.w	r3, r3, #16
 800390c:	431a      	orrs	r2, r3
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003912:	f003 0308 	and.w	r3, r3, #8
 8003916:	431a      	orrs	r2, r3
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003920:	ea42 0103 	orr.w	r1, r2, r3
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	430a      	orrs	r2, r1
 8003930:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2201      	movs	r2, #1
 800393c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003940:	2300      	movs	r3, #0
}
 8003942:	4618      	mov	r0, r3
 8003944:	3710      	adds	r7, #16
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}

0800394a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800394a:	b580      	push	{r7, lr}
 800394c:	b088      	sub	sp, #32
 800394e:	af00      	add	r7, sp, #0
 8003950:	60f8      	str	r0, [r7, #12]
 8003952:	60b9      	str	r1, [r7, #8]
 8003954:	603b      	str	r3, [r7, #0]
 8003956:	4613      	mov	r3, r2
 8003958:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800395a:	2300      	movs	r3, #0
 800395c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003964:	2b01      	cmp	r3, #1
 8003966:	d101      	bne.n	800396c <HAL_SPI_Transmit+0x22>
 8003968:	2302      	movs	r3, #2
 800396a:	e158      	b.n	8003c1e <HAL_SPI_Transmit+0x2d4>
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2201      	movs	r2, #1
 8003970:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003974:	f7fd ff50 	bl	8001818 <HAL_GetTick>
 8003978:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800397a:	88fb      	ldrh	r3, [r7, #6]
 800397c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003984:	b2db      	uxtb	r3, r3
 8003986:	2b01      	cmp	r3, #1
 8003988:	d002      	beq.n	8003990 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800398a:	2302      	movs	r3, #2
 800398c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800398e:	e13d      	b.n	8003c0c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d002      	beq.n	800399c <HAL_SPI_Transmit+0x52>
 8003996:	88fb      	ldrh	r3, [r7, #6]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d102      	bne.n	80039a2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	77fb      	strb	r3, [r7, #31]
    goto error;
 80039a0:	e134      	b.n	8003c0c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2203      	movs	r2, #3
 80039a6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2200      	movs	r2, #0
 80039ae:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	68ba      	ldr	r2, [r7, #8]
 80039b4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	88fa      	ldrh	r2, [r7, #6]
 80039ba:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	88fa      	ldrh	r2, [r7, #6]
 80039c0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2200      	movs	r2, #0
 80039c6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2200      	movs	r2, #0
 80039cc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2200      	movs	r2, #0
 80039d4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2200      	movs	r2, #0
 80039dc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2200      	movs	r2, #0
 80039e2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039ec:	d10f      	bne.n	8003a0e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039fc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a0c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a18:	2b40      	cmp	r3, #64	; 0x40
 8003a1a:	d007      	beq.n	8003a2c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a2a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003a34:	d94b      	bls.n	8003ace <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d002      	beq.n	8003a44 <HAL_SPI_Transmit+0xfa>
 8003a3e:	8afb      	ldrh	r3, [r7, #22]
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d13e      	bne.n	8003ac2 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a48:	881a      	ldrh	r2, [r3, #0]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a54:	1c9a      	adds	r2, r3, #2
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a5e:	b29b      	uxth	r3, r3
 8003a60:	3b01      	subs	r3, #1
 8003a62:	b29a      	uxth	r2, r3
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003a68:	e02b      	b.n	8003ac2 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	f003 0302 	and.w	r3, r3, #2
 8003a74:	2b02      	cmp	r3, #2
 8003a76:	d112      	bne.n	8003a9e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a7c:	881a      	ldrh	r2, [r3, #0]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a88:	1c9a      	adds	r2, r3, #2
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a92:	b29b      	uxth	r3, r3
 8003a94:	3b01      	subs	r3, #1
 8003a96:	b29a      	uxth	r2, r3
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003a9c:	e011      	b.n	8003ac2 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a9e:	f7fd febb 	bl	8001818 <HAL_GetTick>
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	69bb      	ldr	r3, [r7, #24]
 8003aa6:	1ad3      	subs	r3, r2, r3
 8003aa8:	683a      	ldr	r2, [r7, #0]
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	d803      	bhi.n	8003ab6 <HAL_SPI_Transmit+0x16c>
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ab4:	d102      	bne.n	8003abc <HAL_SPI_Transmit+0x172>
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d102      	bne.n	8003ac2 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8003abc:	2303      	movs	r3, #3
 8003abe:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003ac0:	e0a4      	b.n	8003c0c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ac6:	b29b      	uxth	r3, r3
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d1ce      	bne.n	8003a6a <HAL_SPI_Transmit+0x120>
 8003acc:	e07c      	b.n	8003bc8 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d002      	beq.n	8003adc <HAL_SPI_Transmit+0x192>
 8003ad6:	8afb      	ldrh	r3, [r7, #22]
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d170      	bne.n	8003bbe <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ae0:	b29b      	uxth	r3, r3
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d912      	bls.n	8003b0c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aea:	881a      	ldrh	r2, [r3, #0]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003af6:	1c9a      	adds	r2, r3, #2
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b00:	b29b      	uxth	r3, r3
 8003b02:	3b02      	subs	r3, #2
 8003b04:	b29a      	uxth	r2, r3
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003b0a:	e058      	b.n	8003bbe <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	330c      	adds	r3, #12
 8003b16:	7812      	ldrb	r2, [r2, #0]
 8003b18:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b1e:	1c5a      	adds	r2, r3, #1
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b28:	b29b      	uxth	r3, r3
 8003b2a:	3b01      	subs	r3, #1
 8003b2c:	b29a      	uxth	r2, r3
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003b32:	e044      	b.n	8003bbe <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	f003 0302 	and.w	r3, r3, #2
 8003b3e:	2b02      	cmp	r3, #2
 8003b40:	d12b      	bne.n	8003b9a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d912      	bls.n	8003b72 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b50:	881a      	ldrh	r2, [r3, #0]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b5c:	1c9a      	adds	r2, r3, #2
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	3b02      	subs	r3, #2
 8003b6a:	b29a      	uxth	r2, r3
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003b70:	e025      	b.n	8003bbe <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	330c      	adds	r3, #12
 8003b7c:	7812      	ldrb	r2, [r2, #0]
 8003b7e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b84:	1c5a      	adds	r2, r3, #1
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	3b01      	subs	r3, #1
 8003b92:	b29a      	uxth	r2, r3
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003b98:	e011      	b.n	8003bbe <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b9a:	f7fd fe3d 	bl	8001818 <HAL_GetTick>
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	69bb      	ldr	r3, [r7, #24]
 8003ba2:	1ad3      	subs	r3, r2, r3
 8003ba4:	683a      	ldr	r2, [r7, #0]
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d803      	bhi.n	8003bb2 <HAL_SPI_Transmit+0x268>
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bb0:	d102      	bne.n	8003bb8 <HAL_SPI_Transmit+0x26e>
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d102      	bne.n	8003bbe <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8003bb8:	2303      	movs	r3, #3
 8003bba:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003bbc:	e026      	b.n	8003c0c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bc2:	b29b      	uxth	r3, r3
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d1b5      	bne.n	8003b34 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003bc8:	69ba      	ldr	r2, [r7, #24]
 8003bca:	6839      	ldr	r1, [r7, #0]
 8003bcc:	68f8      	ldr	r0, [r7, #12]
 8003bce:	f000 f949 	bl	8003e64 <SPI_EndRxTxTransaction>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d002      	beq.n	8003bde <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2220      	movs	r2, #32
 8003bdc:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d10a      	bne.n	8003bfc <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003be6:	2300      	movs	r3, #0
 8003be8:	613b      	str	r3, [r7, #16]
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	613b      	str	r3, [r7, #16]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	613b      	str	r3, [r7, #16]
 8003bfa:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d002      	beq.n	8003c0a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	77fb      	strb	r3, [r7, #31]
 8003c08:	e000      	b.n	8003c0c <HAL_SPI_Transmit+0x2c2>
  }

error:
 8003c0a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2200      	movs	r2, #0
 8003c18:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003c1c:	7ffb      	ldrb	r3, [r7, #31]
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3720      	adds	r7, #32
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}
	...

08003c28 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b088      	sub	sp, #32
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	60f8      	str	r0, [r7, #12]
 8003c30:	60b9      	str	r1, [r7, #8]
 8003c32:	603b      	str	r3, [r7, #0]
 8003c34:	4613      	mov	r3, r2
 8003c36:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003c38:	f7fd fdee 	bl	8001818 <HAL_GetTick>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c40:	1a9b      	subs	r3, r3, r2
 8003c42:	683a      	ldr	r2, [r7, #0]
 8003c44:	4413      	add	r3, r2
 8003c46:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003c48:	f7fd fde6 	bl	8001818 <HAL_GetTick>
 8003c4c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003c4e:	4b39      	ldr	r3, [pc, #228]	; (8003d34 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	015b      	lsls	r3, r3, #5
 8003c54:	0d1b      	lsrs	r3, r3, #20
 8003c56:	69fa      	ldr	r2, [r7, #28]
 8003c58:	fb02 f303 	mul.w	r3, r2, r3
 8003c5c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c5e:	e054      	b.n	8003d0a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c66:	d050      	beq.n	8003d0a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003c68:	f7fd fdd6 	bl	8001818 <HAL_GetTick>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	69bb      	ldr	r3, [r7, #24]
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	69fa      	ldr	r2, [r7, #28]
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d902      	bls.n	8003c7e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003c78:	69fb      	ldr	r3, [r7, #28]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d13d      	bne.n	8003cfa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	685a      	ldr	r2, [r3, #4]
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003c8c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c96:	d111      	bne.n	8003cbc <SPI_WaitFlagStateUntilTimeout+0x94>
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ca0:	d004      	beq.n	8003cac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003caa:	d107      	bne.n	8003cbc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cc0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cc4:	d10f      	bne.n	8003ce6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003cd4:	601a      	str	r2, [r3, #0]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ce4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2201      	movs	r2, #1
 8003cea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	e017      	b.n	8003d2a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d101      	bne.n	8003d04 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003d00:	2300      	movs	r3, #0
 8003d02:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	3b01      	subs	r3, #1
 8003d08:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	689a      	ldr	r2, [r3, #8]
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	4013      	ands	r3, r2
 8003d14:	68ba      	ldr	r2, [r7, #8]
 8003d16:	429a      	cmp	r2, r3
 8003d18:	bf0c      	ite	eq
 8003d1a:	2301      	moveq	r3, #1
 8003d1c:	2300      	movne	r3, #0
 8003d1e:	b2db      	uxtb	r3, r3
 8003d20:	461a      	mov	r2, r3
 8003d22:	79fb      	ldrb	r3, [r7, #7]
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d19b      	bne.n	8003c60 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003d28:	2300      	movs	r3, #0
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3720      	adds	r7, #32
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	bf00      	nop
 8003d34:	20000000 	.word	0x20000000

08003d38 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b08a      	sub	sp, #40	; 0x28
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	60f8      	str	r0, [r7, #12]
 8003d40:	60b9      	str	r1, [r7, #8]
 8003d42:	607a      	str	r2, [r7, #4]
 8003d44:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003d46:	2300      	movs	r3, #0
 8003d48:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003d4a:	f7fd fd65 	bl	8001818 <HAL_GetTick>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d52:	1a9b      	subs	r3, r3, r2
 8003d54:	683a      	ldr	r2, [r7, #0]
 8003d56:	4413      	add	r3, r2
 8003d58:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003d5a:	f7fd fd5d 	bl	8001818 <HAL_GetTick>
 8003d5e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	330c      	adds	r3, #12
 8003d66:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003d68:	4b3d      	ldr	r3, [pc, #244]	; (8003e60 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	4613      	mov	r3, r2
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	4413      	add	r3, r2
 8003d72:	00da      	lsls	r2, r3, #3
 8003d74:	1ad3      	subs	r3, r2, r3
 8003d76:	0d1b      	lsrs	r3, r3, #20
 8003d78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d7a:	fb02 f303 	mul.w	r3, r2, r3
 8003d7e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003d80:	e060      	b.n	8003e44 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003d88:	d107      	bne.n	8003d9a <SPI_WaitFifoStateUntilTimeout+0x62>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d104      	bne.n	8003d9a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003d90:	69fb      	ldr	r3, [r7, #28]
 8003d92:	781b      	ldrb	r3, [r3, #0]
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003d98:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003da0:	d050      	beq.n	8003e44 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003da2:	f7fd fd39 	bl	8001818 <HAL_GetTick>
 8003da6:	4602      	mov	r2, r0
 8003da8:	6a3b      	ldr	r3, [r7, #32]
 8003daa:	1ad3      	subs	r3, r2, r3
 8003dac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d902      	bls.n	8003db8 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d13d      	bne.n	8003e34 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	685a      	ldr	r2, [r3, #4]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003dc6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003dd0:	d111      	bne.n	8003df6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dda:	d004      	beq.n	8003de6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003de4:	d107      	bne.n	8003df6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003df4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dfe:	d10f      	bne.n	8003e20 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e0e:	601a      	str	r2, [r3, #0]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e1e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2201      	movs	r2, #1
 8003e24:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003e30:	2303      	movs	r3, #3
 8003e32:	e010      	b.n	8003e56 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003e34:	69bb      	ldr	r3, [r7, #24]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d101      	bne.n	8003e3e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8003e3e:	69bb      	ldr	r3, [r7, #24]
 8003e40:	3b01      	subs	r3, #1
 8003e42:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	689a      	ldr	r2, [r3, #8]
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d196      	bne.n	8003d82 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003e54:	2300      	movs	r3, #0
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3728      	adds	r7, #40	; 0x28
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	bf00      	nop
 8003e60:	20000000 	.word	0x20000000

08003e64 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b086      	sub	sp, #24
 8003e68:	af02      	add	r7, sp, #8
 8003e6a:	60f8      	str	r0, [r7, #12]
 8003e6c:	60b9      	str	r1, [r7, #8]
 8003e6e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	9300      	str	r3, [sp, #0]
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	2200      	movs	r2, #0
 8003e78:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003e7c:	68f8      	ldr	r0, [r7, #12]
 8003e7e:	f7ff ff5b 	bl	8003d38 <SPI_WaitFifoStateUntilTimeout>
 8003e82:	4603      	mov	r3, r0
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d007      	beq.n	8003e98 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e8c:	f043 0220 	orr.w	r2, r3, #32
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003e94:	2303      	movs	r3, #3
 8003e96:	e027      	b.n	8003ee8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	9300      	str	r3, [sp, #0]
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	2180      	movs	r1, #128	; 0x80
 8003ea2:	68f8      	ldr	r0, [r7, #12]
 8003ea4:	f7ff fec0 	bl	8003c28 <SPI_WaitFlagStateUntilTimeout>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d007      	beq.n	8003ebe <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003eb2:	f043 0220 	orr.w	r2, r3, #32
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003eba:	2303      	movs	r3, #3
 8003ebc:	e014      	b.n	8003ee8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	9300      	str	r3, [sp, #0]
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003eca:	68f8      	ldr	r0, [r7, #12]
 8003ecc:	f7ff ff34 	bl	8003d38 <SPI_WaitFifoStateUntilTimeout>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d007      	beq.n	8003ee6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003eda:	f043 0220 	orr.w	r2, r3, #32
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003ee2:	2303      	movs	r3, #3
 8003ee4:	e000      	b.n	8003ee8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003ee6:	2300      	movs	r3, #0
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3710      	adds	r7, #16
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}

08003ef0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b082      	sub	sp, #8
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d101      	bne.n	8003f02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e049      	b.n	8003f96 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d106      	bne.n	8003f1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2200      	movs	r2, #0
 8003f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f000 f841 	bl	8003f9e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2202      	movs	r2, #2
 8003f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	3304      	adds	r3, #4
 8003f2c:	4619      	mov	r1, r3
 8003f2e:	4610      	mov	r0, r2
 8003f30:	f000 fc3c 	bl	80047ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2201      	movs	r2, #1
 8003f48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2201      	movs	r2, #1
 8003f58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2201      	movs	r2, #1
 8003f60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2201      	movs	r2, #1
 8003f68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2201      	movs	r2, #1
 8003f78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2201      	movs	r2, #1
 8003f88:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2201      	movs	r2, #1
 8003f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f94:	2300      	movs	r3, #0
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3708      	adds	r7, #8
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}

08003f9e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003f9e:	b480      	push	{r7}
 8003fa0:	b083      	sub	sp, #12
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003fa6:	bf00      	nop
 8003fa8:	370c      	adds	r7, #12
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr
	...

08003fb4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b085      	sub	sp, #20
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fc2:	b2db      	uxtb	r3, r3
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d001      	beq.n	8003fcc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e040      	b.n	800404e <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2202      	movs	r2, #2
 8003fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	68da      	ldr	r2, [r3, #12]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f042 0201 	orr.w	r2, r2, #1
 8003fe2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a1c      	ldr	r2, [pc, #112]	; (800405c <HAL_TIM_Base_Start_IT+0xa8>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d00e      	beq.n	800400c <HAL_TIM_Base_Start_IT+0x58>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ff6:	d009      	beq.n	800400c <HAL_TIM_Base_Start_IT+0x58>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a18      	ldr	r2, [pc, #96]	; (8004060 <HAL_TIM_Base_Start_IT+0xac>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d004      	beq.n	800400c <HAL_TIM_Base_Start_IT+0x58>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a17      	ldr	r2, [pc, #92]	; (8004064 <HAL_TIM_Base_Start_IT+0xb0>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d115      	bne.n	8004038 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	689a      	ldr	r2, [r3, #8]
 8004012:	4b15      	ldr	r3, [pc, #84]	; (8004068 <HAL_TIM_Base_Start_IT+0xb4>)
 8004014:	4013      	ands	r3, r2
 8004016:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2b06      	cmp	r3, #6
 800401c:	d015      	beq.n	800404a <HAL_TIM_Base_Start_IT+0x96>
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004024:	d011      	beq.n	800404a <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f042 0201 	orr.w	r2, r2, #1
 8004034:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004036:	e008      	b.n	800404a <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f042 0201 	orr.w	r2, r2, #1
 8004046:	601a      	str	r2, [r3, #0]
 8004048:	e000      	b.n	800404c <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800404a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800404c:	2300      	movs	r3, #0
}
 800404e:	4618      	mov	r0, r3
 8004050:	3714      	adds	r7, #20
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr
 800405a:	bf00      	nop
 800405c:	40012c00 	.word	0x40012c00
 8004060:	40000400 	.word	0x40000400
 8004064:	40014000 	.word	0x40014000
 8004068:	00010007 	.word	0x00010007

0800406c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b082      	sub	sp, #8
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d101      	bne.n	800407e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e049      	b.n	8004112 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004084:	b2db      	uxtb	r3, r3
 8004086:	2b00      	cmp	r3, #0
 8004088:	d106      	bne.n	8004098 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2200      	movs	r2, #0
 800408e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f7fd fa3a 	bl	800150c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2202      	movs	r2, #2
 800409c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	3304      	adds	r3, #4
 80040a8:	4619      	mov	r1, r3
 80040aa:	4610      	mov	r0, r2
 80040ac:	f000 fb7e 	bl	80047ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2201      	movs	r2, #1
 80040b4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2201      	movs	r2, #1
 80040bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2201      	movs	r2, #1
 80040c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2201      	movs	r2, #1
 80040cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2201      	movs	r2, #1
 80040d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2201      	movs	r2, #1
 80040dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2201      	movs	r2, #1
 80040e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2201      	movs	r2, #1
 80040ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2201      	movs	r2, #1
 80040f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2201      	movs	r2, #1
 80040fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2201      	movs	r2, #1
 8004104:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2201      	movs	r2, #1
 800410c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004110:	2300      	movs	r3, #0
}
 8004112:	4618      	mov	r0, r3
 8004114:	3708      	adds	r7, #8
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}
	...

0800411c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b084      	sub	sp, #16
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
 8004124:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d109      	bne.n	8004140 <HAL_TIM_PWM_Start+0x24>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004132:	b2db      	uxtb	r3, r3
 8004134:	2b01      	cmp	r3, #1
 8004136:	bf14      	ite	ne
 8004138:	2301      	movne	r3, #1
 800413a:	2300      	moveq	r3, #0
 800413c:	b2db      	uxtb	r3, r3
 800413e:	e03c      	b.n	80041ba <HAL_TIM_PWM_Start+0x9e>
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	2b04      	cmp	r3, #4
 8004144:	d109      	bne.n	800415a <HAL_TIM_PWM_Start+0x3e>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800414c:	b2db      	uxtb	r3, r3
 800414e:	2b01      	cmp	r3, #1
 8004150:	bf14      	ite	ne
 8004152:	2301      	movne	r3, #1
 8004154:	2300      	moveq	r3, #0
 8004156:	b2db      	uxtb	r3, r3
 8004158:	e02f      	b.n	80041ba <HAL_TIM_PWM_Start+0x9e>
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	2b08      	cmp	r3, #8
 800415e:	d109      	bne.n	8004174 <HAL_TIM_PWM_Start+0x58>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004166:	b2db      	uxtb	r3, r3
 8004168:	2b01      	cmp	r3, #1
 800416a:	bf14      	ite	ne
 800416c:	2301      	movne	r3, #1
 800416e:	2300      	moveq	r3, #0
 8004170:	b2db      	uxtb	r3, r3
 8004172:	e022      	b.n	80041ba <HAL_TIM_PWM_Start+0x9e>
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	2b0c      	cmp	r3, #12
 8004178:	d109      	bne.n	800418e <HAL_TIM_PWM_Start+0x72>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004180:	b2db      	uxtb	r3, r3
 8004182:	2b01      	cmp	r3, #1
 8004184:	bf14      	ite	ne
 8004186:	2301      	movne	r3, #1
 8004188:	2300      	moveq	r3, #0
 800418a:	b2db      	uxtb	r3, r3
 800418c:	e015      	b.n	80041ba <HAL_TIM_PWM_Start+0x9e>
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	2b10      	cmp	r3, #16
 8004192:	d109      	bne.n	80041a8 <HAL_TIM_PWM_Start+0x8c>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800419a:	b2db      	uxtb	r3, r3
 800419c:	2b01      	cmp	r3, #1
 800419e:	bf14      	ite	ne
 80041a0:	2301      	movne	r3, #1
 80041a2:	2300      	moveq	r3, #0
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	e008      	b.n	80041ba <HAL_TIM_PWM_Start+0x9e>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80041ae:	b2db      	uxtb	r3, r3
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	bf14      	ite	ne
 80041b4:	2301      	movne	r3, #1
 80041b6:	2300      	moveq	r3, #0
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d001      	beq.n	80041c2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	e088      	b.n	80042d4 <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d104      	bne.n	80041d2 <HAL_TIM_PWM_Start+0xb6>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2202      	movs	r2, #2
 80041cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041d0:	e023      	b.n	800421a <HAL_TIM_PWM_Start+0xfe>
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	2b04      	cmp	r3, #4
 80041d6:	d104      	bne.n	80041e2 <HAL_TIM_PWM_Start+0xc6>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2202      	movs	r2, #2
 80041dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041e0:	e01b      	b.n	800421a <HAL_TIM_PWM_Start+0xfe>
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	2b08      	cmp	r3, #8
 80041e6:	d104      	bne.n	80041f2 <HAL_TIM_PWM_Start+0xd6>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2202      	movs	r2, #2
 80041ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041f0:	e013      	b.n	800421a <HAL_TIM_PWM_Start+0xfe>
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	2b0c      	cmp	r3, #12
 80041f6:	d104      	bne.n	8004202 <HAL_TIM_PWM_Start+0xe6>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2202      	movs	r2, #2
 80041fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004200:	e00b      	b.n	800421a <HAL_TIM_PWM_Start+0xfe>
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	2b10      	cmp	r3, #16
 8004206:	d104      	bne.n	8004212 <HAL_TIM_PWM_Start+0xf6>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2202      	movs	r2, #2
 800420c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004210:	e003      	b.n	800421a <HAL_TIM_PWM_Start+0xfe>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2202      	movs	r2, #2
 8004216:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	2201      	movs	r2, #1
 8004220:	6839      	ldr	r1, [r7, #0]
 8004222:	4618      	mov	r0, r3
 8004224:	f000 fde0 	bl	8004de8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a2b      	ldr	r2, [pc, #172]	; (80042dc <HAL_TIM_PWM_Start+0x1c0>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d00e      	beq.n	8004250 <HAL_TIM_PWM_Start+0x134>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a2a      	ldr	r2, [pc, #168]	; (80042e0 <HAL_TIM_PWM_Start+0x1c4>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d009      	beq.n	8004250 <HAL_TIM_PWM_Start+0x134>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a28      	ldr	r2, [pc, #160]	; (80042e4 <HAL_TIM_PWM_Start+0x1c8>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d004      	beq.n	8004250 <HAL_TIM_PWM_Start+0x134>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a27      	ldr	r2, [pc, #156]	; (80042e8 <HAL_TIM_PWM_Start+0x1cc>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d101      	bne.n	8004254 <HAL_TIM_PWM_Start+0x138>
 8004250:	2301      	movs	r3, #1
 8004252:	e000      	b.n	8004256 <HAL_TIM_PWM_Start+0x13a>
 8004254:	2300      	movs	r3, #0
 8004256:	2b00      	cmp	r3, #0
 8004258:	d007      	beq.n	800426a <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004268:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a1b      	ldr	r2, [pc, #108]	; (80042dc <HAL_TIM_PWM_Start+0x1c0>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d00e      	beq.n	8004292 <HAL_TIM_PWM_Start+0x176>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800427c:	d009      	beq.n	8004292 <HAL_TIM_PWM_Start+0x176>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a1a      	ldr	r2, [pc, #104]	; (80042ec <HAL_TIM_PWM_Start+0x1d0>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d004      	beq.n	8004292 <HAL_TIM_PWM_Start+0x176>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a14      	ldr	r2, [pc, #80]	; (80042e0 <HAL_TIM_PWM_Start+0x1c4>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d115      	bne.n	80042be <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	689a      	ldr	r2, [r3, #8]
 8004298:	4b15      	ldr	r3, [pc, #84]	; (80042f0 <HAL_TIM_PWM_Start+0x1d4>)
 800429a:	4013      	ands	r3, r2
 800429c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2b06      	cmp	r3, #6
 80042a2:	d015      	beq.n	80042d0 <HAL_TIM_PWM_Start+0x1b4>
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042aa:	d011      	beq.n	80042d0 <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f042 0201 	orr.w	r2, r2, #1
 80042ba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042bc:	e008      	b.n	80042d0 <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f042 0201 	orr.w	r2, r2, #1
 80042cc:	601a      	str	r2, [r3, #0]
 80042ce:	e000      	b.n	80042d2 <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042d0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80042d2:	2300      	movs	r3, #0
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	3710      	adds	r7, #16
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}
 80042dc:	40012c00 	.word	0x40012c00
 80042e0:	40014000 	.word	0x40014000
 80042e4:	40014400 	.word	0x40014400
 80042e8:	40014800 	.word	0x40014800
 80042ec:	40000400 	.word	0x40000400
 80042f0:	00010007 	.word	0x00010007

080042f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b082      	sub	sp, #8
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	691b      	ldr	r3, [r3, #16]
 8004302:	f003 0302 	and.w	r3, r3, #2
 8004306:	2b02      	cmp	r3, #2
 8004308:	d122      	bne.n	8004350 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	68db      	ldr	r3, [r3, #12]
 8004310:	f003 0302 	and.w	r3, r3, #2
 8004314:	2b02      	cmp	r3, #2
 8004316:	d11b      	bne.n	8004350 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f06f 0202 	mvn.w	r2, #2
 8004320:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2201      	movs	r2, #1
 8004326:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	699b      	ldr	r3, [r3, #24]
 800432e:	f003 0303 	and.w	r3, r3, #3
 8004332:	2b00      	cmp	r3, #0
 8004334:	d003      	beq.n	800433e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f000 fa1a 	bl	8004770 <HAL_TIM_IC_CaptureCallback>
 800433c:	e005      	b.n	800434a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f000 fa0c 	bl	800475c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004344:	6878      	ldr	r0, [r7, #4]
 8004346:	f000 fa1d 	bl	8004784 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2200      	movs	r2, #0
 800434e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	691b      	ldr	r3, [r3, #16]
 8004356:	f003 0304 	and.w	r3, r3, #4
 800435a:	2b04      	cmp	r3, #4
 800435c:	d122      	bne.n	80043a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	68db      	ldr	r3, [r3, #12]
 8004364:	f003 0304 	and.w	r3, r3, #4
 8004368:	2b04      	cmp	r3, #4
 800436a:	d11b      	bne.n	80043a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f06f 0204 	mvn.w	r2, #4
 8004374:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2202      	movs	r2, #2
 800437a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	699b      	ldr	r3, [r3, #24]
 8004382:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004386:	2b00      	cmp	r3, #0
 8004388:	d003      	beq.n	8004392 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f000 f9f0 	bl	8004770 <HAL_TIM_IC_CaptureCallback>
 8004390:	e005      	b.n	800439e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f000 f9e2 	bl	800475c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	f000 f9f3 	bl	8004784 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2200      	movs	r2, #0
 80043a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	691b      	ldr	r3, [r3, #16]
 80043aa:	f003 0308 	and.w	r3, r3, #8
 80043ae:	2b08      	cmp	r3, #8
 80043b0:	d122      	bne.n	80043f8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	f003 0308 	and.w	r3, r3, #8
 80043bc:	2b08      	cmp	r3, #8
 80043be:	d11b      	bne.n	80043f8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f06f 0208 	mvn.w	r2, #8
 80043c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2204      	movs	r2, #4
 80043ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	69db      	ldr	r3, [r3, #28]
 80043d6:	f003 0303 	and.w	r3, r3, #3
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d003      	beq.n	80043e6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f000 f9c6 	bl	8004770 <HAL_TIM_IC_CaptureCallback>
 80043e4:	e005      	b.n	80043f2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f000 f9b8 	bl	800475c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043ec:	6878      	ldr	r0, [r7, #4]
 80043ee:	f000 f9c9 	bl	8004784 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2200      	movs	r2, #0
 80043f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	691b      	ldr	r3, [r3, #16]
 80043fe:	f003 0310 	and.w	r3, r3, #16
 8004402:	2b10      	cmp	r3, #16
 8004404:	d122      	bne.n	800444c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	68db      	ldr	r3, [r3, #12]
 800440c:	f003 0310 	and.w	r3, r3, #16
 8004410:	2b10      	cmp	r3, #16
 8004412:	d11b      	bne.n	800444c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f06f 0210 	mvn.w	r2, #16
 800441c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2208      	movs	r2, #8
 8004422:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	69db      	ldr	r3, [r3, #28]
 800442a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800442e:	2b00      	cmp	r3, #0
 8004430:	d003      	beq.n	800443a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f000 f99c 	bl	8004770 <HAL_TIM_IC_CaptureCallback>
 8004438:	e005      	b.n	8004446 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f000 f98e 	bl	800475c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004440:	6878      	ldr	r0, [r7, #4]
 8004442:	f000 f99f 	bl	8004784 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2200      	movs	r2, #0
 800444a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	691b      	ldr	r3, [r3, #16]
 8004452:	f003 0301 	and.w	r3, r3, #1
 8004456:	2b01      	cmp	r3, #1
 8004458:	d10e      	bne.n	8004478 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	68db      	ldr	r3, [r3, #12]
 8004460:	f003 0301 	and.w	r3, r3, #1
 8004464:	2b01      	cmp	r3, #1
 8004466:	d107      	bne.n	8004478 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f06f 0201 	mvn.w	r2, #1
 8004470:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	f7fc ff46 	bl	8001304 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	691b      	ldr	r3, [r3, #16]
 800447e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004482:	2b80      	cmp	r3, #128	; 0x80
 8004484:	d10e      	bne.n	80044a4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	68db      	ldr	r3, [r3, #12]
 800448c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004490:	2b80      	cmp	r3, #128	; 0x80
 8004492:	d107      	bne.n	80044a4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800449c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f000 fd40 	bl	8004f24 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	691b      	ldr	r3, [r3, #16]
 80044aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044b2:	d10e      	bne.n	80044d2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	68db      	ldr	r3, [r3, #12]
 80044ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044be:	2b80      	cmp	r3, #128	; 0x80
 80044c0:	d107      	bne.n	80044d2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80044ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	f000 fd33 	bl	8004f38 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	691b      	ldr	r3, [r3, #16]
 80044d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044dc:	2b40      	cmp	r3, #64	; 0x40
 80044de:	d10e      	bne.n	80044fe <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	68db      	ldr	r3, [r3, #12]
 80044e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ea:	2b40      	cmp	r3, #64	; 0x40
 80044ec:	d107      	bne.n	80044fe <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80044f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80044f8:	6878      	ldr	r0, [r7, #4]
 80044fa:	f000 f94d 	bl	8004798 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	691b      	ldr	r3, [r3, #16]
 8004504:	f003 0320 	and.w	r3, r3, #32
 8004508:	2b20      	cmp	r3, #32
 800450a:	d10e      	bne.n	800452a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	68db      	ldr	r3, [r3, #12]
 8004512:	f003 0320 	and.w	r3, r3, #32
 8004516:	2b20      	cmp	r3, #32
 8004518:	d107      	bne.n	800452a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f06f 0220 	mvn.w	r2, #32
 8004522:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	f000 fcf3 	bl	8004f10 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800452a:	bf00      	nop
 800452c:	3708      	adds	r7, #8
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}
	...

08004534 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b086      	sub	sp, #24
 8004538:	af00      	add	r7, sp, #0
 800453a:	60f8      	str	r0, [r7, #12]
 800453c:	60b9      	str	r1, [r7, #8]
 800453e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004540:	2300      	movs	r3, #0
 8004542:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800454a:	2b01      	cmp	r3, #1
 800454c:	d101      	bne.n	8004552 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800454e:	2302      	movs	r3, #2
 8004550:	e0ff      	b.n	8004752 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2201      	movs	r2, #1
 8004556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2b14      	cmp	r3, #20
 800455e:	f200 80f0 	bhi.w	8004742 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004562:	a201      	add	r2, pc, #4	; (adr r2, 8004568 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004568:	080045bd 	.word	0x080045bd
 800456c:	08004743 	.word	0x08004743
 8004570:	08004743 	.word	0x08004743
 8004574:	08004743 	.word	0x08004743
 8004578:	080045fd 	.word	0x080045fd
 800457c:	08004743 	.word	0x08004743
 8004580:	08004743 	.word	0x08004743
 8004584:	08004743 	.word	0x08004743
 8004588:	0800463f 	.word	0x0800463f
 800458c:	08004743 	.word	0x08004743
 8004590:	08004743 	.word	0x08004743
 8004594:	08004743 	.word	0x08004743
 8004598:	0800467f 	.word	0x0800467f
 800459c:	08004743 	.word	0x08004743
 80045a0:	08004743 	.word	0x08004743
 80045a4:	08004743 	.word	0x08004743
 80045a8:	080046c1 	.word	0x080046c1
 80045ac:	08004743 	.word	0x08004743
 80045b0:	08004743 	.word	0x08004743
 80045b4:	08004743 	.word	0x08004743
 80045b8:	08004701 	.word	0x08004701
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	68b9      	ldr	r1, [r7, #8]
 80045c2:	4618      	mov	r0, r3
 80045c4:	f000 f96a 	bl	800489c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	699a      	ldr	r2, [r3, #24]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f042 0208 	orr.w	r2, r2, #8
 80045d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	699a      	ldr	r2, [r3, #24]
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f022 0204 	bic.w	r2, r2, #4
 80045e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	6999      	ldr	r1, [r3, #24]
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	691a      	ldr	r2, [r3, #16]
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	430a      	orrs	r2, r1
 80045f8:	619a      	str	r2, [r3, #24]
      break;
 80045fa:	e0a5      	b.n	8004748 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	68b9      	ldr	r1, [r7, #8]
 8004602:	4618      	mov	r0, r3
 8004604:	f000 f9d0 	bl	80049a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	699a      	ldr	r2, [r3, #24]
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004616:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	699a      	ldr	r2, [r3, #24]
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004626:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	6999      	ldr	r1, [r3, #24]
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	691b      	ldr	r3, [r3, #16]
 8004632:	021a      	lsls	r2, r3, #8
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	430a      	orrs	r2, r1
 800463a:	619a      	str	r2, [r3, #24]
      break;
 800463c:	e084      	b.n	8004748 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	68b9      	ldr	r1, [r7, #8]
 8004644:	4618      	mov	r0, r3
 8004646:	f000 fa2f 	bl	8004aa8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	69da      	ldr	r2, [r3, #28]
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f042 0208 	orr.w	r2, r2, #8
 8004658:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	69da      	ldr	r2, [r3, #28]
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f022 0204 	bic.w	r2, r2, #4
 8004668:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	69d9      	ldr	r1, [r3, #28]
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	691a      	ldr	r2, [r3, #16]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	430a      	orrs	r2, r1
 800467a:	61da      	str	r2, [r3, #28]
      break;
 800467c:	e064      	b.n	8004748 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	68b9      	ldr	r1, [r7, #8]
 8004684:	4618      	mov	r0, r3
 8004686:	f000 fa8d 	bl	8004ba4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	69da      	ldr	r2, [r3, #28]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004698:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	69da      	ldr	r2, [r3, #28]
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	69d9      	ldr	r1, [r3, #28]
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	691b      	ldr	r3, [r3, #16]
 80046b4:	021a      	lsls	r2, r3, #8
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	430a      	orrs	r2, r1
 80046bc:	61da      	str	r2, [r3, #28]
      break;
 80046be:	e043      	b.n	8004748 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	68b9      	ldr	r1, [r7, #8]
 80046c6:	4618      	mov	r0, r3
 80046c8:	f000 fad0 	bl	8004c6c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f042 0208 	orr.w	r2, r2, #8
 80046da:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f022 0204 	bic.w	r2, r2, #4
 80046ea:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	691a      	ldr	r2, [r3, #16]
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	430a      	orrs	r2, r1
 80046fc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80046fe:	e023      	b.n	8004748 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	68b9      	ldr	r1, [r7, #8]
 8004706:	4618      	mov	r0, r3
 8004708:	f000 fb0e 	bl	8004d28 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800471a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800472a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	691b      	ldr	r3, [r3, #16]
 8004736:	021a      	lsls	r2, r3, #8
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	430a      	orrs	r2, r1
 800473e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004740:	e002      	b.n	8004748 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	75fb      	strb	r3, [r7, #23]
      break;
 8004746:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2200      	movs	r2, #0
 800474c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004750:	7dfb      	ldrb	r3, [r7, #23]
}
 8004752:	4618      	mov	r0, r3
 8004754:	3718      	adds	r7, #24
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}
 800475a:	bf00      	nop

0800475c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800475c:	b480      	push	{r7}
 800475e:	b083      	sub	sp, #12
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004764:	bf00      	nop
 8004766:	370c      	adds	r7, #12
 8004768:	46bd      	mov	sp, r7
 800476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476e:	4770      	bx	lr

08004770 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004770:	b480      	push	{r7}
 8004772:	b083      	sub	sp, #12
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004778:	bf00      	nop
 800477a:	370c      	adds	r7, #12
 800477c:	46bd      	mov	sp, r7
 800477e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004782:	4770      	bx	lr

08004784 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004784:	b480      	push	{r7}
 8004786:	b083      	sub	sp, #12
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800478c:	bf00      	nop
 800478e:	370c      	adds	r7, #12
 8004790:	46bd      	mov	sp, r7
 8004792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004796:	4770      	bx	lr

08004798 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004798:	b480      	push	{r7}
 800479a:	b083      	sub	sp, #12
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80047a0:	bf00      	nop
 80047a2:	370c      	adds	r7, #12
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr

080047ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b085      	sub	sp, #20
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	4a32      	ldr	r2, [pc, #200]	; (8004888 <TIM_Base_SetConfig+0xdc>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d007      	beq.n	80047d4 <TIM_Base_SetConfig+0x28>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047ca:	d003      	beq.n	80047d4 <TIM_Base_SetConfig+0x28>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	4a2f      	ldr	r2, [pc, #188]	; (800488c <TIM_Base_SetConfig+0xe0>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d108      	bne.n	80047e6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	68fa      	ldr	r2, [r7, #12]
 80047e2:	4313      	orrs	r3, r2
 80047e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	4a27      	ldr	r2, [pc, #156]	; (8004888 <TIM_Base_SetConfig+0xdc>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d013      	beq.n	8004816 <TIM_Base_SetConfig+0x6a>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047f4:	d00f      	beq.n	8004816 <TIM_Base_SetConfig+0x6a>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	4a24      	ldr	r2, [pc, #144]	; (800488c <TIM_Base_SetConfig+0xe0>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d00b      	beq.n	8004816 <TIM_Base_SetConfig+0x6a>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	4a23      	ldr	r2, [pc, #140]	; (8004890 <TIM_Base_SetConfig+0xe4>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d007      	beq.n	8004816 <TIM_Base_SetConfig+0x6a>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	4a22      	ldr	r2, [pc, #136]	; (8004894 <TIM_Base_SetConfig+0xe8>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d003      	beq.n	8004816 <TIM_Base_SetConfig+0x6a>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	4a21      	ldr	r2, [pc, #132]	; (8004898 <TIM_Base_SetConfig+0xec>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d108      	bne.n	8004828 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800481c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	68db      	ldr	r3, [r3, #12]
 8004822:	68fa      	ldr	r2, [r7, #12]
 8004824:	4313      	orrs	r3, r2
 8004826:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	695b      	ldr	r3, [r3, #20]
 8004832:	4313      	orrs	r3, r2
 8004834:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	68fa      	ldr	r2, [r7, #12]
 800483a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	689a      	ldr	r2, [r3, #8]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	4a0e      	ldr	r2, [pc, #56]	; (8004888 <TIM_Base_SetConfig+0xdc>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d00b      	beq.n	800486c <TIM_Base_SetConfig+0xc0>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	4a0e      	ldr	r2, [pc, #56]	; (8004890 <TIM_Base_SetConfig+0xe4>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d007      	beq.n	800486c <TIM_Base_SetConfig+0xc0>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	4a0d      	ldr	r2, [pc, #52]	; (8004894 <TIM_Base_SetConfig+0xe8>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d003      	beq.n	800486c <TIM_Base_SetConfig+0xc0>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	4a0c      	ldr	r2, [pc, #48]	; (8004898 <TIM_Base_SetConfig+0xec>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d103      	bne.n	8004874 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	691a      	ldr	r2, [r3, #16]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2201      	movs	r2, #1
 8004878:	615a      	str	r2, [r3, #20]
}
 800487a:	bf00      	nop
 800487c:	3714      	adds	r7, #20
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr
 8004886:	bf00      	nop
 8004888:	40012c00 	.word	0x40012c00
 800488c:	40000400 	.word	0x40000400
 8004890:	40014000 	.word	0x40014000
 8004894:	40014400 	.word	0x40014400
 8004898:	40014800 	.word	0x40014800

0800489c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800489c:	b480      	push	{r7}
 800489e:	b087      	sub	sp, #28
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
 80048a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6a1b      	ldr	r3, [r3, #32]
 80048aa:	f023 0201 	bic.w	r2, r3, #1
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6a1b      	ldr	r3, [r3, #32]
 80048b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	699b      	ldr	r3, [r3, #24]
 80048c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	f023 0303 	bic.w	r3, r3, #3
 80048d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	68fa      	ldr	r2, [r7, #12]
 80048de:	4313      	orrs	r3, r2
 80048e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	f023 0302 	bic.w	r3, r3, #2
 80048e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	697a      	ldr	r2, [r7, #20]
 80048f0:	4313      	orrs	r3, r2
 80048f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	4a28      	ldr	r2, [pc, #160]	; (8004998 <TIM_OC1_SetConfig+0xfc>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d00b      	beq.n	8004914 <TIM_OC1_SetConfig+0x78>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	4a27      	ldr	r2, [pc, #156]	; (800499c <TIM_OC1_SetConfig+0x100>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d007      	beq.n	8004914 <TIM_OC1_SetConfig+0x78>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	4a26      	ldr	r2, [pc, #152]	; (80049a0 <TIM_OC1_SetConfig+0x104>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d003      	beq.n	8004914 <TIM_OC1_SetConfig+0x78>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	4a25      	ldr	r2, [pc, #148]	; (80049a4 <TIM_OC1_SetConfig+0x108>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d10c      	bne.n	800492e <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	f023 0308 	bic.w	r3, r3, #8
 800491a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	68db      	ldr	r3, [r3, #12]
 8004920:	697a      	ldr	r2, [r7, #20]
 8004922:	4313      	orrs	r3, r2
 8004924:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	f023 0304 	bic.w	r3, r3, #4
 800492c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	4a19      	ldr	r2, [pc, #100]	; (8004998 <TIM_OC1_SetConfig+0xfc>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d00b      	beq.n	800494e <TIM_OC1_SetConfig+0xb2>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4a18      	ldr	r2, [pc, #96]	; (800499c <TIM_OC1_SetConfig+0x100>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d007      	beq.n	800494e <TIM_OC1_SetConfig+0xb2>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	4a17      	ldr	r2, [pc, #92]	; (80049a0 <TIM_OC1_SetConfig+0x104>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d003      	beq.n	800494e <TIM_OC1_SetConfig+0xb2>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	4a16      	ldr	r2, [pc, #88]	; (80049a4 <TIM_OC1_SetConfig+0x108>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d111      	bne.n	8004972 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004954:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800495c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	695b      	ldr	r3, [r3, #20]
 8004962:	693a      	ldr	r2, [r7, #16]
 8004964:	4313      	orrs	r3, r2
 8004966:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	699b      	ldr	r3, [r3, #24]
 800496c:	693a      	ldr	r2, [r7, #16]
 800496e:	4313      	orrs	r3, r2
 8004970:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	693a      	ldr	r2, [r7, #16]
 8004976:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	68fa      	ldr	r2, [r7, #12]
 800497c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	685a      	ldr	r2, [r3, #4]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	697a      	ldr	r2, [r7, #20]
 800498a:	621a      	str	r2, [r3, #32]
}
 800498c:	bf00      	nop
 800498e:	371c      	adds	r7, #28
 8004990:	46bd      	mov	sp, r7
 8004992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004996:	4770      	bx	lr
 8004998:	40012c00 	.word	0x40012c00
 800499c:	40014000 	.word	0x40014000
 80049a0:	40014400 	.word	0x40014400
 80049a4:	40014800 	.word	0x40014800

080049a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b087      	sub	sp, #28
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
 80049b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6a1b      	ldr	r3, [r3, #32]
 80049b6:	f023 0210 	bic.w	r2, r3, #16
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6a1b      	ldr	r3, [r3, #32]
 80049c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	699b      	ldr	r3, [r3, #24]
 80049ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80049d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	021b      	lsls	r3, r3, #8
 80049ea:	68fa      	ldr	r2, [r7, #12]
 80049ec:	4313      	orrs	r3, r2
 80049ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	f023 0320 	bic.w	r3, r3, #32
 80049f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	011b      	lsls	r3, r3, #4
 80049fe:	697a      	ldr	r2, [r7, #20]
 8004a00:	4313      	orrs	r3, r2
 8004a02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	4a24      	ldr	r2, [pc, #144]	; (8004a98 <TIM_OC2_SetConfig+0xf0>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d10d      	bne.n	8004a28 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	011b      	lsls	r3, r3, #4
 8004a1a:	697a      	ldr	r2, [r7, #20]
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a26:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	4a1b      	ldr	r2, [pc, #108]	; (8004a98 <TIM_OC2_SetConfig+0xf0>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d00b      	beq.n	8004a48 <TIM_OC2_SetConfig+0xa0>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	4a1a      	ldr	r2, [pc, #104]	; (8004a9c <TIM_OC2_SetConfig+0xf4>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d007      	beq.n	8004a48 <TIM_OC2_SetConfig+0xa0>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	4a19      	ldr	r2, [pc, #100]	; (8004aa0 <TIM_OC2_SetConfig+0xf8>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d003      	beq.n	8004a48 <TIM_OC2_SetConfig+0xa0>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	4a18      	ldr	r2, [pc, #96]	; (8004aa4 <TIM_OC2_SetConfig+0xfc>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d113      	bne.n	8004a70 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a4e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a56:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	695b      	ldr	r3, [r3, #20]
 8004a5c:	009b      	lsls	r3, r3, #2
 8004a5e:	693a      	ldr	r2, [r7, #16]
 8004a60:	4313      	orrs	r3, r2
 8004a62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	699b      	ldr	r3, [r3, #24]
 8004a68:	009b      	lsls	r3, r3, #2
 8004a6a:	693a      	ldr	r2, [r7, #16]
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	693a      	ldr	r2, [r7, #16]
 8004a74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	68fa      	ldr	r2, [r7, #12]
 8004a7a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	685a      	ldr	r2, [r3, #4]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	697a      	ldr	r2, [r7, #20]
 8004a88:	621a      	str	r2, [r3, #32]
}
 8004a8a:	bf00      	nop
 8004a8c:	371c      	adds	r7, #28
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr
 8004a96:	bf00      	nop
 8004a98:	40012c00 	.word	0x40012c00
 8004a9c:	40014000 	.word	0x40014000
 8004aa0:	40014400 	.word	0x40014400
 8004aa4:	40014800 	.word	0x40014800

08004aa8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b087      	sub	sp, #28
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
 8004ab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6a1b      	ldr	r3, [r3, #32]
 8004ab6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6a1b      	ldr	r3, [r3, #32]
 8004ac2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	69db      	ldr	r3, [r3, #28]
 8004ace:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ad6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ada:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f023 0303 	bic.w	r3, r3, #3
 8004ae2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	68fa      	ldr	r2, [r7, #12]
 8004aea:	4313      	orrs	r3, r2
 8004aec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004af4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	021b      	lsls	r3, r3, #8
 8004afc:	697a      	ldr	r2, [r7, #20]
 8004afe:	4313      	orrs	r3, r2
 8004b00:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	4a23      	ldr	r2, [pc, #140]	; (8004b94 <TIM_OC3_SetConfig+0xec>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d10d      	bne.n	8004b26 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	68db      	ldr	r3, [r3, #12]
 8004b16:	021b      	lsls	r3, r3, #8
 8004b18:	697a      	ldr	r2, [r7, #20]
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b24:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	4a1a      	ldr	r2, [pc, #104]	; (8004b94 <TIM_OC3_SetConfig+0xec>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d00b      	beq.n	8004b46 <TIM_OC3_SetConfig+0x9e>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	4a19      	ldr	r2, [pc, #100]	; (8004b98 <TIM_OC3_SetConfig+0xf0>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d007      	beq.n	8004b46 <TIM_OC3_SetConfig+0x9e>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	4a18      	ldr	r2, [pc, #96]	; (8004b9c <TIM_OC3_SetConfig+0xf4>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d003      	beq.n	8004b46 <TIM_OC3_SetConfig+0x9e>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	4a17      	ldr	r2, [pc, #92]	; (8004ba0 <TIM_OC3_SetConfig+0xf8>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d113      	bne.n	8004b6e <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	695b      	ldr	r3, [r3, #20]
 8004b5a:	011b      	lsls	r3, r3, #4
 8004b5c:	693a      	ldr	r2, [r7, #16]
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	699b      	ldr	r3, [r3, #24]
 8004b66:	011b      	lsls	r3, r3, #4
 8004b68:	693a      	ldr	r2, [r7, #16]
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	693a      	ldr	r2, [r7, #16]
 8004b72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	68fa      	ldr	r2, [r7, #12]
 8004b78:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	685a      	ldr	r2, [r3, #4]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	697a      	ldr	r2, [r7, #20]
 8004b86:	621a      	str	r2, [r3, #32]
}
 8004b88:	bf00      	nop
 8004b8a:	371c      	adds	r7, #28
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr
 8004b94:	40012c00 	.word	0x40012c00
 8004b98:	40014000 	.word	0x40014000
 8004b9c:	40014400 	.word	0x40014400
 8004ba0:	40014800 	.word	0x40014800

08004ba4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b087      	sub	sp, #28
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
 8004bac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6a1b      	ldr	r3, [r3, #32]
 8004bb2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6a1b      	ldr	r3, [r3, #32]
 8004bbe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	69db      	ldr	r3, [r3, #28]
 8004bca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004bd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bde:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	021b      	lsls	r3, r3, #8
 8004be6:	68fa      	ldr	r2, [r7, #12]
 8004be8:	4313      	orrs	r3, r2
 8004bea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004bf2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	031b      	lsls	r3, r3, #12
 8004bfa:	693a      	ldr	r2, [r7, #16]
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	4a16      	ldr	r2, [pc, #88]	; (8004c5c <TIM_OC4_SetConfig+0xb8>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d00b      	beq.n	8004c20 <TIM_OC4_SetConfig+0x7c>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	4a15      	ldr	r2, [pc, #84]	; (8004c60 <TIM_OC4_SetConfig+0xbc>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d007      	beq.n	8004c20 <TIM_OC4_SetConfig+0x7c>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	4a14      	ldr	r2, [pc, #80]	; (8004c64 <TIM_OC4_SetConfig+0xc0>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d003      	beq.n	8004c20 <TIM_OC4_SetConfig+0x7c>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	4a13      	ldr	r2, [pc, #76]	; (8004c68 <TIM_OC4_SetConfig+0xc4>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d109      	bne.n	8004c34 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c26:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	695b      	ldr	r3, [r3, #20]
 8004c2c:	019b      	lsls	r3, r3, #6
 8004c2e:	697a      	ldr	r2, [r7, #20]
 8004c30:	4313      	orrs	r3, r2
 8004c32:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	697a      	ldr	r2, [r7, #20]
 8004c38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	68fa      	ldr	r2, [r7, #12]
 8004c3e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	685a      	ldr	r2, [r3, #4]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	693a      	ldr	r2, [r7, #16]
 8004c4c:	621a      	str	r2, [r3, #32]
}
 8004c4e:	bf00      	nop
 8004c50:	371c      	adds	r7, #28
 8004c52:	46bd      	mov	sp, r7
 8004c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c58:	4770      	bx	lr
 8004c5a:	bf00      	nop
 8004c5c:	40012c00 	.word	0x40012c00
 8004c60:	40014000 	.word	0x40014000
 8004c64:	40014400 	.word	0x40014400
 8004c68:	40014800 	.word	0x40014800

08004c6c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b087      	sub	sp, #28
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
 8004c74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6a1b      	ldr	r3, [r3, #32]
 8004c7a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6a1b      	ldr	r3, [r3, #32]
 8004c86:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	68fa      	ldr	r2, [r7, #12]
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004cb0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	041b      	lsls	r3, r3, #16
 8004cb8:	693a      	ldr	r2, [r7, #16]
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	4a15      	ldr	r2, [pc, #84]	; (8004d18 <TIM_OC5_SetConfig+0xac>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d00b      	beq.n	8004cde <TIM_OC5_SetConfig+0x72>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	4a14      	ldr	r2, [pc, #80]	; (8004d1c <TIM_OC5_SetConfig+0xb0>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d007      	beq.n	8004cde <TIM_OC5_SetConfig+0x72>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	4a13      	ldr	r2, [pc, #76]	; (8004d20 <TIM_OC5_SetConfig+0xb4>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d003      	beq.n	8004cde <TIM_OC5_SetConfig+0x72>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	4a12      	ldr	r2, [pc, #72]	; (8004d24 <TIM_OC5_SetConfig+0xb8>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d109      	bne.n	8004cf2 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ce4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	695b      	ldr	r3, [r3, #20]
 8004cea:	021b      	lsls	r3, r3, #8
 8004cec:	697a      	ldr	r2, [r7, #20]
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	697a      	ldr	r2, [r7, #20]
 8004cf6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	68fa      	ldr	r2, [r7, #12]
 8004cfc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	685a      	ldr	r2, [r3, #4]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	693a      	ldr	r2, [r7, #16]
 8004d0a:	621a      	str	r2, [r3, #32]
}
 8004d0c:	bf00      	nop
 8004d0e:	371c      	adds	r7, #28
 8004d10:	46bd      	mov	sp, r7
 8004d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d16:	4770      	bx	lr
 8004d18:	40012c00 	.word	0x40012c00
 8004d1c:	40014000 	.word	0x40014000
 8004d20:	40014400 	.word	0x40014400
 8004d24:	40014800 	.word	0x40014800

08004d28 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b087      	sub	sp, #28
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
 8004d30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6a1b      	ldr	r3, [r3, #32]
 8004d36:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6a1b      	ldr	r3, [r3, #32]
 8004d42:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	021b      	lsls	r3, r3, #8
 8004d62:	68fa      	ldr	r2, [r7, #12]
 8004d64:	4313      	orrs	r3, r2
 8004d66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004d6e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	051b      	lsls	r3, r3, #20
 8004d76:	693a      	ldr	r2, [r7, #16]
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	4a16      	ldr	r2, [pc, #88]	; (8004dd8 <TIM_OC6_SetConfig+0xb0>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d00b      	beq.n	8004d9c <TIM_OC6_SetConfig+0x74>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	4a15      	ldr	r2, [pc, #84]	; (8004ddc <TIM_OC6_SetConfig+0xb4>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d007      	beq.n	8004d9c <TIM_OC6_SetConfig+0x74>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	4a14      	ldr	r2, [pc, #80]	; (8004de0 <TIM_OC6_SetConfig+0xb8>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d003      	beq.n	8004d9c <TIM_OC6_SetConfig+0x74>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	4a13      	ldr	r2, [pc, #76]	; (8004de4 <TIM_OC6_SetConfig+0xbc>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d109      	bne.n	8004db0 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004da2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	695b      	ldr	r3, [r3, #20]
 8004da8:	029b      	lsls	r3, r3, #10
 8004daa:	697a      	ldr	r2, [r7, #20]
 8004dac:	4313      	orrs	r3, r2
 8004dae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	697a      	ldr	r2, [r7, #20]
 8004db4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	68fa      	ldr	r2, [r7, #12]
 8004dba:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	685a      	ldr	r2, [r3, #4]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	693a      	ldr	r2, [r7, #16]
 8004dc8:	621a      	str	r2, [r3, #32]
}
 8004dca:	bf00      	nop
 8004dcc:	371c      	adds	r7, #28
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr
 8004dd6:	bf00      	nop
 8004dd8:	40012c00 	.word	0x40012c00
 8004ddc:	40014000 	.word	0x40014000
 8004de0:	40014400 	.word	0x40014400
 8004de4:	40014800 	.word	0x40014800

08004de8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b087      	sub	sp, #28
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	60f8      	str	r0, [r7, #12]
 8004df0:	60b9      	str	r1, [r7, #8]
 8004df2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	f003 031f 	and.w	r3, r3, #31
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8004e00:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	6a1a      	ldr	r2, [r3, #32]
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	43db      	mvns	r3, r3
 8004e0a:	401a      	ands	r2, r3
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	6a1a      	ldr	r2, [r3, #32]
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	f003 031f 	and.w	r3, r3, #31
 8004e1a:	6879      	ldr	r1, [r7, #4]
 8004e1c:	fa01 f303 	lsl.w	r3, r1, r3
 8004e20:	431a      	orrs	r2, r3
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	621a      	str	r2, [r3, #32]
}
 8004e26:	bf00      	nop
 8004e28:	371c      	adds	r7, #28
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e30:	4770      	bx	lr
	...

08004e34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b085      	sub	sp, #20
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
 8004e3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d101      	bne.n	8004e4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e48:	2302      	movs	r3, #2
 8004e4a:	e054      	b.n	8004ef6 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2202      	movs	r2, #2
 8004e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a24      	ldr	r2, [pc, #144]	; (8004f04 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d108      	bne.n	8004e88 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004e7c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	68fa      	ldr	r2, [r7, #12]
 8004e84:	4313      	orrs	r3, r2
 8004e86:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e8e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	68fa      	ldr	r2, [r7, #12]
 8004e96:	4313      	orrs	r3, r2
 8004e98:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	68fa      	ldr	r2, [r7, #12]
 8004ea0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a17      	ldr	r2, [pc, #92]	; (8004f04 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d00e      	beq.n	8004eca <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004eb4:	d009      	beq.n	8004eca <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a13      	ldr	r2, [pc, #76]	; (8004f08 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d004      	beq.n	8004eca <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a11      	ldr	r2, [pc, #68]	; (8004f0c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d10c      	bne.n	8004ee4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ed0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	68ba      	ldr	r2, [r7, #8]
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	68ba      	ldr	r2, [r7, #8]
 8004ee2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ef4:	2300      	movs	r3, #0
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3714      	adds	r7, #20
 8004efa:	46bd      	mov	sp, r7
 8004efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f00:	4770      	bx	lr
 8004f02:	bf00      	nop
 8004f04:	40012c00 	.word	0x40012c00
 8004f08:	40000400 	.word	0x40000400
 8004f0c:	40014000 	.word	0x40014000

08004f10 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b083      	sub	sp, #12
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f18:	bf00      	nop
 8004f1a:	370c      	adds	r7, #12
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f22:	4770      	bx	lr

08004f24 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b083      	sub	sp, #12
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f2c:	bf00      	nop
 8004f2e:	370c      	adds	r7, #12
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr

08004f38 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b083      	sub	sp, #12
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004f40:	bf00      	nop
 8004f42:	370c      	adds	r7, #12
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr

08004f4c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b082      	sub	sp, #8
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d101      	bne.n	8004f5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e040      	b.n	8004fe0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d106      	bne.n	8004f74 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f7fc fb24 	bl	80015bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2224      	movs	r2, #36	; 0x24
 8004f78:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	681a      	ldr	r2, [r3, #0]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f022 0201 	bic.w	r2, r2, #1
 8004f88:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f000 f82c 	bl	8004fe8 <UART_SetConfig>
 8004f90:	4603      	mov	r3, r0
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	d101      	bne.n	8004f9a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	e022      	b.n	8004fe0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d002      	beq.n	8004fa8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f000 f956 	bl	8005254 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	685a      	ldr	r2, [r3, #4]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004fb6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	689a      	ldr	r2, [r3, #8]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004fc6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	681a      	ldr	r2, [r3, #0]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f042 0201 	orr.w	r2, r2, #1
 8004fd6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	f000 f9dd 	bl	8005398 <UART_CheckIdleState>
 8004fde:	4603      	mov	r3, r0
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	3708      	adds	r7, #8
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}

08004fe8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b088      	sub	sp, #32
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	689a      	ldr	r2, [r3, #8]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	691b      	ldr	r3, [r3, #16]
 8004ffc:	431a      	orrs	r2, r3
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	695b      	ldr	r3, [r3, #20]
 8005002:	431a      	orrs	r2, r3
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	69db      	ldr	r3, [r3, #28]
 8005008:	4313      	orrs	r3, r2
 800500a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	681a      	ldr	r2, [r3, #0]
 8005012:	4b8a      	ldr	r3, [pc, #552]	; (800523c <UART_SetConfig+0x254>)
 8005014:	4013      	ands	r3, r2
 8005016:	687a      	ldr	r2, [r7, #4]
 8005018:	6812      	ldr	r2, [r2, #0]
 800501a:	6979      	ldr	r1, [r7, #20]
 800501c:	430b      	orrs	r3, r1
 800501e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	68da      	ldr	r2, [r3, #12]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	430a      	orrs	r2, r1
 8005034:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	699b      	ldr	r3, [r3, #24]
 800503a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6a1b      	ldr	r3, [r3, #32]
 8005040:	697a      	ldr	r2, [r7, #20]
 8005042:	4313      	orrs	r3, r2
 8005044:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	697a      	ldr	r2, [r7, #20]
 8005056:	430a      	orrs	r2, r1
 8005058:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a78      	ldr	r2, [pc, #480]	; (8005240 <UART_SetConfig+0x258>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d120      	bne.n	80050a6 <UART_SetConfig+0xbe>
 8005064:	4b77      	ldr	r3, [pc, #476]	; (8005244 <UART_SetConfig+0x25c>)
 8005066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005068:	f003 0303 	and.w	r3, r3, #3
 800506c:	2b03      	cmp	r3, #3
 800506e:	d817      	bhi.n	80050a0 <UART_SetConfig+0xb8>
 8005070:	a201      	add	r2, pc, #4	; (adr r2, 8005078 <UART_SetConfig+0x90>)
 8005072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005076:	bf00      	nop
 8005078:	08005089 	.word	0x08005089
 800507c:	08005095 	.word	0x08005095
 8005080:	0800509b 	.word	0x0800509b
 8005084:	0800508f 	.word	0x0800508f
 8005088:	2300      	movs	r3, #0
 800508a:	77fb      	strb	r3, [r7, #31]
 800508c:	e01d      	b.n	80050ca <UART_SetConfig+0xe2>
 800508e:	2302      	movs	r3, #2
 8005090:	77fb      	strb	r3, [r7, #31]
 8005092:	e01a      	b.n	80050ca <UART_SetConfig+0xe2>
 8005094:	2304      	movs	r3, #4
 8005096:	77fb      	strb	r3, [r7, #31]
 8005098:	e017      	b.n	80050ca <UART_SetConfig+0xe2>
 800509a:	2308      	movs	r3, #8
 800509c:	77fb      	strb	r3, [r7, #31]
 800509e:	e014      	b.n	80050ca <UART_SetConfig+0xe2>
 80050a0:	2310      	movs	r3, #16
 80050a2:	77fb      	strb	r3, [r7, #31]
 80050a4:	e011      	b.n	80050ca <UART_SetConfig+0xe2>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a67      	ldr	r2, [pc, #412]	; (8005248 <UART_SetConfig+0x260>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d102      	bne.n	80050b6 <UART_SetConfig+0xce>
 80050b0:	2300      	movs	r3, #0
 80050b2:	77fb      	strb	r3, [r7, #31]
 80050b4:	e009      	b.n	80050ca <UART_SetConfig+0xe2>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a64      	ldr	r2, [pc, #400]	; (800524c <UART_SetConfig+0x264>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d102      	bne.n	80050c6 <UART_SetConfig+0xde>
 80050c0:	2300      	movs	r3, #0
 80050c2:	77fb      	strb	r3, [r7, #31]
 80050c4:	e001      	b.n	80050ca <UART_SetConfig+0xe2>
 80050c6:	2310      	movs	r3, #16
 80050c8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	69db      	ldr	r3, [r3, #28]
 80050ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050d2:	d15b      	bne.n	800518c <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 80050d4:	7ffb      	ldrb	r3, [r7, #31]
 80050d6:	2b08      	cmp	r3, #8
 80050d8:	d827      	bhi.n	800512a <UART_SetConfig+0x142>
 80050da:	a201      	add	r2, pc, #4	; (adr r2, 80050e0 <UART_SetConfig+0xf8>)
 80050dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050e0:	08005105 	.word	0x08005105
 80050e4:	0800510d 	.word	0x0800510d
 80050e8:	08005115 	.word	0x08005115
 80050ec:	0800512b 	.word	0x0800512b
 80050f0:	0800511b 	.word	0x0800511b
 80050f4:	0800512b 	.word	0x0800512b
 80050f8:	0800512b 	.word	0x0800512b
 80050fc:	0800512b 	.word	0x0800512b
 8005100:	08005123 	.word	0x08005123
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005104:	f7fe fb08 	bl	8003718 <HAL_RCC_GetPCLK1Freq>
 8005108:	61b8      	str	r0, [r7, #24]
        break;
 800510a:	e013      	b.n	8005134 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800510c:	f7fe fb26 	bl	800375c <HAL_RCC_GetPCLK2Freq>
 8005110:	61b8      	str	r0, [r7, #24]
        break;
 8005112:	e00f      	b.n	8005134 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005114:	4b4e      	ldr	r3, [pc, #312]	; (8005250 <UART_SetConfig+0x268>)
 8005116:	61bb      	str	r3, [r7, #24]
        break;
 8005118:	e00c      	b.n	8005134 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800511a:	f7fe fa87 	bl	800362c <HAL_RCC_GetSysClockFreq>
 800511e:	61b8      	str	r0, [r7, #24]
        break;
 8005120:	e008      	b.n	8005134 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005122:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005126:	61bb      	str	r3, [r7, #24]
        break;
 8005128:	e004      	b.n	8005134 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800512a:	2300      	movs	r3, #0
 800512c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800512e:	2301      	movs	r3, #1
 8005130:	77bb      	strb	r3, [r7, #30]
        break;
 8005132:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005134:	69bb      	ldr	r3, [r7, #24]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d074      	beq.n	8005224 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800513a:	69bb      	ldr	r3, [r7, #24]
 800513c:	005a      	lsls	r2, r3, #1
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	085b      	lsrs	r3, r3, #1
 8005144:	441a      	add	r2, r3
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	fbb2 f3f3 	udiv	r3, r2, r3
 800514e:	b29b      	uxth	r3, r3
 8005150:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	2b0f      	cmp	r3, #15
 8005156:	d916      	bls.n	8005186 <UART_SetConfig+0x19e>
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800515e:	d212      	bcs.n	8005186 <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	b29b      	uxth	r3, r3
 8005164:	f023 030f 	bic.w	r3, r3, #15
 8005168:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	085b      	lsrs	r3, r3, #1
 800516e:	b29b      	uxth	r3, r3
 8005170:	f003 0307 	and.w	r3, r3, #7
 8005174:	b29a      	uxth	r2, r3
 8005176:	89fb      	ldrh	r3, [r7, #14]
 8005178:	4313      	orrs	r3, r2
 800517a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	89fa      	ldrh	r2, [r7, #14]
 8005182:	60da      	str	r2, [r3, #12]
 8005184:	e04e      	b.n	8005224 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	77bb      	strb	r3, [r7, #30]
 800518a:	e04b      	b.n	8005224 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800518c:	7ffb      	ldrb	r3, [r7, #31]
 800518e:	2b08      	cmp	r3, #8
 8005190:	d827      	bhi.n	80051e2 <UART_SetConfig+0x1fa>
 8005192:	a201      	add	r2, pc, #4	; (adr r2, 8005198 <UART_SetConfig+0x1b0>)
 8005194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005198:	080051bd 	.word	0x080051bd
 800519c:	080051c5 	.word	0x080051c5
 80051a0:	080051cd 	.word	0x080051cd
 80051a4:	080051e3 	.word	0x080051e3
 80051a8:	080051d3 	.word	0x080051d3
 80051ac:	080051e3 	.word	0x080051e3
 80051b0:	080051e3 	.word	0x080051e3
 80051b4:	080051e3 	.word	0x080051e3
 80051b8:	080051db 	.word	0x080051db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051bc:	f7fe faac 	bl	8003718 <HAL_RCC_GetPCLK1Freq>
 80051c0:	61b8      	str	r0, [r7, #24]
        break;
 80051c2:	e013      	b.n	80051ec <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80051c4:	f7fe faca 	bl	800375c <HAL_RCC_GetPCLK2Freq>
 80051c8:	61b8      	str	r0, [r7, #24]
        break;
 80051ca:	e00f      	b.n	80051ec <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051cc:	4b20      	ldr	r3, [pc, #128]	; (8005250 <UART_SetConfig+0x268>)
 80051ce:	61bb      	str	r3, [r7, #24]
        break;
 80051d0:	e00c      	b.n	80051ec <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051d2:	f7fe fa2b 	bl	800362c <HAL_RCC_GetSysClockFreq>
 80051d6:	61b8      	str	r0, [r7, #24]
        break;
 80051d8:	e008      	b.n	80051ec <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051de:	61bb      	str	r3, [r7, #24]
        break;
 80051e0:	e004      	b.n	80051ec <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80051e2:	2300      	movs	r3, #0
 80051e4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80051e6:	2301      	movs	r3, #1
 80051e8:	77bb      	strb	r3, [r7, #30]
        break;
 80051ea:	bf00      	nop
    }

    if (pclk != 0U)
 80051ec:	69bb      	ldr	r3, [r7, #24]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d018      	beq.n	8005224 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	085a      	lsrs	r2, r3, #1
 80051f8:	69bb      	ldr	r3, [r7, #24]
 80051fa:	441a      	add	r2, r3
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	fbb2 f3f3 	udiv	r3, r2, r3
 8005204:	b29b      	uxth	r3, r3
 8005206:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	2b0f      	cmp	r3, #15
 800520c:	d908      	bls.n	8005220 <UART_SetConfig+0x238>
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005214:	d204      	bcs.n	8005220 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	693a      	ldr	r2, [r7, #16]
 800521c:	60da      	str	r2, [r3, #12]
 800521e:	e001      	b.n	8005224 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005220:	2301      	movs	r3, #1
 8005222:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2200      	movs	r2, #0
 8005228:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2200      	movs	r2, #0
 800522e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005230:	7fbb      	ldrb	r3, [r7, #30]
}
 8005232:	4618      	mov	r0, r3
 8005234:	3720      	adds	r7, #32
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}
 800523a:	bf00      	nop
 800523c:	efff69f3 	.word	0xefff69f3
 8005240:	40013800 	.word	0x40013800
 8005244:	40021000 	.word	0x40021000
 8005248:	40004400 	.word	0x40004400
 800524c:	40004800 	.word	0x40004800
 8005250:	007a1200 	.word	0x007a1200

08005254 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005254:	b480      	push	{r7}
 8005256:	b083      	sub	sp, #12
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005260:	f003 0301 	and.w	r3, r3, #1
 8005264:	2b00      	cmp	r3, #0
 8005266:	d00a      	beq.n	800527e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	430a      	orrs	r2, r1
 800527c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005282:	f003 0302 	and.w	r3, r3, #2
 8005286:	2b00      	cmp	r3, #0
 8005288:	d00a      	beq.n	80052a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	430a      	orrs	r2, r1
 800529e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a4:	f003 0304 	and.w	r3, r3, #4
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d00a      	beq.n	80052c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	430a      	orrs	r2, r1
 80052c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c6:	f003 0308 	and.w	r3, r3, #8
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d00a      	beq.n	80052e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	430a      	orrs	r2, r1
 80052e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e8:	f003 0310 	and.w	r3, r3, #16
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d00a      	beq.n	8005306 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	689b      	ldr	r3, [r3, #8]
 80052f6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	430a      	orrs	r2, r1
 8005304:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800530a:	f003 0320 	and.w	r3, r3, #32
 800530e:	2b00      	cmp	r3, #0
 8005310:	d00a      	beq.n	8005328 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	689b      	ldr	r3, [r3, #8]
 8005318:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	430a      	orrs	r2, r1
 8005326:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800532c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005330:	2b00      	cmp	r3, #0
 8005332:	d01a      	beq.n	800536a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	430a      	orrs	r2, r1
 8005348:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800534e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005352:	d10a      	bne.n	800536a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	430a      	orrs	r2, r1
 8005368:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800536e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005372:	2b00      	cmp	r3, #0
 8005374:	d00a      	beq.n	800538c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	430a      	orrs	r2, r1
 800538a:	605a      	str	r2, [r3, #4]
  }
}
 800538c:	bf00      	nop
 800538e:	370c      	adds	r7, #12
 8005390:	46bd      	mov	sp, r7
 8005392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005396:	4770      	bx	lr

08005398 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b086      	sub	sp, #24
 800539c:	af02      	add	r7, sp, #8
 800539e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2200      	movs	r2, #0
 80053a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80053a8:	f7fc fa36 	bl	8001818 <HAL_GetTick>
 80053ac:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f003 0308 	and.w	r3, r3, #8
 80053b8:	2b08      	cmp	r3, #8
 80053ba:	d10e      	bne.n	80053da <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80053c0:	9300      	str	r3, [sp, #0]
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2200      	movs	r2, #0
 80053c6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f000 f82d 	bl	800542a <UART_WaitOnFlagUntilTimeout>
 80053d0:	4603      	mov	r3, r0
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d001      	beq.n	80053da <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053d6:	2303      	movs	r3, #3
 80053d8:	e023      	b.n	8005422 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f003 0304 	and.w	r3, r3, #4
 80053e4:	2b04      	cmp	r3, #4
 80053e6:	d10e      	bne.n	8005406 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80053ec:	9300      	str	r3, [sp, #0]
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2200      	movs	r2, #0
 80053f2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f000 f817 	bl	800542a <UART_WaitOnFlagUntilTimeout>
 80053fc:	4603      	mov	r3, r0
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d001      	beq.n	8005406 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005402:	2303      	movs	r3, #3
 8005404:	e00d      	b.n	8005422 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2220      	movs	r2, #32
 800540a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2220      	movs	r2, #32
 8005410:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2200      	movs	r2, #0
 8005416:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2200      	movs	r2, #0
 800541c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005420:	2300      	movs	r3, #0
}
 8005422:	4618      	mov	r0, r3
 8005424:	3710      	adds	r7, #16
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}

0800542a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800542a:	b580      	push	{r7, lr}
 800542c:	b09c      	sub	sp, #112	; 0x70
 800542e:	af00      	add	r7, sp, #0
 8005430:	60f8      	str	r0, [r7, #12]
 8005432:	60b9      	str	r1, [r7, #8]
 8005434:	603b      	str	r3, [r7, #0]
 8005436:	4613      	mov	r3, r2
 8005438:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800543a:	e0a5      	b.n	8005588 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800543c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800543e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005442:	f000 80a1 	beq.w	8005588 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005446:	f7fc f9e7 	bl	8001818 <HAL_GetTick>
 800544a:	4602      	mov	r2, r0
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	1ad3      	subs	r3, r2, r3
 8005450:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005452:	429a      	cmp	r2, r3
 8005454:	d302      	bcc.n	800545c <UART_WaitOnFlagUntilTimeout+0x32>
 8005456:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005458:	2b00      	cmp	r3, #0
 800545a:	d13e      	bne.n	80054da <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005462:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005464:	e853 3f00 	ldrex	r3, [r3]
 8005468:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800546a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800546c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005470:	667b      	str	r3, [r7, #100]	; 0x64
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	461a      	mov	r2, r3
 8005478:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800547a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800547c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800547e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005480:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005482:	e841 2300 	strex	r3, r2, [r1]
 8005486:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005488:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800548a:	2b00      	cmp	r3, #0
 800548c:	d1e6      	bne.n	800545c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	3308      	adds	r3, #8
 8005494:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005496:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005498:	e853 3f00 	ldrex	r3, [r3]
 800549c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800549e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054a0:	f023 0301 	bic.w	r3, r3, #1
 80054a4:	663b      	str	r3, [r7, #96]	; 0x60
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	3308      	adds	r3, #8
 80054ac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80054ae:	64ba      	str	r2, [r7, #72]	; 0x48
 80054b0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054b2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80054b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80054b6:	e841 2300 	strex	r3, r2, [r1]
 80054ba:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80054bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d1e5      	bne.n	800548e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2220      	movs	r2, #32
 80054c6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2220      	movs	r2, #32
 80054cc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2200      	movs	r2, #0
 80054d2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80054d6:	2303      	movs	r3, #3
 80054d8:	e067      	b.n	80055aa <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f003 0304 	and.w	r3, r3, #4
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d04f      	beq.n	8005588 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	69db      	ldr	r3, [r3, #28]
 80054ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054f6:	d147      	bne.n	8005588 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005500:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800550a:	e853 3f00 	ldrex	r3, [r3]
 800550e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005512:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005516:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	461a      	mov	r2, r3
 800551e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005520:	637b      	str	r3, [r7, #52]	; 0x34
 8005522:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005524:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005526:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005528:	e841 2300 	strex	r3, r2, [r1]
 800552c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800552e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005530:	2b00      	cmp	r3, #0
 8005532:	d1e6      	bne.n	8005502 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	3308      	adds	r3, #8
 800553a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	e853 3f00 	ldrex	r3, [r3]
 8005542:	613b      	str	r3, [r7, #16]
   return(result);
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	f023 0301 	bic.w	r3, r3, #1
 800554a:	66bb      	str	r3, [r7, #104]	; 0x68
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	3308      	adds	r3, #8
 8005552:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005554:	623a      	str	r2, [r7, #32]
 8005556:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005558:	69f9      	ldr	r1, [r7, #28]
 800555a:	6a3a      	ldr	r2, [r7, #32]
 800555c:	e841 2300 	strex	r3, r2, [r1]
 8005560:	61bb      	str	r3, [r7, #24]
   return(result);
 8005562:	69bb      	ldr	r3, [r7, #24]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d1e5      	bne.n	8005534 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2220      	movs	r2, #32
 800556c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2220      	movs	r2, #32
 8005572:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2220      	movs	r2, #32
 8005578:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	2200      	movs	r2, #0
 8005580:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005584:	2303      	movs	r3, #3
 8005586:	e010      	b.n	80055aa <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	69da      	ldr	r2, [r3, #28]
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	4013      	ands	r3, r2
 8005592:	68ba      	ldr	r2, [r7, #8]
 8005594:	429a      	cmp	r2, r3
 8005596:	bf0c      	ite	eq
 8005598:	2301      	moveq	r3, #1
 800559a:	2300      	movne	r3, #0
 800559c:	b2db      	uxtb	r3, r3
 800559e:	461a      	mov	r2, r3
 80055a0:	79fb      	ldrb	r3, [r7, #7]
 80055a2:	429a      	cmp	r2, r3
 80055a4:	f43f af4a 	beq.w	800543c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80055a8:	2300      	movs	r3, #0
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	3770      	adds	r7, #112	; 0x70
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}

080055b2 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80055b2:	b480      	push	{r7}
 80055b4:	b085      	sub	sp, #20
 80055b6:	af00      	add	r7, sp, #0
 80055b8:	4603      	mov	r3, r0
 80055ba:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80055bc:	2300      	movs	r3, #0
 80055be:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80055c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80055c4:	2b84      	cmp	r3, #132	; 0x84
 80055c6:	d005      	beq.n	80055d4 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80055c8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	4413      	add	r3, r2
 80055d0:	3303      	adds	r3, #3
 80055d2:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80055d4:	68fb      	ldr	r3, [r7, #12]
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3714      	adds	r7, #20
 80055da:	46bd      	mov	sp, r7
 80055dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e0:	4770      	bx	lr

080055e2 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80055e2:	b480      	push	{r7}
 80055e4:	b083      	sub	sp, #12
 80055e6:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80055e8:	f3ef 8305 	mrs	r3, IPSR
 80055ec:	607b      	str	r3, [r7, #4]
  return(result);
 80055ee:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	bf14      	ite	ne
 80055f4:	2301      	movne	r3, #1
 80055f6:	2300      	moveq	r3, #0
 80055f8:	b2db      	uxtb	r3, r3
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	370c      	adds	r7, #12
 80055fe:	46bd      	mov	sp, r7
 8005600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005604:	4770      	bx	lr

08005606 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005606:	b580      	push	{r7, lr}
 8005608:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800560a:	f000 fb49 	bl	8005ca0 <vTaskStartScheduler>
  
  return osOK;
 800560e:	2300      	movs	r3, #0
}
 8005610:	4618      	mov	r0, r3
 8005612:	bd80      	pop	{r7, pc}

08005614 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8005618:	f7ff ffe3 	bl	80055e2 <inHandlerMode>
 800561c:	4603      	mov	r3, r0
 800561e:	2b00      	cmp	r3, #0
 8005620:	d003      	beq.n	800562a <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8005622:	f000 fc61 	bl	8005ee8 <xTaskGetTickCountFromISR>
 8005626:	4603      	mov	r3, r0
 8005628:	e002      	b.n	8005630 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800562a:	f000 fc4d 	bl	8005ec8 <xTaskGetTickCount>
 800562e:	4603      	mov	r3, r0
  }
}
 8005630:	4618      	mov	r0, r3
 8005632:	bd80      	pop	{r7, pc}

08005634 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005634:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005636:	b089      	sub	sp, #36	; 0x24
 8005638:	af04      	add	r7, sp, #16
 800563a:	6078      	str	r0, [r7, #4]
 800563c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	695b      	ldr	r3, [r3, #20]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d020      	beq.n	8005688 <osThreadCreate+0x54>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	699b      	ldr	r3, [r3, #24]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d01c      	beq.n	8005688 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	685c      	ldr	r4, [r3, #4]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681d      	ldr	r5, [r3, #0]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	691e      	ldr	r6, [r3, #16]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005660:	4618      	mov	r0, r3
 8005662:	f7ff ffa6 	bl	80055b2 <makeFreeRtosPriority>
 8005666:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	695b      	ldr	r3, [r3, #20]
 800566c:	687a      	ldr	r2, [r7, #4]
 800566e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005670:	9202      	str	r2, [sp, #8]
 8005672:	9301      	str	r3, [sp, #4]
 8005674:	9100      	str	r1, [sp, #0]
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	4632      	mov	r2, r6
 800567a:	4629      	mov	r1, r5
 800567c:	4620      	mov	r0, r4
 800567e:	f000 f8ef 	bl	8005860 <xTaskCreateStatic>
 8005682:	4603      	mov	r3, r0
 8005684:	60fb      	str	r3, [r7, #12]
 8005686:	e01c      	b.n	80056c2 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	685c      	ldr	r4, [r3, #4]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005694:	b29e      	uxth	r6, r3
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800569c:	4618      	mov	r0, r3
 800569e:	f7ff ff88 	bl	80055b2 <makeFreeRtosPriority>
 80056a2:	4602      	mov	r2, r0
 80056a4:	f107 030c 	add.w	r3, r7, #12
 80056a8:	9301      	str	r3, [sp, #4]
 80056aa:	9200      	str	r2, [sp, #0]
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	4632      	mov	r2, r6
 80056b0:	4629      	mov	r1, r5
 80056b2:	4620      	mov	r0, r4
 80056b4:	f000 f930 	bl	8005918 <xTaskCreate>
 80056b8:	4603      	mov	r3, r0
 80056ba:	2b01      	cmp	r3, #1
 80056bc:	d001      	beq.n	80056c2 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80056be:	2300      	movs	r3, #0
 80056c0:	e000      	b.n	80056c4 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80056c2:	68fb      	ldr	r3, [r7, #12]
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	3714      	adds	r7, #20
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

080056cc <osDelayUntil>:
*          prior to its first use (PreviousWakeTime = osKernelSysTick() )
* @param   millisec    time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelayUntil (uint32_t *PreviousWakeTime, uint32_t millisec)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b084      	sub	sp, #16
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
 80056d4:	6039      	str	r1, [r7, #0]
#if INCLUDE_vTaskDelayUntil
  TickType_t ticks = (millisec / portTICK_PERIOD_MS);
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	60fb      	str	r3, [r7, #12]
  vTaskDelayUntil((TickType_t *) PreviousWakeTime, ticks ? ticks : 1);
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d001      	beq.n	80056e4 <osDelayUntil+0x18>
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	e000      	b.n	80056e6 <osDelayUntil+0x1a>
 80056e4:	2301      	movs	r3, #1
 80056e6:	4619      	mov	r1, r3
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f000 fa5b 	bl	8005ba4 <vTaskDelayUntil>
  
  return osOK;
 80056ee:	2300      	movs	r3, #0
  (void) millisec;
  (void) PreviousWakeTime;
  
  return osErrorResource;
#endif
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	3710      	adds	r7, #16
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}

080056f8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80056f8:	b480      	push	{r7}
 80056fa:	b083      	sub	sp, #12
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	f103 0208 	add.w	r2, r3, #8
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	f04f 32ff 	mov.w	r2, #4294967295
 8005710:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	f103 0208 	add.w	r2, r3, #8
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	f103 0208 	add.w	r2, r3, #8
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2200      	movs	r2, #0
 800572a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800572c:	bf00      	nop
 800572e:	370c      	adds	r7, #12
 8005730:	46bd      	mov	sp, r7
 8005732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005736:	4770      	bx	lr

08005738 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005738:	b480      	push	{r7}
 800573a:	b083      	sub	sp, #12
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2200      	movs	r2, #0
 8005744:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005746:	bf00      	nop
 8005748:	370c      	adds	r7, #12
 800574a:	46bd      	mov	sp, r7
 800574c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005750:	4770      	bx	lr

08005752 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005752:	b480      	push	{r7}
 8005754:	b085      	sub	sp, #20
 8005756:	af00      	add	r7, sp, #0
 8005758:	6078      	str	r0, [r7, #4]
 800575a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	68fa      	ldr	r2, [r7, #12]
 8005766:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	689a      	ldr	r2, [r3, #8]
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	689b      	ldr	r3, [r3, #8]
 8005774:	683a      	ldr	r2, [r7, #0]
 8005776:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	683a      	ldr	r2, [r7, #0]
 800577c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	687a      	ldr	r2, [r7, #4]
 8005782:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	1c5a      	adds	r2, r3, #1
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	601a      	str	r2, [r3, #0]
}
 800578e:	bf00      	nop
 8005790:	3714      	adds	r7, #20
 8005792:	46bd      	mov	sp, r7
 8005794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005798:	4770      	bx	lr

0800579a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800579a:	b480      	push	{r7}
 800579c:	b085      	sub	sp, #20
 800579e:	af00      	add	r7, sp, #0
 80057a0:	6078      	str	r0, [r7, #4]
 80057a2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057b0:	d103      	bne.n	80057ba <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	691b      	ldr	r3, [r3, #16]
 80057b6:	60fb      	str	r3, [r7, #12]
 80057b8:	e00c      	b.n	80057d4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	3308      	adds	r3, #8
 80057be:	60fb      	str	r3, [r7, #12]
 80057c0:	e002      	b.n	80057c8 <vListInsert+0x2e>
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	60fb      	str	r3, [r7, #12]
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	68ba      	ldr	r2, [r7, #8]
 80057d0:	429a      	cmp	r2, r3
 80057d2:	d2f6      	bcs.n	80057c2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	685a      	ldr	r2, [r3, #4]
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	683a      	ldr	r2, [r7, #0]
 80057e2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	68fa      	ldr	r2, [r7, #12]
 80057e8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	683a      	ldr	r2, [r7, #0]
 80057ee:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	687a      	ldr	r2, [r7, #4]
 80057f4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	1c5a      	adds	r2, r3, #1
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	601a      	str	r2, [r3, #0]
}
 8005800:	bf00      	nop
 8005802:	3714      	adds	r7, #20
 8005804:	46bd      	mov	sp, r7
 8005806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580a:	4770      	bx	lr

0800580c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800580c:	b480      	push	{r7}
 800580e:	b085      	sub	sp, #20
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	691b      	ldr	r3, [r3, #16]
 8005818:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	687a      	ldr	r2, [r7, #4]
 8005820:	6892      	ldr	r2, [r2, #8]
 8005822:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	689b      	ldr	r3, [r3, #8]
 8005828:	687a      	ldr	r2, [r7, #4]
 800582a:	6852      	ldr	r2, [r2, #4]
 800582c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	687a      	ldr	r2, [r7, #4]
 8005834:	429a      	cmp	r2, r3
 8005836:	d103      	bne.n	8005840 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	689a      	ldr	r2, [r3, #8]
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2200      	movs	r2, #0
 8005844:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	1e5a      	subs	r2, r3, #1
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
}
 8005854:	4618      	mov	r0, r3
 8005856:	3714      	adds	r7, #20
 8005858:	46bd      	mov	sp, r7
 800585a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585e:	4770      	bx	lr

08005860 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005860:	b580      	push	{r7, lr}
 8005862:	b08e      	sub	sp, #56	; 0x38
 8005864:	af04      	add	r7, sp, #16
 8005866:	60f8      	str	r0, [r7, #12]
 8005868:	60b9      	str	r1, [r7, #8]
 800586a:	607a      	str	r2, [r7, #4]
 800586c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800586e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005870:	2b00      	cmp	r3, #0
 8005872:	d10a      	bne.n	800588a <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005878:	f383 8811 	msr	BASEPRI, r3
 800587c:	f3bf 8f6f 	isb	sy
 8005880:	f3bf 8f4f 	dsb	sy
 8005884:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005886:	bf00      	nop
 8005888:	e7fe      	b.n	8005888 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800588a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800588c:	2b00      	cmp	r3, #0
 800588e:	d10a      	bne.n	80058a6 <xTaskCreateStatic+0x46>
	__asm volatile
 8005890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005894:	f383 8811 	msr	BASEPRI, r3
 8005898:	f3bf 8f6f 	isb	sy
 800589c:	f3bf 8f4f 	dsb	sy
 80058a0:	61fb      	str	r3, [r7, #28]
}
 80058a2:	bf00      	nop
 80058a4:	e7fe      	b.n	80058a4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80058a6:	23b4      	movs	r3, #180	; 0xb4
 80058a8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	2bb4      	cmp	r3, #180	; 0xb4
 80058ae:	d00a      	beq.n	80058c6 <xTaskCreateStatic+0x66>
	__asm volatile
 80058b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058b4:	f383 8811 	msr	BASEPRI, r3
 80058b8:	f3bf 8f6f 	isb	sy
 80058bc:	f3bf 8f4f 	dsb	sy
 80058c0:	61bb      	str	r3, [r7, #24]
}
 80058c2:	bf00      	nop
 80058c4:	e7fe      	b.n	80058c4 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80058c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d01e      	beq.n	800590a <xTaskCreateStatic+0xaa>
 80058cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d01b      	beq.n	800590a <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80058d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058d4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80058d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80058da:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80058dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058de:	2202      	movs	r2, #2
 80058e0:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80058e4:	2300      	movs	r3, #0
 80058e6:	9303      	str	r3, [sp, #12]
 80058e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ea:	9302      	str	r3, [sp, #8]
 80058ec:	f107 0314 	add.w	r3, r7, #20
 80058f0:	9301      	str	r3, [sp, #4]
 80058f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058f4:	9300      	str	r3, [sp, #0]
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	687a      	ldr	r2, [r7, #4]
 80058fa:	68b9      	ldr	r1, [r7, #8]
 80058fc:	68f8      	ldr	r0, [r7, #12]
 80058fe:	f000 f851 	bl	80059a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005902:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005904:	f000 f8e4 	bl	8005ad0 <prvAddNewTaskToReadyList>
 8005908:	e001      	b.n	800590e <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800590a:	2300      	movs	r3, #0
 800590c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800590e:	697b      	ldr	r3, [r7, #20]
	}
 8005910:	4618      	mov	r0, r3
 8005912:	3728      	adds	r7, #40	; 0x28
 8005914:	46bd      	mov	sp, r7
 8005916:	bd80      	pop	{r7, pc}

08005918 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005918:	b580      	push	{r7, lr}
 800591a:	b08c      	sub	sp, #48	; 0x30
 800591c:	af04      	add	r7, sp, #16
 800591e:	60f8      	str	r0, [r7, #12]
 8005920:	60b9      	str	r1, [r7, #8]
 8005922:	603b      	str	r3, [r7, #0]
 8005924:	4613      	mov	r3, r2
 8005926:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005928:	88fb      	ldrh	r3, [r7, #6]
 800592a:	009b      	lsls	r3, r3, #2
 800592c:	4618      	mov	r0, r3
 800592e:	f000 ffa3 	bl	8006878 <pvPortMalloc>
 8005932:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d00e      	beq.n	8005958 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800593a:	20b4      	movs	r0, #180	; 0xb4
 800593c:	f000 ff9c 	bl	8006878 <pvPortMalloc>
 8005940:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005942:	69fb      	ldr	r3, [r7, #28]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d003      	beq.n	8005950 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005948:	69fb      	ldr	r3, [r7, #28]
 800594a:	697a      	ldr	r2, [r7, #20]
 800594c:	631a      	str	r2, [r3, #48]	; 0x30
 800594e:	e005      	b.n	800595c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005950:	6978      	ldr	r0, [r7, #20]
 8005952:	f001 f855 	bl	8006a00 <vPortFree>
 8005956:	e001      	b.n	800595c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005958:	2300      	movs	r3, #0
 800595a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800595c:	69fb      	ldr	r3, [r7, #28]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d017      	beq.n	8005992 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005962:	69fb      	ldr	r3, [r7, #28]
 8005964:	2200      	movs	r2, #0
 8005966:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800596a:	88fa      	ldrh	r2, [r7, #6]
 800596c:	2300      	movs	r3, #0
 800596e:	9303      	str	r3, [sp, #12]
 8005970:	69fb      	ldr	r3, [r7, #28]
 8005972:	9302      	str	r3, [sp, #8]
 8005974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005976:	9301      	str	r3, [sp, #4]
 8005978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800597a:	9300      	str	r3, [sp, #0]
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	68b9      	ldr	r1, [r7, #8]
 8005980:	68f8      	ldr	r0, [r7, #12]
 8005982:	f000 f80f 	bl	80059a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005986:	69f8      	ldr	r0, [r7, #28]
 8005988:	f000 f8a2 	bl	8005ad0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800598c:	2301      	movs	r3, #1
 800598e:	61bb      	str	r3, [r7, #24]
 8005990:	e002      	b.n	8005998 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005992:	f04f 33ff 	mov.w	r3, #4294967295
 8005996:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005998:	69bb      	ldr	r3, [r7, #24]
	}
 800599a:	4618      	mov	r0, r3
 800599c:	3720      	adds	r7, #32
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}
	...

080059a4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b088      	sub	sp, #32
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	60f8      	str	r0, [r7, #12]
 80059ac:	60b9      	str	r1, [r7, #8]
 80059ae:	607a      	str	r2, [r7, #4]
 80059b0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80059b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80059bc:	3b01      	subs	r3, #1
 80059be:	009b      	lsls	r3, r3, #2
 80059c0:	4413      	add	r3, r2
 80059c2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80059c4:	69bb      	ldr	r3, [r7, #24]
 80059c6:	f023 0307 	bic.w	r3, r3, #7
 80059ca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80059cc:	69bb      	ldr	r3, [r7, #24]
 80059ce:	f003 0307 	and.w	r3, r3, #7
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d00a      	beq.n	80059ec <prvInitialiseNewTask+0x48>
	__asm volatile
 80059d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059da:	f383 8811 	msr	BASEPRI, r3
 80059de:	f3bf 8f6f 	isb	sy
 80059e2:	f3bf 8f4f 	dsb	sy
 80059e6:	617b      	str	r3, [r7, #20]
}
 80059e8:	bf00      	nop
 80059ea:	e7fe      	b.n	80059ea <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80059ec:	2300      	movs	r3, #0
 80059ee:	61fb      	str	r3, [r7, #28]
 80059f0:	e012      	b.n	8005a18 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80059f2:	68ba      	ldr	r2, [r7, #8]
 80059f4:	69fb      	ldr	r3, [r7, #28]
 80059f6:	4413      	add	r3, r2
 80059f8:	7819      	ldrb	r1, [r3, #0]
 80059fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059fc:	69fb      	ldr	r3, [r7, #28]
 80059fe:	4413      	add	r3, r2
 8005a00:	3334      	adds	r3, #52	; 0x34
 8005a02:	460a      	mov	r2, r1
 8005a04:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005a06:	68ba      	ldr	r2, [r7, #8]
 8005a08:	69fb      	ldr	r3, [r7, #28]
 8005a0a:	4413      	add	r3, r2
 8005a0c:	781b      	ldrb	r3, [r3, #0]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d006      	beq.n	8005a20 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005a12:	69fb      	ldr	r3, [r7, #28]
 8005a14:	3301      	adds	r3, #1
 8005a16:	61fb      	str	r3, [r7, #28]
 8005a18:	69fb      	ldr	r3, [r7, #28]
 8005a1a:	2b0f      	cmp	r3, #15
 8005a1c:	d9e9      	bls.n	80059f2 <prvInitialiseNewTask+0x4e>
 8005a1e:	e000      	b.n	8005a22 <prvInitialiseNewTask+0x7e>
		{
			break;
 8005a20:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a24:	2200      	movs	r2, #0
 8005a26:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a2c:	2b06      	cmp	r3, #6
 8005a2e:	d901      	bls.n	8005a34 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005a30:	2306      	movs	r3, #6
 8005a32:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a38:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a3e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a42:	2200      	movs	r2, #0
 8005a44:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a48:	3304      	adds	r3, #4
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f7ff fe74 	bl	8005738 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a52:	3318      	adds	r3, #24
 8005a54:	4618      	mov	r0, r3
 8005a56:	f7ff fe6f 	bl	8005738 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a5e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a62:	f1c3 0207 	rsb	r2, r3, #7
 8005a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a68:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a6e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a72:	2200      	movs	r2, #0
 8005a74:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a82:	334c      	adds	r3, #76	; 0x4c
 8005a84:	2260      	movs	r2, #96	; 0x60
 8005a86:	2100      	movs	r1, #0
 8005a88:	4618      	mov	r0, r3
 8005a8a:	f001 f8f5 	bl	8006c78 <memset>
 8005a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a90:	4a0c      	ldr	r2, [pc, #48]	; (8005ac4 <prvInitialiseNewTask+0x120>)
 8005a92:	651a      	str	r2, [r3, #80]	; 0x50
 8005a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a96:	4a0c      	ldr	r2, [pc, #48]	; (8005ac8 <prvInitialiseNewTask+0x124>)
 8005a98:	655a      	str	r2, [r3, #84]	; 0x54
 8005a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a9c:	4a0b      	ldr	r2, [pc, #44]	; (8005acc <prvInitialiseNewTask+0x128>)
 8005a9e:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005aa0:	683a      	ldr	r2, [r7, #0]
 8005aa2:	68f9      	ldr	r1, [r7, #12]
 8005aa4:	69b8      	ldr	r0, [r7, #24]
 8005aa6:	f000 fc97 	bl	80063d8 <pxPortInitialiseStack>
 8005aaa:	4602      	mov	r2, r0
 8005aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aae:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d002      	beq.n	8005abc <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ab8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005aba:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005abc:	bf00      	nop
 8005abe:	3720      	adds	r7, #32
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd80      	pop	{r7, pc}
 8005ac4:	08006eb4 	.word	0x08006eb4
 8005ac8:	08006ed4 	.word	0x08006ed4
 8005acc:	08006e94 	.word	0x08006e94

08005ad0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b082      	sub	sp, #8
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005ad8:	f000 fdac 	bl	8006634 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005adc:	4b2a      	ldr	r3, [pc, #168]	; (8005b88 <prvAddNewTaskToReadyList+0xb8>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	3301      	adds	r3, #1
 8005ae2:	4a29      	ldr	r2, [pc, #164]	; (8005b88 <prvAddNewTaskToReadyList+0xb8>)
 8005ae4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005ae6:	4b29      	ldr	r3, [pc, #164]	; (8005b8c <prvAddNewTaskToReadyList+0xbc>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d109      	bne.n	8005b02 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005aee:	4a27      	ldr	r2, [pc, #156]	; (8005b8c <prvAddNewTaskToReadyList+0xbc>)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005af4:	4b24      	ldr	r3, [pc, #144]	; (8005b88 <prvAddNewTaskToReadyList+0xb8>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	2b01      	cmp	r3, #1
 8005afa:	d110      	bne.n	8005b1e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005afc:	f000 fb3e 	bl	800617c <prvInitialiseTaskLists>
 8005b00:	e00d      	b.n	8005b1e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005b02:	4b23      	ldr	r3, [pc, #140]	; (8005b90 <prvAddNewTaskToReadyList+0xc0>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d109      	bne.n	8005b1e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005b0a:	4b20      	ldr	r3, [pc, #128]	; (8005b8c <prvAddNewTaskToReadyList+0xbc>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b14:	429a      	cmp	r2, r3
 8005b16:	d802      	bhi.n	8005b1e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005b18:	4a1c      	ldr	r2, [pc, #112]	; (8005b8c <prvAddNewTaskToReadyList+0xbc>)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005b1e:	4b1d      	ldr	r3, [pc, #116]	; (8005b94 <prvAddNewTaskToReadyList+0xc4>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	3301      	adds	r3, #1
 8005b24:	4a1b      	ldr	r2, [pc, #108]	; (8005b94 <prvAddNewTaskToReadyList+0xc4>)
 8005b26:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b2c:	2201      	movs	r2, #1
 8005b2e:	409a      	lsls	r2, r3
 8005b30:	4b19      	ldr	r3, [pc, #100]	; (8005b98 <prvAddNewTaskToReadyList+0xc8>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4313      	orrs	r3, r2
 8005b36:	4a18      	ldr	r2, [pc, #96]	; (8005b98 <prvAddNewTaskToReadyList+0xc8>)
 8005b38:	6013      	str	r3, [r2, #0]
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b3e:	4613      	mov	r3, r2
 8005b40:	009b      	lsls	r3, r3, #2
 8005b42:	4413      	add	r3, r2
 8005b44:	009b      	lsls	r3, r3, #2
 8005b46:	4a15      	ldr	r2, [pc, #84]	; (8005b9c <prvAddNewTaskToReadyList+0xcc>)
 8005b48:	441a      	add	r2, r3
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	3304      	adds	r3, #4
 8005b4e:	4619      	mov	r1, r3
 8005b50:	4610      	mov	r0, r2
 8005b52:	f7ff fdfe 	bl	8005752 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005b56:	f000 fd9d 	bl	8006694 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005b5a:	4b0d      	ldr	r3, [pc, #52]	; (8005b90 <prvAddNewTaskToReadyList+0xc0>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d00e      	beq.n	8005b80 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005b62:	4b0a      	ldr	r3, [pc, #40]	; (8005b8c <prvAddNewTaskToReadyList+0xbc>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	d207      	bcs.n	8005b80 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005b70:	4b0b      	ldr	r3, [pc, #44]	; (8005ba0 <prvAddNewTaskToReadyList+0xd0>)
 8005b72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b76:	601a      	str	r2, [r3, #0]
 8005b78:	f3bf 8f4f 	dsb	sy
 8005b7c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005b80:	bf00      	nop
 8005b82:	3708      	adds	r7, #8
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}
 8005b88:	200005e8 	.word	0x200005e8
 8005b8c:	200004e8 	.word	0x200004e8
 8005b90:	200005f4 	.word	0x200005f4
 8005b94:	20000604 	.word	0x20000604
 8005b98:	200005f0 	.word	0x200005f0
 8005b9c:	200004ec 	.word	0x200004ec
 8005ba0:	e000ed04 	.word	0xe000ed04

08005ba4 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b08a      	sub	sp, #40	; 0x28
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
 8005bac:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8005bae:	2300      	movs	r3, #0
 8005bb0:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d10a      	bne.n	8005bce <vTaskDelayUntil+0x2a>
	__asm volatile
 8005bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bbc:	f383 8811 	msr	BASEPRI, r3
 8005bc0:	f3bf 8f6f 	isb	sy
 8005bc4:	f3bf 8f4f 	dsb	sy
 8005bc8:	617b      	str	r3, [r7, #20]
}
 8005bca:	bf00      	nop
 8005bcc:	e7fe      	b.n	8005bcc <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d10a      	bne.n	8005bea <vTaskDelayUntil+0x46>
	__asm volatile
 8005bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bd8:	f383 8811 	msr	BASEPRI, r3
 8005bdc:	f3bf 8f6f 	isb	sy
 8005be0:	f3bf 8f4f 	dsb	sy
 8005be4:	613b      	str	r3, [r7, #16]
}
 8005be6:	bf00      	nop
 8005be8:	e7fe      	b.n	8005be8 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8005bea:	4b2a      	ldr	r3, [pc, #168]	; (8005c94 <vTaskDelayUntil+0xf0>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d00a      	beq.n	8005c08 <vTaskDelayUntil+0x64>
	__asm volatile
 8005bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bf6:	f383 8811 	msr	BASEPRI, r3
 8005bfa:	f3bf 8f6f 	isb	sy
 8005bfe:	f3bf 8f4f 	dsb	sy
 8005c02:	60fb      	str	r3, [r7, #12]
}
 8005c04:	bf00      	nop
 8005c06:	e7fe      	b.n	8005c06 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8005c08:	f000 f8b4 	bl	8005d74 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8005c0c:	4b22      	ldr	r3, [pc, #136]	; (8005c98 <vTaskDelayUntil+0xf4>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	683a      	ldr	r2, [r7, #0]
 8005c18:	4413      	add	r3, r2
 8005c1a:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	6a3a      	ldr	r2, [r7, #32]
 8005c22:	429a      	cmp	r2, r3
 8005c24:	d20b      	bcs.n	8005c3e <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	69fa      	ldr	r2, [r7, #28]
 8005c2c:	429a      	cmp	r2, r3
 8005c2e:	d211      	bcs.n	8005c54 <vTaskDelayUntil+0xb0>
 8005c30:	69fa      	ldr	r2, [r7, #28]
 8005c32:	6a3b      	ldr	r3, [r7, #32]
 8005c34:	429a      	cmp	r2, r3
 8005c36:	d90d      	bls.n	8005c54 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8005c38:	2301      	movs	r3, #1
 8005c3a:	627b      	str	r3, [r7, #36]	; 0x24
 8005c3c:	e00a      	b.n	8005c54 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	69fa      	ldr	r2, [r7, #28]
 8005c44:	429a      	cmp	r2, r3
 8005c46:	d303      	bcc.n	8005c50 <vTaskDelayUntil+0xac>
 8005c48:	69fa      	ldr	r2, [r7, #28]
 8005c4a:	6a3b      	ldr	r3, [r7, #32]
 8005c4c:	429a      	cmp	r2, r3
 8005c4e:	d901      	bls.n	8005c54 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8005c50:	2301      	movs	r3, #1
 8005c52:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	69fa      	ldr	r2, [r7, #28]
 8005c58:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8005c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d006      	beq.n	8005c6e <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8005c60:	69fa      	ldr	r2, [r7, #28]
 8005c62:	6a3b      	ldr	r3, [r7, #32]
 8005c64:	1ad3      	subs	r3, r2, r3
 8005c66:	2100      	movs	r1, #0
 8005c68:	4618      	mov	r0, r3
 8005c6a:	f000 fb4f 	bl	800630c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8005c6e:	f000 f88f 	bl	8005d90 <xTaskResumeAll>
 8005c72:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005c74:	69bb      	ldr	r3, [r7, #24]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d107      	bne.n	8005c8a <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8005c7a:	4b08      	ldr	r3, [pc, #32]	; (8005c9c <vTaskDelayUntil+0xf8>)
 8005c7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c80:	601a      	str	r2, [r3, #0]
 8005c82:	f3bf 8f4f 	dsb	sy
 8005c86:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005c8a:	bf00      	nop
 8005c8c:	3728      	adds	r7, #40	; 0x28
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}
 8005c92:	bf00      	nop
 8005c94:	20000610 	.word	0x20000610
 8005c98:	200005ec 	.word	0x200005ec
 8005c9c:	e000ed04 	.word	0xe000ed04

08005ca0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b08a      	sub	sp, #40	; 0x28
 8005ca4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005caa:	2300      	movs	r3, #0
 8005cac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005cae:	463a      	mov	r2, r7
 8005cb0:	1d39      	adds	r1, r7, #4
 8005cb2:	f107 0308 	add.w	r3, r7, #8
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f7fa fe20 	bl	80008fc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005cbc:	6839      	ldr	r1, [r7, #0]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	68ba      	ldr	r2, [r7, #8]
 8005cc2:	9202      	str	r2, [sp, #8]
 8005cc4:	9301      	str	r3, [sp, #4]
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	9300      	str	r3, [sp, #0]
 8005cca:	2300      	movs	r3, #0
 8005ccc:	460a      	mov	r2, r1
 8005cce:	4921      	ldr	r1, [pc, #132]	; (8005d54 <vTaskStartScheduler+0xb4>)
 8005cd0:	4821      	ldr	r0, [pc, #132]	; (8005d58 <vTaskStartScheduler+0xb8>)
 8005cd2:	f7ff fdc5 	bl	8005860 <xTaskCreateStatic>
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	4a20      	ldr	r2, [pc, #128]	; (8005d5c <vTaskStartScheduler+0xbc>)
 8005cda:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005cdc:	4b1f      	ldr	r3, [pc, #124]	; (8005d5c <vTaskStartScheduler+0xbc>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d002      	beq.n	8005cea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	617b      	str	r3, [r7, #20]
 8005ce8:	e001      	b.n	8005cee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005cea:	2300      	movs	r3, #0
 8005cec:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	d11b      	bne.n	8005d2c <vTaskStartScheduler+0x8c>
	__asm volatile
 8005cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cf8:	f383 8811 	msr	BASEPRI, r3
 8005cfc:	f3bf 8f6f 	isb	sy
 8005d00:	f3bf 8f4f 	dsb	sy
 8005d04:	613b      	str	r3, [r7, #16]
}
 8005d06:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005d08:	4b15      	ldr	r3, [pc, #84]	; (8005d60 <vTaskStartScheduler+0xc0>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	334c      	adds	r3, #76	; 0x4c
 8005d0e:	4a15      	ldr	r2, [pc, #84]	; (8005d64 <vTaskStartScheduler+0xc4>)
 8005d10:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005d12:	4b15      	ldr	r3, [pc, #84]	; (8005d68 <vTaskStartScheduler+0xc8>)
 8005d14:	f04f 32ff 	mov.w	r2, #4294967295
 8005d18:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005d1a:	4b14      	ldr	r3, [pc, #80]	; (8005d6c <vTaskStartScheduler+0xcc>)
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005d20:	4b13      	ldr	r3, [pc, #76]	; (8005d70 <vTaskStartScheduler+0xd0>)
 8005d22:	2200      	movs	r2, #0
 8005d24:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005d26:	f000 fbe3 	bl	80064f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005d2a:	e00e      	b.n	8005d4a <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d32:	d10a      	bne.n	8005d4a <vTaskStartScheduler+0xaa>
	__asm volatile
 8005d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d38:	f383 8811 	msr	BASEPRI, r3
 8005d3c:	f3bf 8f6f 	isb	sy
 8005d40:	f3bf 8f4f 	dsb	sy
 8005d44:	60fb      	str	r3, [r7, #12]
}
 8005d46:	bf00      	nop
 8005d48:	e7fe      	b.n	8005d48 <vTaskStartScheduler+0xa8>
}
 8005d4a:	bf00      	nop
 8005d4c:	3718      	adds	r7, #24
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}
 8005d52:	bf00      	nop
 8005d54:	08006e54 	.word	0x08006e54
 8005d58:	0800614d 	.word	0x0800614d
 8005d5c:	2000060c 	.word	0x2000060c
 8005d60:	200004e8 	.word	0x200004e8
 8005d64:	20000010 	.word	0x20000010
 8005d68:	20000608 	.word	0x20000608
 8005d6c:	200005f4 	.word	0x200005f4
 8005d70:	200005ec 	.word	0x200005ec

08005d74 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005d74:	b480      	push	{r7}
 8005d76:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005d78:	4b04      	ldr	r3, [pc, #16]	; (8005d8c <vTaskSuspendAll+0x18>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	3301      	adds	r3, #1
 8005d7e:	4a03      	ldr	r2, [pc, #12]	; (8005d8c <vTaskSuspendAll+0x18>)
 8005d80:	6013      	str	r3, [r2, #0]
}
 8005d82:	bf00      	nop
 8005d84:	46bd      	mov	sp, r7
 8005d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8a:	4770      	bx	lr
 8005d8c:	20000610 	.word	0x20000610

08005d90 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b084      	sub	sp, #16
 8005d94:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005d96:	2300      	movs	r3, #0
 8005d98:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005d9e:	4b41      	ldr	r3, [pc, #260]	; (8005ea4 <xTaskResumeAll+0x114>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d10a      	bne.n	8005dbc <xTaskResumeAll+0x2c>
	__asm volatile
 8005da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005daa:	f383 8811 	msr	BASEPRI, r3
 8005dae:	f3bf 8f6f 	isb	sy
 8005db2:	f3bf 8f4f 	dsb	sy
 8005db6:	603b      	str	r3, [r7, #0]
}
 8005db8:	bf00      	nop
 8005dba:	e7fe      	b.n	8005dba <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005dbc:	f000 fc3a 	bl	8006634 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005dc0:	4b38      	ldr	r3, [pc, #224]	; (8005ea4 <xTaskResumeAll+0x114>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	3b01      	subs	r3, #1
 8005dc6:	4a37      	ldr	r2, [pc, #220]	; (8005ea4 <xTaskResumeAll+0x114>)
 8005dc8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005dca:	4b36      	ldr	r3, [pc, #216]	; (8005ea4 <xTaskResumeAll+0x114>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d161      	bne.n	8005e96 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005dd2:	4b35      	ldr	r3, [pc, #212]	; (8005ea8 <xTaskResumeAll+0x118>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d05d      	beq.n	8005e96 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005dda:	e02e      	b.n	8005e3a <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005ddc:	4b33      	ldr	r3, [pc, #204]	; (8005eac <xTaskResumeAll+0x11c>)
 8005dde:	68db      	ldr	r3, [r3, #12]
 8005de0:	68db      	ldr	r3, [r3, #12]
 8005de2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	3318      	adds	r3, #24
 8005de8:	4618      	mov	r0, r3
 8005dea:	f7ff fd0f 	bl	800580c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	3304      	adds	r3, #4
 8005df2:	4618      	mov	r0, r3
 8005df4:	f7ff fd0a 	bl	800580c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dfc:	2201      	movs	r2, #1
 8005dfe:	409a      	lsls	r2, r3
 8005e00:	4b2b      	ldr	r3, [pc, #172]	; (8005eb0 <xTaskResumeAll+0x120>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4313      	orrs	r3, r2
 8005e06:	4a2a      	ldr	r2, [pc, #168]	; (8005eb0 <xTaskResumeAll+0x120>)
 8005e08:	6013      	str	r3, [r2, #0]
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e0e:	4613      	mov	r3, r2
 8005e10:	009b      	lsls	r3, r3, #2
 8005e12:	4413      	add	r3, r2
 8005e14:	009b      	lsls	r3, r3, #2
 8005e16:	4a27      	ldr	r2, [pc, #156]	; (8005eb4 <xTaskResumeAll+0x124>)
 8005e18:	441a      	add	r2, r3
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	3304      	adds	r3, #4
 8005e1e:	4619      	mov	r1, r3
 8005e20:	4610      	mov	r0, r2
 8005e22:	f7ff fc96 	bl	8005752 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e2a:	4b23      	ldr	r3, [pc, #140]	; (8005eb8 <xTaskResumeAll+0x128>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e30:	429a      	cmp	r2, r3
 8005e32:	d302      	bcc.n	8005e3a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005e34:	4b21      	ldr	r3, [pc, #132]	; (8005ebc <xTaskResumeAll+0x12c>)
 8005e36:	2201      	movs	r2, #1
 8005e38:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005e3a:	4b1c      	ldr	r3, [pc, #112]	; (8005eac <xTaskResumeAll+0x11c>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d1cc      	bne.n	8005ddc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d001      	beq.n	8005e4c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005e48:	f000 fa3a 	bl	80062c0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005e4c:	4b1c      	ldr	r3, [pc, #112]	; (8005ec0 <xTaskResumeAll+0x130>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d010      	beq.n	8005e7a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005e58:	f000 f858 	bl	8005f0c <xTaskIncrementTick>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d002      	beq.n	8005e68 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005e62:	4b16      	ldr	r3, [pc, #88]	; (8005ebc <xTaskResumeAll+0x12c>)
 8005e64:	2201      	movs	r2, #1
 8005e66:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	3b01      	subs	r3, #1
 8005e6c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d1f1      	bne.n	8005e58 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8005e74:	4b12      	ldr	r3, [pc, #72]	; (8005ec0 <xTaskResumeAll+0x130>)
 8005e76:	2200      	movs	r2, #0
 8005e78:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005e7a:	4b10      	ldr	r3, [pc, #64]	; (8005ebc <xTaskResumeAll+0x12c>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d009      	beq.n	8005e96 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005e82:	2301      	movs	r3, #1
 8005e84:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005e86:	4b0f      	ldr	r3, [pc, #60]	; (8005ec4 <xTaskResumeAll+0x134>)
 8005e88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e8c:	601a      	str	r2, [r3, #0]
 8005e8e:	f3bf 8f4f 	dsb	sy
 8005e92:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005e96:	f000 fbfd 	bl	8006694 <vPortExitCritical>

	return xAlreadyYielded;
 8005e9a:	68bb      	ldr	r3, [r7, #8]
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	3710      	adds	r7, #16
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bd80      	pop	{r7, pc}
 8005ea4:	20000610 	.word	0x20000610
 8005ea8:	200005e8 	.word	0x200005e8
 8005eac:	200005a8 	.word	0x200005a8
 8005eb0:	200005f0 	.word	0x200005f0
 8005eb4:	200004ec 	.word	0x200004ec
 8005eb8:	200004e8 	.word	0x200004e8
 8005ebc:	200005fc 	.word	0x200005fc
 8005ec0:	200005f8 	.word	0x200005f8
 8005ec4:	e000ed04 	.word	0xe000ed04

08005ec8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b083      	sub	sp, #12
 8005ecc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005ece:	4b05      	ldr	r3, [pc, #20]	; (8005ee4 <xTaskGetTickCount+0x1c>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005ed4:	687b      	ldr	r3, [r7, #4]
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	370c      	adds	r7, #12
 8005eda:	46bd      	mov	sp, r7
 8005edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee0:	4770      	bx	lr
 8005ee2:	bf00      	nop
 8005ee4:	200005ec 	.word	0x200005ec

08005ee8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b082      	sub	sp, #8
 8005eec:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005eee:	f000 fc83 	bl	80067f8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8005ef6:	4b04      	ldr	r3, [pc, #16]	; (8005f08 <xTaskGetTickCountFromISR+0x20>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005efc:	683b      	ldr	r3, [r7, #0]
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3708      	adds	r7, #8
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}
 8005f06:	bf00      	nop
 8005f08:	200005ec 	.word	0x200005ec

08005f0c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b086      	sub	sp, #24
 8005f10:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005f12:	2300      	movs	r3, #0
 8005f14:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f16:	4b51      	ldr	r3, [pc, #324]	; (800605c <xTaskIncrementTick+0x150>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	f040 808d 	bne.w	800603a <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005f20:	4b4f      	ldr	r3, [pc, #316]	; (8006060 <xTaskIncrementTick+0x154>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	3301      	adds	r3, #1
 8005f26:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005f28:	4a4d      	ldr	r2, [pc, #308]	; (8006060 <xTaskIncrementTick+0x154>)
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d120      	bne.n	8005f76 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005f34:	4b4b      	ldr	r3, [pc, #300]	; (8006064 <xTaskIncrementTick+0x158>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d00a      	beq.n	8005f54 <xTaskIncrementTick+0x48>
	__asm volatile
 8005f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f42:	f383 8811 	msr	BASEPRI, r3
 8005f46:	f3bf 8f6f 	isb	sy
 8005f4a:	f3bf 8f4f 	dsb	sy
 8005f4e:	603b      	str	r3, [r7, #0]
}
 8005f50:	bf00      	nop
 8005f52:	e7fe      	b.n	8005f52 <xTaskIncrementTick+0x46>
 8005f54:	4b43      	ldr	r3, [pc, #268]	; (8006064 <xTaskIncrementTick+0x158>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	60fb      	str	r3, [r7, #12]
 8005f5a:	4b43      	ldr	r3, [pc, #268]	; (8006068 <xTaskIncrementTick+0x15c>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a41      	ldr	r2, [pc, #260]	; (8006064 <xTaskIncrementTick+0x158>)
 8005f60:	6013      	str	r3, [r2, #0]
 8005f62:	4a41      	ldr	r2, [pc, #260]	; (8006068 <xTaskIncrementTick+0x15c>)
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	6013      	str	r3, [r2, #0]
 8005f68:	4b40      	ldr	r3, [pc, #256]	; (800606c <xTaskIncrementTick+0x160>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	3301      	adds	r3, #1
 8005f6e:	4a3f      	ldr	r2, [pc, #252]	; (800606c <xTaskIncrementTick+0x160>)
 8005f70:	6013      	str	r3, [r2, #0]
 8005f72:	f000 f9a5 	bl	80062c0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005f76:	4b3e      	ldr	r3, [pc, #248]	; (8006070 <xTaskIncrementTick+0x164>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	693a      	ldr	r2, [r7, #16]
 8005f7c:	429a      	cmp	r2, r3
 8005f7e:	d34d      	bcc.n	800601c <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f80:	4b38      	ldr	r3, [pc, #224]	; (8006064 <xTaskIncrementTick+0x158>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d101      	bne.n	8005f8e <xTaskIncrementTick+0x82>
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	e000      	b.n	8005f90 <xTaskIncrementTick+0x84>
 8005f8e:	2300      	movs	r3, #0
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d004      	beq.n	8005f9e <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f94:	4b36      	ldr	r3, [pc, #216]	; (8006070 <xTaskIncrementTick+0x164>)
 8005f96:	f04f 32ff 	mov.w	r2, #4294967295
 8005f9a:	601a      	str	r2, [r3, #0]
					break;
 8005f9c:	e03e      	b.n	800601c <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005f9e:	4b31      	ldr	r3, [pc, #196]	; (8006064 <xTaskIncrementTick+0x158>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	68db      	ldr	r3, [r3, #12]
 8005fa4:	68db      	ldr	r3, [r3, #12]
 8005fa6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005fae:	693a      	ldr	r2, [r7, #16]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	429a      	cmp	r2, r3
 8005fb4:	d203      	bcs.n	8005fbe <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005fb6:	4a2e      	ldr	r2, [pc, #184]	; (8006070 <xTaskIncrementTick+0x164>)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6013      	str	r3, [r2, #0]
						break;
 8005fbc:	e02e      	b.n	800601c <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	3304      	adds	r3, #4
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	f7ff fc22 	bl	800580c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d004      	beq.n	8005fda <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	3318      	adds	r3, #24
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	f7ff fc19 	bl	800580c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fde:	2201      	movs	r2, #1
 8005fe0:	409a      	lsls	r2, r3
 8005fe2:	4b24      	ldr	r3, [pc, #144]	; (8006074 <xTaskIncrementTick+0x168>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	4a22      	ldr	r2, [pc, #136]	; (8006074 <xTaskIncrementTick+0x168>)
 8005fea:	6013      	str	r3, [r2, #0]
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ff0:	4613      	mov	r3, r2
 8005ff2:	009b      	lsls	r3, r3, #2
 8005ff4:	4413      	add	r3, r2
 8005ff6:	009b      	lsls	r3, r3, #2
 8005ff8:	4a1f      	ldr	r2, [pc, #124]	; (8006078 <xTaskIncrementTick+0x16c>)
 8005ffa:	441a      	add	r2, r3
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	3304      	adds	r3, #4
 8006000:	4619      	mov	r1, r3
 8006002:	4610      	mov	r0, r2
 8006004:	f7ff fba5 	bl	8005752 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800600c:	4b1b      	ldr	r3, [pc, #108]	; (800607c <xTaskIncrementTick+0x170>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006012:	429a      	cmp	r2, r3
 8006014:	d3b4      	bcc.n	8005f80 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006016:	2301      	movs	r3, #1
 8006018:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800601a:	e7b1      	b.n	8005f80 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800601c:	4b17      	ldr	r3, [pc, #92]	; (800607c <xTaskIncrementTick+0x170>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006022:	4915      	ldr	r1, [pc, #84]	; (8006078 <xTaskIncrementTick+0x16c>)
 8006024:	4613      	mov	r3, r2
 8006026:	009b      	lsls	r3, r3, #2
 8006028:	4413      	add	r3, r2
 800602a:	009b      	lsls	r3, r3, #2
 800602c:	440b      	add	r3, r1
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	2b01      	cmp	r3, #1
 8006032:	d907      	bls.n	8006044 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8006034:	2301      	movs	r3, #1
 8006036:	617b      	str	r3, [r7, #20]
 8006038:	e004      	b.n	8006044 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800603a:	4b11      	ldr	r3, [pc, #68]	; (8006080 <xTaskIncrementTick+0x174>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	3301      	adds	r3, #1
 8006040:	4a0f      	ldr	r2, [pc, #60]	; (8006080 <xTaskIncrementTick+0x174>)
 8006042:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006044:	4b0f      	ldr	r3, [pc, #60]	; (8006084 <xTaskIncrementTick+0x178>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d001      	beq.n	8006050 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800604c:	2301      	movs	r3, #1
 800604e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006050:	697b      	ldr	r3, [r7, #20]
}
 8006052:	4618      	mov	r0, r3
 8006054:	3718      	adds	r7, #24
 8006056:	46bd      	mov	sp, r7
 8006058:	bd80      	pop	{r7, pc}
 800605a:	bf00      	nop
 800605c:	20000610 	.word	0x20000610
 8006060:	200005ec 	.word	0x200005ec
 8006064:	200005a0 	.word	0x200005a0
 8006068:	200005a4 	.word	0x200005a4
 800606c:	20000600 	.word	0x20000600
 8006070:	20000608 	.word	0x20000608
 8006074:	200005f0 	.word	0x200005f0
 8006078:	200004ec 	.word	0x200004ec
 800607c:	200004e8 	.word	0x200004e8
 8006080:	200005f8 	.word	0x200005f8
 8006084:	200005fc 	.word	0x200005fc

08006088 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006088:	b480      	push	{r7}
 800608a:	b087      	sub	sp, #28
 800608c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800608e:	4b29      	ldr	r3, [pc, #164]	; (8006134 <vTaskSwitchContext+0xac>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d003      	beq.n	800609e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006096:	4b28      	ldr	r3, [pc, #160]	; (8006138 <vTaskSwitchContext+0xb0>)
 8006098:	2201      	movs	r2, #1
 800609a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800609c:	e044      	b.n	8006128 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800609e:	4b26      	ldr	r3, [pc, #152]	; (8006138 <vTaskSwitchContext+0xb0>)
 80060a0:	2200      	movs	r2, #0
 80060a2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80060a4:	4b25      	ldr	r3, [pc, #148]	; (800613c <vTaskSwitchContext+0xb4>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	fab3 f383 	clz	r3, r3
 80060b0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80060b2:	7afb      	ldrb	r3, [r7, #11]
 80060b4:	f1c3 031f 	rsb	r3, r3, #31
 80060b8:	617b      	str	r3, [r7, #20]
 80060ba:	4921      	ldr	r1, [pc, #132]	; (8006140 <vTaskSwitchContext+0xb8>)
 80060bc:	697a      	ldr	r2, [r7, #20]
 80060be:	4613      	mov	r3, r2
 80060c0:	009b      	lsls	r3, r3, #2
 80060c2:	4413      	add	r3, r2
 80060c4:	009b      	lsls	r3, r3, #2
 80060c6:	440b      	add	r3, r1
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d10a      	bne.n	80060e4 <vTaskSwitchContext+0x5c>
	__asm volatile
 80060ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060d2:	f383 8811 	msr	BASEPRI, r3
 80060d6:	f3bf 8f6f 	isb	sy
 80060da:	f3bf 8f4f 	dsb	sy
 80060de:	607b      	str	r3, [r7, #4]
}
 80060e0:	bf00      	nop
 80060e2:	e7fe      	b.n	80060e2 <vTaskSwitchContext+0x5a>
 80060e4:	697a      	ldr	r2, [r7, #20]
 80060e6:	4613      	mov	r3, r2
 80060e8:	009b      	lsls	r3, r3, #2
 80060ea:	4413      	add	r3, r2
 80060ec:	009b      	lsls	r3, r3, #2
 80060ee:	4a14      	ldr	r2, [pc, #80]	; (8006140 <vTaskSwitchContext+0xb8>)
 80060f0:	4413      	add	r3, r2
 80060f2:	613b      	str	r3, [r7, #16]
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	685b      	ldr	r3, [r3, #4]
 80060f8:	685a      	ldr	r2, [r3, #4]
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	605a      	str	r2, [r3, #4]
 80060fe:	693b      	ldr	r3, [r7, #16]
 8006100:	685a      	ldr	r2, [r3, #4]
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	3308      	adds	r3, #8
 8006106:	429a      	cmp	r2, r3
 8006108:	d104      	bne.n	8006114 <vTaskSwitchContext+0x8c>
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	685a      	ldr	r2, [r3, #4]
 8006110:	693b      	ldr	r3, [r7, #16]
 8006112:	605a      	str	r2, [r3, #4]
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	68db      	ldr	r3, [r3, #12]
 800611a:	4a0a      	ldr	r2, [pc, #40]	; (8006144 <vTaskSwitchContext+0xbc>)
 800611c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800611e:	4b09      	ldr	r3, [pc, #36]	; (8006144 <vTaskSwitchContext+0xbc>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	334c      	adds	r3, #76	; 0x4c
 8006124:	4a08      	ldr	r2, [pc, #32]	; (8006148 <vTaskSwitchContext+0xc0>)
 8006126:	6013      	str	r3, [r2, #0]
}
 8006128:	bf00      	nop
 800612a:	371c      	adds	r7, #28
 800612c:	46bd      	mov	sp, r7
 800612e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006132:	4770      	bx	lr
 8006134:	20000610 	.word	0x20000610
 8006138:	200005fc 	.word	0x200005fc
 800613c:	200005f0 	.word	0x200005f0
 8006140:	200004ec 	.word	0x200004ec
 8006144:	200004e8 	.word	0x200004e8
 8006148:	20000010 	.word	0x20000010

0800614c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b082      	sub	sp, #8
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006154:	f000 f852 	bl	80061fc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006158:	4b06      	ldr	r3, [pc, #24]	; (8006174 <prvIdleTask+0x28>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	2b01      	cmp	r3, #1
 800615e:	d9f9      	bls.n	8006154 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006160:	4b05      	ldr	r3, [pc, #20]	; (8006178 <prvIdleTask+0x2c>)
 8006162:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006166:	601a      	str	r2, [r3, #0]
 8006168:	f3bf 8f4f 	dsb	sy
 800616c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006170:	e7f0      	b.n	8006154 <prvIdleTask+0x8>
 8006172:	bf00      	nop
 8006174:	200004ec 	.word	0x200004ec
 8006178:	e000ed04 	.word	0xe000ed04

0800617c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b082      	sub	sp, #8
 8006180:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006182:	2300      	movs	r3, #0
 8006184:	607b      	str	r3, [r7, #4]
 8006186:	e00c      	b.n	80061a2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006188:	687a      	ldr	r2, [r7, #4]
 800618a:	4613      	mov	r3, r2
 800618c:	009b      	lsls	r3, r3, #2
 800618e:	4413      	add	r3, r2
 8006190:	009b      	lsls	r3, r3, #2
 8006192:	4a12      	ldr	r2, [pc, #72]	; (80061dc <prvInitialiseTaskLists+0x60>)
 8006194:	4413      	add	r3, r2
 8006196:	4618      	mov	r0, r3
 8006198:	f7ff faae 	bl	80056f8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	3301      	adds	r3, #1
 80061a0:	607b      	str	r3, [r7, #4]
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2b06      	cmp	r3, #6
 80061a6:	d9ef      	bls.n	8006188 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80061a8:	480d      	ldr	r0, [pc, #52]	; (80061e0 <prvInitialiseTaskLists+0x64>)
 80061aa:	f7ff faa5 	bl	80056f8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80061ae:	480d      	ldr	r0, [pc, #52]	; (80061e4 <prvInitialiseTaskLists+0x68>)
 80061b0:	f7ff faa2 	bl	80056f8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80061b4:	480c      	ldr	r0, [pc, #48]	; (80061e8 <prvInitialiseTaskLists+0x6c>)
 80061b6:	f7ff fa9f 	bl	80056f8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80061ba:	480c      	ldr	r0, [pc, #48]	; (80061ec <prvInitialiseTaskLists+0x70>)
 80061bc:	f7ff fa9c 	bl	80056f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80061c0:	480b      	ldr	r0, [pc, #44]	; (80061f0 <prvInitialiseTaskLists+0x74>)
 80061c2:	f7ff fa99 	bl	80056f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80061c6:	4b0b      	ldr	r3, [pc, #44]	; (80061f4 <prvInitialiseTaskLists+0x78>)
 80061c8:	4a05      	ldr	r2, [pc, #20]	; (80061e0 <prvInitialiseTaskLists+0x64>)
 80061ca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80061cc:	4b0a      	ldr	r3, [pc, #40]	; (80061f8 <prvInitialiseTaskLists+0x7c>)
 80061ce:	4a05      	ldr	r2, [pc, #20]	; (80061e4 <prvInitialiseTaskLists+0x68>)
 80061d0:	601a      	str	r2, [r3, #0]
}
 80061d2:	bf00      	nop
 80061d4:	3708      	adds	r7, #8
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd80      	pop	{r7, pc}
 80061da:	bf00      	nop
 80061dc:	200004ec 	.word	0x200004ec
 80061e0:	20000578 	.word	0x20000578
 80061e4:	2000058c 	.word	0x2000058c
 80061e8:	200005a8 	.word	0x200005a8
 80061ec:	200005bc 	.word	0x200005bc
 80061f0:	200005d4 	.word	0x200005d4
 80061f4:	200005a0 	.word	0x200005a0
 80061f8:	200005a4 	.word	0x200005a4

080061fc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b082      	sub	sp, #8
 8006200:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006202:	e019      	b.n	8006238 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006204:	f000 fa16 	bl	8006634 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006208:	4b10      	ldr	r3, [pc, #64]	; (800624c <prvCheckTasksWaitingTermination+0x50>)
 800620a:	68db      	ldr	r3, [r3, #12]
 800620c:	68db      	ldr	r3, [r3, #12]
 800620e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	3304      	adds	r3, #4
 8006214:	4618      	mov	r0, r3
 8006216:	f7ff faf9 	bl	800580c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800621a:	4b0d      	ldr	r3, [pc, #52]	; (8006250 <prvCheckTasksWaitingTermination+0x54>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	3b01      	subs	r3, #1
 8006220:	4a0b      	ldr	r2, [pc, #44]	; (8006250 <prvCheckTasksWaitingTermination+0x54>)
 8006222:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006224:	4b0b      	ldr	r3, [pc, #44]	; (8006254 <prvCheckTasksWaitingTermination+0x58>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	3b01      	subs	r3, #1
 800622a:	4a0a      	ldr	r2, [pc, #40]	; (8006254 <prvCheckTasksWaitingTermination+0x58>)
 800622c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800622e:	f000 fa31 	bl	8006694 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f000 f810 	bl	8006258 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006238:	4b06      	ldr	r3, [pc, #24]	; (8006254 <prvCheckTasksWaitingTermination+0x58>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d1e1      	bne.n	8006204 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006240:	bf00      	nop
 8006242:	bf00      	nop
 8006244:	3708      	adds	r7, #8
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}
 800624a:	bf00      	nop
 800624c:	200005bc 	.word	0x200005bc
 8006250:	200005e8 	.word	0x200005e8
 8006254:	200005d0 	.word	0x200005d0

08006258 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006258:	b580      	push	{r7, lr}
 800625a:	b084      	sub	sp, #16
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	334c      	adds	r3, #76	; 0x4c
 8006264:	4618      	mov	r0, r3
 8006266:	f000 fd1d 	bl	8006ca4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8006270:	2b00      	cmp	r3, #0
 8006272:	d108      	bne.n	8006286 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006278:	4618      	mov	r0, r3
 800627a:	f000 fbc1 	bl	8006a00 <vPortFree>
				vPortFree( pxTCB );
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f000 fbbe 	bl	8006a00 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006284:	e018      	b.n	80062b8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800628c:	2b01      	cmp	r3, #1
 800628e:	d103      	bne.n	8006298 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	f000 fbb5 	bl	8006a00 <vPortFree>
	}
 8006296:	e00f      	b.n	80062b8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800629e:	2b02      	cmp	r3, #2
 80062a0:	d00a      	beq.n	80062b8 <prvDeleteTCB+0x60>
	__asm volatile
 80062a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062a6:	f383 8811 	msr	BASEPRI, r3
 80062aa:	f3bf 8f6f 	isb	sy
 80062ae:	f3bf 8f4f 	dsb	sy
 80062b2:	60fb      	str	r3, [r7, #12]
}
 80062b4:	bf00      	nop
 80062b6:	e7fe      	b.n	80062b6 <prvDeleteTCB+0x5e>
	}
 80062b8:	bf00      	nop
 80062ba:	3710      	adds	r7, #16
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd80      	pop	{r7, pc}

080062c0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80062c0:	b480      	push	{r7}
 80062c2:	b083      	sub	sp, #12
 80062c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80062c6:	4b0f      	ldr	r3, [pc, #60]	; (8006304 <prvResetNextTaskUnblockTime+0x44>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d101      	bne.n	80062d4 <prvResetNextTaskUnblockTime+0x14>
 80062d0:	2301      	movs	r3, #1
 80062d2:	e000      	b.n	80062d6 <prvResetNextTaskUnblockTime+0x16>
 80062d4:	2300      	movs	r3, #0
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d004      	beq.n	80062e4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80062da:	4b0b      	ldr	r3, [pc, #44]	; (8006308 <prvResetNextTaskUnblockTime+0x48>)
 80062dc:	f04f 32ff 	mov.w	r2, #4294967295
 80062e0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80062e2:	e008      	b.n	80062f6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80062e4:	4b07      	ldr	r3, [pc, #28]	; (8006304 <prvResetNextTaskUnblockTime+0x44>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	68db      	ldr	r3, [r3, #12]
 80062ea:	68db      	ldr	r3, [r3, #12]
 80062ec:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	4a05      	ldr	r2, [pc, #20]	; (8006308 <prvResetNextTaskUnblockTime+0x48>)
 80062f4:	6013      	str	r3, [r2, #0]
}
 80062f6:	bf00      	nop
 80062f8:	370c      	adds	r7, #12
 80062fa:	46bd      	mov	sp, r7
 80062fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006300:	4770      	bx	lr
 8006302:	bf00      	nop
 8006304:	200005a0 	.word	0x200005a0
 8006308:	20000608 	.word	0x20000608

0800630c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b084      	sub	sp, #16
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
 8006314:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006316:	4b29      	ldr	r3, [pc, #164]	; (80063bc <prvAddCurrentTaskToDelayedList+0xb0>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800631c:	4b28      	ldr	r3, [pc, #160]	; (80063c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	3304      	adds	r3, #4
 8006322:	4618      	mov	r0, r3
 8006324:	f7ff fa72 	bl	800580c <uxListRemove>
 8006328:	4603      	mov	r3, r0
 800632a:	2b00      	cmp	r3, #0
 800632c:	d10b      	bne.n	8006346 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800632e:	4b24      	ldr	r3, [pc, #144]	; (80063c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006334:	2201      	movs	r2, #1
 8006336:	fa02 f303 	lsl.w	r3, r2, r3
 800633a:	43da      	mvns	r2, r3
 800633c:	4b21      	ldr	r3, [pc, #132]	; (80063c4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4013      	ands	r3, r2
 8006342:	4a20      	ldr	r2, [pc, #128]	; (80063c4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006344:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800634c:	d10a      	bne.n	8006364 <prvAddCurrentTaskToDelayedList+0x58>
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d007      	beq.n	8006364 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006354:	4b1a      	ldr	r3, [pc, #104]	; (80063c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	3304      	adds	r3, #4
 800635a:	4619      	mov	r1, r3
 800635c:	481a      	ldr	r0, [pc, #104]	; (80063c8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800635e:	f7ff f9f8 	bl	8005752 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006362:	e026      	b.n	80063b2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006364:	68fa      	ldr	r2, [r7, #12]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	4413      	add	r3, r2
 800636a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800636c:	4b14      	ldr	r3, [pc, #80]	; (80063c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	68ba      	ldr	r2, [r7, #8]
 8006372:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006374:	68ba      	ldr	r2, [r7, #8]
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	429a      	cmp	r2, r3
 800637a:	d209      	bcs.n	8006390 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800637c:	4b13      	ldr	r3, [pc, #76]	; (80063cc <prvAddCurrentTaskToDelayedList+0xc0>)
 800637e:	681a      	ldr	r2, [r3, #0]
 8006380:	4b0f      	ldr	r3, [pc, #60]	; (80063c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	3304      	adds	r3, #4
 8006386:	4619      	mov	r1, r3
 8006388:	4610      	mov	r0, r2
 800638a:	f7ff fa06 	bl	800579a <vListInsert>
}
 800638e:	e010      	b.n	80063b2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006390:	4b0f      	ldr	r3, [pc, #60]	; (80063d0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006392:	681a      	ldr	r2, [r3, #0]
 8006394:	4b0a      	ldr	r3, [pc, #40]	; (80063c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	3304      	adds	r3, #4
 800639a:	4619      	mov	r1, r3
 800639c:	4610      	mov	r0, r2
 800639e:	f7ff f9fc 	bl	800579a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80063a2:	4b0c      	ldr	r3, [pc, #48]	; (80063d4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	68ba      	ldr	r2, [r7, #8]
 80063a8:	429a      	cmp	r2, r3
 80063aa:	d202      	bcs.n	80063b2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80063ac:	4a09      	ldr	r2, [pc, #36]	; (80063d4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	6013      	str	r3, [r2, #0]
}
 80063b2:	bf00      	nop
 80063b4:	3710      	adds	r7, #16
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}
 80063ba:	bf00      	nop
 80063bc:	200005ec 	.word	0x200005ec
 80063c0:	200004e8 	.word	0x200004e8
 80063c4:	200005f0 	.word	0x200005f0
 80063c8:	200005d4 	.word	0x200005d4
 80063cc:	200005a4 	.word	0x200005a4
 80063d0:	200005a0 	.word	0x200005a0
 80063d4:	20000608 	.word	0x20000608

080063d8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80063d8:	b480      	push	{r7}
 80063da:	b085      	sub	sp, #20
 80063dc:	af00      	add	r7, sp, #0
 80063de:	60f8      	str	r0, [r7, #12]
 80063e0:	60b9      	str	r1, [r7, #8]
 80063e2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	3b04      	subs	r3, #4
 80063e8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80063f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	3b04      	subs	r3, #4
 80063f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	f023 0201 	bic.w	r2, r3, #1
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	3b04      	subs	r3, #4
 8006406:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006408:	4a0c      	ldr	r2, [pc, #48]	; (800643c <pxPortInitialiseStack+0x64>)
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	3b14      	subs	r3, #20
 8006412:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006414:	687a      	ldr	r2, [r7, #4]
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	3b04      	subs	r3, #4
 800641e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	f06f 0202 	mvn.w	r2, #2
 8006426:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	3b20      	subs	r3, #32
 800642c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800642e:	68fb      	ldr	r3, [r7, #12]
}
 8006430:	4618      	mov	r0, r3
 8006432:	3714      	adds	r7, #20
 8006434:	46bd      	mov	sp, r7
 8006436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643a:	4770      	bx	lr
 800643c:	08006441 	.word	0x08006441

08006440 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006440:	b480      	push	{r7}
 8006442:	b085      	sub	sp, #20
 8006444:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006446:	2300      	movs	r3, #0
 8006448:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800644a:	4b12      	ldr	r3, [pc, #72]	; (8006494 <prvTaskExitError+0x54>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006452:	d00a      	beq.n	800646a <prvTaskExitError+0x2a>
	__asm volatile
 8006454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006458:	f383 8811 	msr	BASEPRI, r3
 800645c:	f3bf 8f6f 	isb	sy
 8006460:	f3bf 8f4f 	dsb	sy
 8006464:	60fb      	str	r3, [r7, #12]
}
 8006466:	bf00      	nop
 8006468:	e7fe      	b.n	8006468 <prvTaskExitError+0x28>
	__asm volatile
 800646a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800646e:	f383 8811 	msr	BASEPRI, r3
 8006472:	f3bf 8f6f 	isb	sy
 8006476:	f3bf 8f4f 	dsb	sy
 800647a:	60bb      	str	r3, [r7, #8]
}
 800647c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800647e:	bf00      	nop
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d0fc      	beq.n	8006480 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006486:	bf00      	nop
 8006488:	bf00      	nop
 800648a:	3714      	adds	r7, #20
 800648c:	46bd      	mov	sp, r7
 800648e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006492:	4770      	bx	lr
 8006494:	2000000c 	.word	0x2000000c
	...

080064a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80064a0:	4b07      	ldr	r3, [pc, #28]	; (80064c0 <pxCurrentTCBConst2>)
 80064a2:	6819      	ldr	r1, [r3, #0]
 80064a4:	6808      	ldr	r0, [r1, #0]
 80064a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064aa:	f380 8809 	msr	PSP, r0
 80064ae:	f3bf 8f6f 	isb	sy
 80064b2:	f04f 0000 	mov.w	r0, #0
 80064b6:	f380 8811 	msr	BASEPRI, r0
 80064ba:	4770      	bx	lr
 80064bc:	f3af 8000 	nop.w

080064c0 <pxCurrentTCBConst2>:
 80064c0:	200004e8 	.word	0x200004e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80064c4:	bf00      	nop
 80064c6:	bf00      	nop

080064c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80064c8:	4808      	ldr	r0, [pc, #32]	; (80064ec <prvPortStartFirstTask+0x24>)
 80064ca:	6800      	ldr	r0, [r0, #0]
 80064cc:	6800      	ldr	r0, [r0, #0]
 80064ce:	f380 8808 	msr	MSP, r0
 80064d2:	f04f 0000 	mov.w	r0, #0
 80064d6:	f380 8814 	msr	CONTROL, r0
 80064da:	b662      	cpsie	i
 80064dc:	b661      	cpsie	f
 80064de:	f3bf 8f4f 	dsb	sy
 80064e2:	f3bf 8f6f 	isb	sy
 80064e6:	df00      	svc	0
 80064e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80064ea:	bf00      	nop
 80064ec:	e000ed08 	.word	0xe000ed08

080064f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b086      	sub	sp, #24
 80064f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80064f6:	4b46      	ldr	r3, [pc, #280]	; (8006610 <xPortStartScheduler+0x120>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a46      	ldr	r2, [pc, #280]	; (8006614 <xPortStartScheduler+0x124>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d10a      	bne.n	8006516 <xPortStartScheduler+0x26>
	__asm volatile
 8006500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006504:	f383 8811 	msr	BASEPRI, r3
 8006508:	f3bf 8f6f 	isb	sy
 800650c:	f3bf 8f4f 	dsb	sy
 8006510:	613b      	str	r3, [r7, #16]
}
 8006512:	bf00      	nop
 8006514:	e7fe      	b.n	8006514 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006516:	4b3e      	ldr	r3, [pc, #248]	; (8006610 <xPortStartScheduler+0x120>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a3f      	ldr	r2, [pc, #252]	; (8006618 <xPortStartScheduler+0x128>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d10a      	bne.n	8006536 <xPortStartScheduler+0x46>
	__asm volatile
 8006520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006524:	f383 8811 	msr	BASEPRI, r3
 8006528:	f3bf 8f6f 	isb	sy
 800652c:	f3bf 8f4f 	dsb	sy
 8006530:	60fb      	str	r3, [r7, #12]
}
 8006532:	bf00      	nop
 8006534:	e7fe      	b.n	8006534 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006536:	4b39      	ldr	r3, [pc, #228]	; (800661c <xPortStartScheduler+0x12c>)
 8006538:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	781b      	ldrb	r3, [r3, #0]
 800653e:	b2db      	uxtb	r3, r3
 8006540:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	22ff      	movs	r2, #255	; 0xff
 8006546:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	781b      	ldrb	r3, [r3, #0]
 800654c:	b2db      	uxtb	r3, r3
 800654e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006550:	78fb      	ldrb	r3, [r7, #3]
 8006552:	b2db      	uxtb	r3, r3
 8006554:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006558:	b2da      	uxtb	r2, r3
 800655a:	4b31      	ldr	r3, [pc, #196]	; (8006620 <xPortStartScheduler+0x130>)
 800655c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800655e:	4b31      	ldr	r3, [pc, #196]	; (8006624 <xPortStartScheduler+0x134>)
 8006560:	2207      	movs	r2, #7
 8006562:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006564:	e009      	b.n	800657a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006566:	4b2f      	ldr	r3, [pc, #188]	; (8006624 <xPortStartScheduler+0x134>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	3b01      	subs	r3, #1
 800656c:	4a2d      	ldr	r2, [pc, #180]	; (8006624 <xPortStartScheduler+0x134>)
 800656e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006570:	78fb      	ldrb	r3, [r7, #3]
 8006572:	b2db      	uxtb	r3, r3
 8006574:	005b      	lsls	r3, r3, #1
 8006576:	b2db      	uxtb	r3, r3
 8006578:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800657a:	78fb      	ldrb	r3, [r7, #3]
 800657c:	b2db      	uxtb	r3, r3
 800657e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006582:	2b80      	cmp	r3, #128	; 0x80
 8006584:	d0ef      	beq.n	8006566 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006586:	4b27      	ldr	r3, [pc, #156]	; (8006624 <xPortStartScheduler+0x134>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f1c3 0307 	rsb	r3, r3, #7
 800658e:	2b04      	cmp	r3, #4
 8006590:	d00a      	beq.n	80065a8 <xPortStartScheduler+0xb8>
	__asm volatile
 8006592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006596:	f383 8811 	msr	BASEPRI, r3
 800659a:	f3bf 8f6f 	isb	sy
 800659e:	f3bf 8f4f 	dsb	sy
 80065a2:	60bb      	str	r3, [r7, #8]
}
 80065a4:	bf00      	nop
 80065a6:	e7fe      	b.n	80065a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80065a8:	4b1e      	ldr	r3, [pc, #120]	; (8006624 <xPortStartScheduler+0x134>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	021b      	lsls	r3, r3, #8
 80065ae:	4a1d      	ldr	r2, [pc, #116]	; (8006624 <xPortStartScheduler+0x134>)
 80065b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80065b2:	4b1c      	ldr	r3, [pc, #112]	; (8006624 <xPortStartScheduler+0x134>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80065ba:	4a1a      	ldr	r2, [pc, #104]	; (8006624 <xPortStartScheduler+0x134>)
 80065bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	b2da      	uxtb	r2, r3
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80065c6:	4b18      	ldr	r3, [pc, #96]	; (8006628 <xPortStartScheduler+0x138>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a17      	ldr	r2, [pc, #92]	; (8006628 <xPortStartScheduler+0x138>)
 80065cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80065d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80065d2:	4b15      	ldr	r3, [pc, #84]	; (8006628 <xPortStartScheduler+0x138>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a14      	ldr	r2, [pc, #80]	; (8006628 <xPortStartScheduler+0x138>)
 80065d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80065dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80065de:	f000 f8dd 	bl	800679c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80065e2:	4b12      	ldr	r3, [pc, #72]	; (800662c <xPortStartScheduler+0x13c>)
 80065e4:	2200      	movs	r2, #0
 80065e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80065e8:	f000 f8fc 	bl	80067e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80065ec:	4b10      	ldr	r3, [pc, #64]	; (8006630 <xPortStartScheduler+0x140>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4a0f      	ldr	r2, [pc, #60]	; (8006630 <xPortStartScheduler+0x140>)
 80065f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80065f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80065f8:	f7ff ff66 	bl	80064c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80065fc:	f7ff fd44 	bl	8006088 <vTaskSwitchContext>
	prvTaskExitError();
 8006600:	f7ff ff1e 	bl	8006440 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006604:	2300      	movs	r3, #0
}
 8006606:	4618      	mov	r0, r3
 8006608:	3718      	adds	r7, #24
 800660a:	46bd      	mov	sp, r7
 800660c:	bd80      	pop	{r7, pc}
 800660e:	bf00      	nop
 8006610:	e000ed00 	.word	0xe000ed00
 8006614:	410fc271 	.word	0x410fc271
 8006618:	410fc270 	.word	0x410fc270
 800661c:	e000e400 	.word	0xe000e400
 8006620:	20000614 	.word	0x20000614
 8006624:	20000618 	.word	0x20000618
 8006628:	e000ed20 	.word	0xe000ed20
 800662c:	2000000c 	.word	0x2000000c
 8006630:	e000ef34 	.word	0xe000ef34

08006634 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006634:	b480      	push	{r7}
 8006636:	b083      	sub	sp, #12
 8006638:	af00      	add	r7, sp, #0
	__asm volatile
 800663a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800663e:	f383 8811 	msr	BASEPRI, r3
 8006642:	f3bf 8f6f 	isb	sy
 8006646:	f3bf 8f4f 	dsb	sy
 800664a:	607b      	str	r3, [r7, #4]
}
 800664c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800664e:	4b0f      	ldr	r3, [pc, #60]	; (800668c <vPortEnterCritical+0x58>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	3301      	adds	r3, #1
 8006654:	4a0d      	ldr	r2, [pc, #52]	; (800668c <vPortEnterCritical+0x58>)
 8006656:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006658:	4b0c      	ldr	r3, [pc, #48]	; (800668c <vPortEnterCritical+0x58>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	2b01      	cmp	r3, #1
 800665e:	d10f      	bne.n	8006680 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006660:	4b0b      	ldr	r3, [pc, #44]	; (8006690 <vPortEnterCritical+0x5c>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	b2db      	uxtb	r3, r3
 8006666:	2b00      	cmp	r3, #0
 8006668:	d00a      	beq.n	8006680 <vPortEnterCritical+0x4c>
	__asm volatile
 800666a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800666e:	f383 8811 	msr	BASEPRI, r3
 8006672:	f3bf 8f6f 	isb	sy
 8006676:	f3bf 8f4f 	dsb	sy
 800667a:	603b      	str	r3, [r7, #0]
}
 800667c:	bf00      	nop
 800667e:	e7fe      	b.n	800667e <vPortEnterCritical+0x4a>
	}
}
 8006680:	bf00      	nop
 8006682:	370c      	adds	r7, #12
 8006684:	46bd      	mov	sp, r7
 8006686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668a:	4770      	bx	lr
 800668c:	2000000c 	.word	0x2000000c
 8006690:	e000ed04 	.word	0xe000ed04

08006694 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006694:	b480      	push	{r7}
 8006696:	b083      	sub	sp, #12
 8006698:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800669a:	4b12      	ldr	r3, [pc, #72]	; (80066e4 <vPortExitCritical+0x50>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d10a      	bne.n	80066b8 <vPortExitCritical+0x24>
	__asm volatile
 80066a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066a6:	f383 8811 	msr	BASEPRI, r3
 80066aa:	f3bf 8f6f 	isb	sy
 80066ae:	f3bf 8f4f 	dsb	sy
 80066b2:	607b      	str	r3, [r7, #4]
}
 80066b4:	bf00      	nop
 80066b6:	e7fe      	b.n	80066b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80066b8:	4b0a      	ldr	r3, [pc, #40]	; (80066e4 <vPortExitCritical+0x50>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	3b01      	subs	r3, #1
 80066be:	4a09      	ldr	r2, [pc, #36]	; (80066e4 <vPortExitCritical+0x50>)
 80066c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80066c2:	4b08      	ldr	r3, [pc, #32]	; (80066e4 <vPortExitCritical+0x50>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d105      	bne.n	80066d6 <vPortExitCritical+0x42>
 80066ca:	2300      	movs	r3, #0
 80066cc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80066d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80066d6:	bf00      	nop
 80066d8:	370c      	adds	r7, #12
 80066da:	46bd      	mov	sp, r7
 80066dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e0:	4770      	bx	lr
 80066e2:	bf00      	nop
 80066e4:	2000000c 	.word	0x2000000c
	...

080066f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80066f0:	f3ef 8009 	mrs	r0, PSP
 80066f4:	f3bf 8f6f 	isb	sy
 80066f8:	4b15      	ldr	r3, [pc, #84]	; (8006750 <pxCurrentTCBConst>)
 80066fa:	681a      	ldr	r2, [r3, #0]
 80066fc:	f01e 0f10 	tst.w	lr, #16
 8006700:	bf08      	it	eq
 8006702:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006706:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800670a:	6010      	str	r0, [r2, #0]
 800670c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006710:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006714:	f380 8811 	msr	BASEPRI, r0
 8006718:	f3bf 8f4f 	dsb	sy
 800671c:	f3bf 8f6f 	isb	sy
 8006720:	f7ff fcb2 	bl	8006088 <vTaskSwitchContext>
 8006724:	f04f 0000 	mov.w	r0, #0
 8006728:	f380 8811 	msr	BASEPRI, r0
 800672c:	bc09      	pop	{r0, r3}
 800672e:	6819      	ldr	r1, [r3, #0]
 8006730:	6808      	ldr	r0, [r1, #0]
 8006732:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006736:	f01e 0f10 	tst.w	lr, #16
 800673a:	bf08      	it	eq
 800673c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006740:	f380 8809 	msr	PSP, r0
 8006744:	f3bf 8f6f 	isb	sy
 8006748:	4770      	bx	lr
 800674a:	bf00      	nop
 800674c:	f3af 8000 	nop.w

08006750 <pxCurrentTCBConst>:
 8006750:	200004e8 	.word	0x200004e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006754:	bf00      	nop
 8006756:	bf00      	nop

08006758 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b082      	sub	sp, #8
 800675c:	af00      	add	r7, sp, #0
	__asm volatile
 800675e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006762:	f383 8811 	msr	BASEPRI, r3
 8006766:	f3bf 8f6f 	isb	sy
 800676a:	f3bf 8f4f 	dsb	sy
 800676e:	607b      	str	r3, [r7, #4]
}
 8006770:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006772:	f7ff fbcb 	bl	8005f0c <xTaskIncrementTick>
 8006776:	4603      	mov	r3, r0
 8006778:	2b00      	cmp	r3, #0
 800677a:	d003      	beq.n	8006784 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800677c:	4b06      	ldr	r3, [pc, #24]	; (8006798 <SysTick_Handler+0x40>)
 800677e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006782:	601a      	str	r2, [r3, #0]
 8006784:	2300      	movs	r3, #0
 8006786:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	f383 8811 	msr	BASEPRI, r3
}
 800678e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006790:	bf00      	nop
 8006792:	3708      	adds	r7, #8
 8006794:	46bd      	mov	sp, r7
 8006796:	bd80      	pop	{r7, pc}
 8006798:	e000ed04 	.word	0xe000ed04

0800679c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800679c:	b480      	push	{r7}
 800679e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80067a0:	4b0b      	ldr	r3, [pc, #44]	; (80067d0 <vPortSetupTimerInterrupt+0x34>)
 80067a2:	2200      	movs	r2, #0
 80067a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80067a6:	4b0b      	ldr	r3, [pc, #44]	; (80067d4 <vPortSetupTimerInterrupt+0x38>)
 80067a8:	2200      	movs	r2, #0
 80067aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80067ac:	4b0a      	ldr	r3, [pc, #40]	; (80067d8 <vPortSetupTimerInterrupt+0x3c>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4a0a      	ldr	r2, [pc, #40]	; (80067dc <vPortSetupTimerInterrupt+0x40>)
 80067b2:	fba2 2303 	umull	r2, r3, r2, r3
 80067b6:	099b      	lsrs	r3, r3, #6
 80067b8:	4a09      	ldr	r2, [pc, #36]	; (80067e0 <vPortSetupTimerInterrupt+0x44>)
 80067ba:	3b01      	subs	r3, #1
 80067bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80067be:	4b04      	ldr	r3, [pc, #16]	; (80067d0 <vPortSetupTimerInterrupt+0x34>)
 80067c0:	2207      	movs	r2, #7
 80067c2:	601a      	str	r2, [r3, #0]
}
 80067c4:	bf00      	nop
 80067c6:	46bd      	mov	sp, r7
 80067c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067cc:	4770      	bx	lr
 80067ce:	bf00      	nop
 80067d0:	e000e010 	.word	0xe000e010
 80067d4:	e000e018 	.word	0xe000e018
 80067d8:	20000000 	.word	0x20000000
 80067dc:	10624dd3 	.word	0x10624dd3
 80067e0:	e000e014 	.word	0xe000e014

080067e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80067e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80067f4 <vPortEnableVFP+0x10>
 80067e8:	6801      	ldr	r1, [r0, #0]
 80067ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80067ee:	6001      	str	r1, [r0, #0]
 80067f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80067f2:	bf00      	nop
 80067f4:	e000ed88 	.word	0xe000ed88

080067f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80067f8:	b480      	push	{r7}
 80067fa:	b085      	sub	sp, #20
 80067fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80067fe:	f3ef 8305 	mrs	r3, IPSR
 8006802:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	2b0f      	cmp	r3, #15
 8006808:	d914      	bls.n	8006834 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800680a:	4a17      	ldr	r2, [pc, #92]	; (8006868 <vPortValidateInterruptPriority+0x70>)
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	4413      	add	r3, r2
 8006810:	781b      	ldrb	r3, [r3, #0]
 8006812:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006814:	4b15      	ldr	r3, [pc, #84]	; (800686c <vPortValidateInterruptPriority+0x74>)
 8006816:	781b      	ldrb	r3, [r3, #0]
 8006818:	7afa      	ldrb	r2, [r7, #11]
 800681a:	429a      	cmp	r2, r3
 800681c:	d20a      	bcs.n	8006834 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800681e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006822:	f383 8811 	msr	BASEPRI, r3
 8006826:	f3bf 8f6f 	isb	sy
 800682a:	f3bf 8f4f 	dsb	sy
 800682e:	607b      	str	r3, [r7, #4]
}
 8006830:	bf00      	nop
 8006832:	e7fe      	b.n	8006832 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006834:	4b0e      	ldr	r3, [pc, #56]	; (8006870 <vPortValidateInterruptPriority+0x78>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800683c:	4b0d      	ldr	r3, [pc, #52]	; (8006874 <vPortValidateInterruptPriority+0x7c>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	429a      	cmp	r2, r3
 8006842:	d90a      	bls.n	800685a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006848:	f383 8811 	msr	BASEPRI, r3
 800684c:	f3bf 8f6f 	isb	sy
 8006850:	f3bf 8f4f 	dsb	sy
 8006854:	603b      	str	r3, [r7, #0]
}
 8006856:	bf00      	nop
 8006858:	e7fe      	b.n	8006858 <vPortValidateInterruptPriority+0x60>
	}
 800685a:	bf00      	nop
 800685c:	3714      	adds	r7, #20
 800685e:	46bd      	mov	sp, r7
 8006860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006864:	4770      	bx	lr
 8006866:	bf00      	nop
 8006868:	e000e3f0 	.word	0xe000e3f0
 800686c:	20000614 	.word	0x20000614
 8006870:	e000ed0c 	.word	0xe000ed0c
 8006874:	20000618 	.word	0x20000618

08006878 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b08a      	sub	sp, #40	; 0x28
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006880:	2300      	movs	r3, #0
 8006882:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006884:	f7ff fa76 	bl	8005d74 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006888:	4b58      	ldr	r3, [pc, #352]	; (80069ec <pvPortMalloc+0x174>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d101      	bne.n	8006894 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006890:	f000 f910 	bl	8006ab4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006894:	4b56      	ldr	r3, [pc, #344]	; (80069f0 <pvPortMalloc+0x178>)
 8006896:	681a      	ldr	r2, [r3, #0]
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	4013      	ands	r3, r2
 800689c:	2b00      	cmp	r3, #0
 800689e:	f040 808e 	bne.w	80069be <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d01d      	beq.n	80068e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80068a8:	2208      	movs	r2, #8
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	4413      	add	r3, r2
 80068ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	f003 0307 	and.w	r3, r3, #7
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d014      	beq.n	80068e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	f023 0307 	bic.w	r3, r3, #7
 80068c0:	3308      	adds	r3, #8
 80068c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	f003 0307 	and.w	r3, r3, #7
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d00a      	beq.n	80068e4 <pvPortMalloc+0x6c>
	__asm volatile
 80068ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068d2:	f383 8811 	msr	BASEPRI, r3
 80068d6:	f3bf 8f6f 	isb	sy
 80068da:	f3bf 8f4f 	dsb	sy
 80068de:	617b      	str	r3, [r7, #20]
}
 80068e0:	bf00      	nop
 80068e2:	e7fe      	b.n	80068e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d069      	beq.n	80069be <pvPortMalloc+0x146>
 80068ea:	4b42      	ldr	r3, [pc, #264]	; (80069f4 <pvPortMalloc+0x17c>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	687a      	ldr	r2, [r7, #4]
 80068f0:	429a      	cmp	r2, r3
 80068f2:	d864      	bhi.n	80069be <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80068f4:	4b40      	ldr	r3, [pc, #256]	; (80069f8 <pvPortMalloc+0x180>)
 80068f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80068f8:	4b3f      	ldr	r3, [pc, #252]	; (80069f8 <pvPortMalloc+0x180>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80068fe:	e004      	b.n	800690a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006902:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800690a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	687a      	ldr	r2, [r7, #4]
 8006910:	429a      	cmp	r2, r3
 8006912:	d903      	bls.n	800691c <pvPortMalloc+0xa4>
 8006914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d1f1      	bne.n	8006900 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800691c:	4b33      	ldr	r3, [pc, #204]	; (80069ec <pvPortMalloc+0x174>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006922:	429a      	cmp	r2, r3
 8006924:	d04b      	beq.n	80069be <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006926:	6a3b      	ldr	r3, [r7, #32]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	2208      	movs	r2, #8
 800692c:	4413      	add	r3, r2
 800692e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006932:	681a      	ldr	r2, [r3, #0]
 8006934:	6a3b      	ldr	r3, [r7, #32]
 8006936:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800693a:	685a      	ldr	r2, [r3, #4]
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	1ad2      	subs	r2, r2, r3
 8006940:	2308      	movs	r3, #8
 8006942:	005b      	lsls	r3, r3, #1
 8006944:	429a      	cmp	r2, r3
 8006946:	d91f      	bls.n	8006988 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006948:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	4413      	add	r3, r2
 800694e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006950:	69bb      	ldr	r3, [r7, #24]
 8006952:	f003 0307 	and.w	r3, r3, #7
 8006956:	2b00      	cmp	r3, #0
 8006958:	d00a      	beq.n	8006970 <pvPortMalloc+0xf8>
	__asm volatile
 800695a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800695e:	f383 8811 	msr	BASEPRI, r3
 8006962:	f3bf 8f6f 	isb	sy
 8006966:	f3bf 8f4f 	dsb	sy
 800696a:	613b      	str	r3, [r7, #16]
}
 800696c:	bf00      	nop
 800696e:	e7fe      	b.n	800696e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006972:	685a      	ldr	r2, [r3, #4]
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	1ad2      	subs	r2, r2, r3
 8006978:	69bb      	ldr	r3, [r7, #24]
 800697a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800697c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800697e:	687a      	ldr	r2, [r7, #4]
 8006980:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006982:	69b8      	ldr	r0, [r7, #24]
 8006984:	f000 f8f8 	bl	8006b78 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006988:	4b1a      	ldr	r3, [pc, #104]	; (80069f4 <pvPortMalloc+0x17c>)
 800698a:	681a      	ldr	r2, [r3, #0]
 800698c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800698e:	685b      	ldr	r3, [r3, #4]
 8006990:	1ad3      	subs	r3, r2, r3
 8006992:	4a18      	ldr	r2, [pc, #96]	; (80069f4 <pvPortMalloc+0x17c>)
 8006994:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006996:	4b17      	ldr	r3, [pc, #92]	; (80069f4 <pvPortMalloc+0x17c>)
 8006998:	681a      	ldr	r2, [r3, #0]
 800699a:	4b18      	ldr	r3, [pc, #96]	; (80069fc <pvPortMalloc+0x184>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	429a      	cmp	r2, r3
 80069a0:	d203      	bcs.n	80069aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80069a2:	4b14      	ldr	r3, [pc, #80]	; (80069f4 <pvPortMalloc+0x17c>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4a15      	ldr	r2, [pc, #84]	; (80069fc <pvPortMalloc+0x184>)
 80069a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80069aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ac:	685a      	ldr	r2, [r3, #4]
 80069ae:	4b10      	ldr	r3, [pc, #64]	; (80069f0 <pvPortMalloc+0x178>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	431a      	orrs	r2, r3
 80069b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80069b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ba:	2200      	movs	r2, #0
 80069bc:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80069be:	f7ff f9e7 	bl	8005d90 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80069c2:	69fb      	ldr	r3, [r7, #28]
 80069c4:	f003 0307 	and.w	r3, r3, #7
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d00a      	beq.n	80069e2 <pvPortMalloc+0x16a>
	__asm volatile
 80069cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069d0:	f383 8811 	msr	BASEPRI, r3
 80069d4:	f3bf 8f6f 	isb	sy
 80069d8:	f3bf 8f4f 	dsb	sy
 80069dc:	60fb      	str	r3, [r7, #12]
}
 80069de:	bf00      	nop
 80069e0:	e7fe      	b.n	80069e0 <pvPortMalloc+0x168>
	return pvReturn;
 80069e2:	69fb      	ldr	r3, [r7, #28]
}
 80069e4:	4618      	mov	r0, r3
 80069e6:	3728      	adds	r7, #40	; 0x28
 80069e8:	46bd      	mov	sp, r7
 80069ea:	bd80      	pop	{r7, pc}
 80069ec:	20001224 	.word	0x20001224
 80069f0:	20001230 	.word	0x20001230
 80069f4:	20001228 	.word	0x20001228
 80069f8:	2000121c 	.word	0x2000121c
 80069fc:	2000122c 	.word	0x2000122c

08006a00 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b086      	sub	sp, #24
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d048      	beq.n	8006aa4 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006a12:	2308      	movs	r3, #8
 8006a14:	425b      	negs	r3, r3
 8006a16:	697a      	ldr	r2, [r7, #20]
 8006a18:	4413      	add	r3, r2
 8006a1a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006a20:	693b      	ldr	r3, [r7, #16]
 8006a22:	685a      	ldr	r2, [r3, #4]
 8006a24:	4b21      	ldr	r3, [pc, #132]	; (8006aac <vPortFree+0xac>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4013      	ands	r3, r2
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d10a      	bne.n	8006a44 <vPortFree+0x44>
	__asm volatile
 8006a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a32:	f383 8811 	msr	BASEPRI, r3
 8006a36:	f3bf 8f6f 	isb	sy
 8006a3a:	f3bf 8f4f 	dsb	sy
 8006a3e:	60fb      	str	r3, [r7, #12]
}
 8006a40:	bf00      	nop
 8006a42:	e7fe      	b.n	8006a42 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006a44:	693b      	ldr	r3, [r7, #16]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d00a      	beq.n	8006a62 <vPortFree+0x62>
	__asm volatile
 8006a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a50:	f383 8811 	msr	BASEPRI, r3
 8006a54:	f3bf 8f6f 	isb	sy
 8006a58:	f3bf 8f4f 	dsb	sy
 8006a5c:	60bb      	str	r3, [r7, #8]
}
 8006a5e:	bf00      	nop
 8006a60:	e7fe      	b.n	8006a60 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006a62:	693b      	ldr	r3, [r7, #16]
 8006a64:	685a      	ldr	r2, [r3, #4]
 8006a66:	4b11      	ldr	r3, [pc, #68]	; (8006aac <vPortFree+0xac>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4013      	ands	r3, r2
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d019      	beq.n	8006aa4 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006a70:	693b      	ldr	r3, [r7, #16]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d115      	bne.n	8006aa4 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006a78:	693b      	ldr	r3, [r7, #16]
 8006a7a:	685a      	ldr	r2, [r3, #4]
 8006a7c:	4b0b      	ldr	r3, [pc, #44]	; (8006aac <vPortFree+0xac>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	43db      	mvns	r3, r3
 8006a82:	401a      	ands	r2, r3
 8006a84:	693b      	ldr	r3, [r7, #16]
 8006a86:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006a88:	f7ff f974 	bl	8005d74 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006a8c:	693b      	ldr	r3, [r7, #16]
 8006a8e:	685a      	ldr	r2, [r3, #4]
 8006a90:	4b07      	ldr	r3, [pc, #28]	; (8006ab0 <vPortFree+0xb0>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4413      	add	r3, r2
 8006a96:	4a06      	ldr	r2, [pc, #24]	; (8006ab0 <vPortFree+0xb0>)
 8006a98:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006a9a:	6938      	ldr	r0, [r7, #16]
 8006a9c:	f000 f86c 	bl	8006b78 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006aa0:	f7ff f976 	bl	8005d90 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006aa4:	bf00      	nop
 8006aa6:	3718      	adds	r7, #24
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	bd80      	pop	{r7, pc}
 8006aac:	20001230 	.word	0x20001230
 8006ab0:	20001228 	.word	0x20001228

08006ab4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b085      	sub	sp, #20
 8006ab8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006aba:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006abe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006ac0:	4b27      	ldr	r3, [pc, #156]	; (8006b60 <prvHeapInit+0xac>)
 8006ac2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	f003 0307 	and.w	r3, r3, #7
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d00c      	beq.n	8006ae8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	3307      	adds	r3, #7
 8006ad2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	f023 0307 	bic.w	r3, r3, #7
 8006ada:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006adc:	68ba      	ldr	r2, [r7, #8]
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	1ad3      	subs	r3, r2, r3
 8006ae2:	4a1f      	ldr	r2, [pc, #124]	; (8006b60 <prvHeapInit+0xac>)
 8006ae4:	4413      	add	r3, r2
 8006ae6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006aec:	4a1d      	ldr	r2, [pc, #116]	; (8006b64 <prvHeapInit+0xb0>)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006af2:	4b1c      	ldr	r3, [pc, #112]	; (8006b64 <prvHeapInit+0xb0>)
 8006af4:	2200      	movs	r2, #0
 8006af6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	68ba      	ldr	r2, [r7, #8]
 8006afc:	4413      	add	r3, r2
 8006afe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006b00:	2208      	movs	r2, #8
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	1a9b      	subs	r3, r3, r2
 8006b06:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	f023 0307 	bic.w	r3, r3, #7
 8006b0e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	4a15      	ldr	r2, [pc, #84]	; (8006b68 <prvHeapInit+0xb4>)
 8006b14:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006b16:	4b14      	ldr	r3, [pc, #80]	; (8006b68 <prvHeapInit+0xb4>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006b1e:	4b12      	ldr	r3, [pc, #72]	; (8006b68 <prvHeapInit+0xb4>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	2200      	movs	r2, #0
 8006b24:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	68fa      	ldr	r2, [r7, #12]
 8006b2e:	1ad2      	subs	r2, r2, r3
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006b34:	4b0c      	ldr	r3, [pc, #48]	; (8006b68 <prvHeapInit+0xb4>)
 8006b36:	681a      	ldr	r2, [r3, #0]
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	685b      	ldr	r3, [r3, #4]
 8006b40:	4a0a      	ldr	r2, [pc, #40]	; (8006b6c <prvHeapInit+0xb8>)
 8006b42:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	685b      	ldr	r3, [r3, #4]
 8006b48:	4a09      	ldr	r2, [pc, #36]	; (8006b70 <prvHeapInit+0xbc>)
 8006b4a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006b4c:	4b09      	ldr	r3, [pc, #36]	; (8006b74 <prvHeapInit+0xc0>)
 8006b4e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006b52:	601a      	str	r2, [r3, #0]
}
 8006b54:	bf00      	nop
 8006b56:	3714      	adds	r7, #20
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5e:	4770      	bx	lr
 8006b60:	2000061c 	.word	0x2000061c
 8006b64:	2000121c 	.word	0x2000121c
 8006b68:	20001224 	.word	0x20001224
 8006b6c:	2000122c 	.word	0x2000122c
 8006b70:	20001228 	.word	0x20001228
 8006b74:	20001230 	.word	0x20001230

08006b78 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b085      	sub	sp, #20
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006b80:	4b28      	ldr	r3, [pc, #160]	; (8006c24 <prvInsertBlockIntoFreeList+0xac>)
 8006b82:	60fb      	str	r3, [r7, #12]
 8006b84:	e002      	b.n	8006b8c <prvInsertBlockIntoFreeList+0x14>
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	60fb      	str	r3, [r7, #12]
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	687a      	ldr	r2, [r7, #4]
 8006b92:	429a      	cmp	r2, r3
 8006b94:	d8f7      	bhi.n	8006b86 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	685b      	ldr	r3, [r3, #4]
 8006b9e:	68ba      	ldr	r2, [r7, #8]
 8006ba0:	4413      	add	r3, r2
 8006ba2:	687a      	ldr	r2, [r7, #4]
 8006ba4:	429a      	cmp	r2, r3
 8006ba6:	d108      	bne.n	8006bba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	685a      	ldr	r2, [r3, #4]
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	441a      	add	r2, r3
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	685b      	ldr	r3, [r3, #4]
 8006bc2:	68ba      	ldr	r2, [r7, #8]
 8006bc4:	441a      	add	r2, r3
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	429a      	cmp	r2, r3
 8006bcc:	d118      	bne.n	8006c00 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681a      	ldr	r2, [r3, #0]
 8006bd2:	4b15      	ldr	r3, [pc, #84]	; (8006c28 <prvInsertBlockIntoFreeList+0xb0>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	429a      	cmp	r2, r3
 8006bd8:	d00d      	beq.n	8006bf6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	685a      	ldr	r2, [r3, #4]
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	685b      	ldr	r3, [r3, #4]
 8006be4:	441a      	add	r2, r3
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	681a      	ldr	r2, [r3, #0]
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	601a      	str	r2, [r3, #0]
 8006bf4:	e008      	b.n	8006c08 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006bf6:	4b0c      	ldr	r3, [pc, #48]	; (8006c28 <prvInsertBlockIntoFreeList+0xb0>)
 8006bf8:	681a      	ldr	r2, [r3, #0]
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	601a      	str	r2, [r3, #0]
 8006bfe:	e003      	b.n	8006c08 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681a      	ldr	r2, [r3, #0]
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006c08:	68fa      	ldr	r2, [r7, #12]
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	429a      	cmp	r2, r3
 8006c0e:	d002      	beq.n	8006c16 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	687a      	ldr	r2, [r7, #4]
 8006c14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006c16:	bf00      	nop
 8006c18:	3714      	adds	r7, #20
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c20:	4770      	bx	lr
 8006c22:	bf00      	nop
 8006c24:	2000121c 	.word	0x2000121c
 8006c28:	20001224 	.word	0x20001224

08006c2c <__libc_init_array>:
 8006c2c:	b570      	push	{r4, r5, r6, lr}
 8006c2e:	4d0d      	ldr	r5, [pc, #52]	; (8006c64 <__libc_init_array+0x38>)
 8006c30:	4c0d      	ldr	r4, [pc, #52]	; (8006c68 <__libc_init_array+0x3c>)
 8006c32:	1b64      	subs	r4, r4, r5
 8006c34:	10a4      	asrs	r4, r4, #2
 8006c36:	2600      	movs	r6, #0
 8006c38:	42a6      	cmp	r6, r4
 8006c3a:	d109      	bne.n	8006c50 <__libc_init_array+0x24>
 8006c3c:	4d0b      	ldr	r5, [pc, #44]	; (8006c6c <__libc_init_array+0x40>)
 8006c3e:	4c0c      	ldr	r4, [pc, #48]	; (8006c70 <__libc_init_array+0x44>)
 8006c40:	f000 f8e8 	bl	8006e14 <_init>
 8006c44:	1b64      	subs	r4, r4, r5
 8006c46:	10a4      	asrs	r4, r4, #2
 8006c48:	2600      	movs	r6, #0
 8006c4a:	42a6      	cmp	r6, r4
 8006c4c:	d105      	bne.n	8006c5a <__libc_init_array+0x2e>
 8006c4e:	bd70      	pop	{r4, r5, r6, pc}
 8006c50:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c54:	4798      	blx	r3
 8006c56:	3601      	adds	r6, #1
 8006c58:	e7ee      	b.n	8006c38 <__libc_init_array+0xc>
 8006c5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c5e:	4798      	blx	r3
 8006c60:	3601      	adds	r6, #1
 8006c62:	e7f2      	b.n	8006c4a <__libc_init_array+0x1e>
 8006c64:	08006ef4 	.word	0x08006ef4
 8006c68:	08006ef4 	.word	0x08006ef4
 8006c6c:	08006ef4 	.word	0x08006ef4
 8006c70:	08006efc 	.word	0x08006efc

08006c74 <__retarget_lock_acquire_recursive>:
 8006c74:	4770      	bx	lr

08006c76 <__retarget_lock_release_recursive>:
 8006c76:	4770      	bx	lr

08006c78 <memset>:
 8006c78:	4402      	add	r2, r0
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d100      	bne.n	8006c82 <memset+0xa>
 8006c80:	4770      	bx	lr
 8006c82:	f803 1b01 	strb.w	r1, [r3], #1
 8006c86:	e7f9      	b.n	8006c7c <memset+0x4>

08006c88 <cleanup_glue>:
 8006c88:	b538      	push	{r3, r4, r5, lr}
 8006c8a:	460c      	mov	r4, r1
 8006c8c:	6809      	ldr	r1, [r1, #0]
 8006c8e:	4605      	mov	r5, r0
 8006c90:	b109      	cbz	r1, 8006c96 <cleanup_glue+0xe>
 8006c92:	f7ff fff9 	bl	8006c88 <cleanup_glue>
 8006c96:	4621      	mov	r1, r4
 8006c98:	4628      	mov	r0, r5
 8006c9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006c9e:	f000 b869 	b.w	8006d74 <_free_r>
	...

08006ca4 <_reclaim_reent>:
 8006ca4:	4b2c      	ldr	r3, [pc, #176]	; (8006d58 <_reclaim_reent+0xb4>)
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4283      	cmp	r3, r0
 8006caa:	b570      	push	{r4, r5, r6, lr}
 8006cac:	4604      	mov	r4, r0
 8006cae:	d051      	beq.n	8006d54 <_reclaim_reent+0xb0>
 8006cb0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006cb2:	b143      	cbz	r3, 8006cc6 <_reclaim_reent+0x22>
 8006cb4:	68db      	ldr	r3, [r3, #12]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d14a      	bne.n	8006d50 <_reclaim_reent+0xac>
 8006cba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006cbc:	6819      	ldr	r1, [r3, #0]
 8006cbe:	b111      	cbz	r1, 8006cc6 <_reclaim_reent+0x22>
 8006cc0:	4620      	mov	r0, r4
 8006cc2:	f000 f857 	bl	8006d74 <_free_r>
 8006cc6:	6961      	ldr	r1, [r4, #20]
 8006cc8:	b111      	cbz	r1, 8006cd0 <_reclaim_reent+0x2c>
 8006cca:	4620      	mov	r0, r4
 8006ccc:	f000 f852 	bl	8006d74 <_free_r>
 8006cd0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006cd2:	b111      	cbz	r1, 8006cda <_reclaim_reent+0x36>
 8006cd4:	4620      	mov	r0, r4
 8006cd6:	f000 f84d 	bl	8006d74 <_free_r>
 8006cda:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006cdc:	b111      	cbz	r1, 8006ce4 <_reclaim_reent+0x40>
 8006cde:	4620      	mov	r0, r4
 8006ce0:	f000 f848 	bl	8006d74 <_free_r>
 8006ce4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006ce6:	b111      	cbz	r1, 8006cee <_reclaim_reent+0x4a>
 8006ce8:	4620      	mov	r0, r4
 8006cea:	f000 f843 	bl	8006d74 <_free_r>
 8006cee:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006cf0:	b111      	cbz	r1, 8006cf8 <_reclaim_reent+0x54>
 8006cf2:	4620      	mov	r0, r4
 8006cf4:	f000 f83e 	bl	8006d74 <_free_r>
 8006cf8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006cfa:	b111      	cbz	r1, 8006d02 <_reclaim_reent+0x5e>
 8006cfc:	4620      	mov	r0, r4
 8006cfe:	f000 f839 	bl	8006d74 <_free_r>
 8006d02:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006d04:	b111      	cbz	r1, 8006d0c <_reclaim_reent+0x68>
 8006d06:	4620      	mov	r0, r4
 8006d08:	f000 f834 	bl	8006d74 <_free_r>
 8006d0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006d0e:	b111      	cbz	r1, 8006d16 <_reclaim_reent+0x72>
 8006d10:	4620      	mov	r0, r4
 8006d12:	f000 f82f 	bl	8006d74 <_free_r>
 8006d16:	69a3      	ldr	r3, [r4, #24]
 8006d18:	b1e3      	cbz	r3, 8006d54 <_reclaim_reent+0xb0>
 8006d1a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006d1c:	4620      	mov	r0, r4
 8006d1e:	4798      	blx	r3
 8006d20:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006d22:	b1b9      	cbz	r1, 8006d54 <_reclaim_reent+0xb0>
 8006d24:	4620      	mov	r0, r4
 8006d26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006d2a:	f7ff bfad 	b.w	8006c88 <cleanup_glue>
 8006d2e:	5949      	ldr	r1, [r1, r5]
 8006d30:	b941      	cbnz	r1, 8006d44 <_reclaim_reent+0xa0>
 8006d32:	3504      	adds	r5, #4
 8006d34:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d36:	2d80      	cmp	r5, #128	; 0x80
 8006d38:	68d9      	ldr	r1, [r3, #12]
 8006d3a:	d1f8      	bne.n	8006d2e <_reclaim_reent+0x8a>
 8006d3c:	4620      	mov	r0, r4
 8006d3e:	f000 f819 	bl	8006d74 <_free_r>
 8006d42:	e7ba      	b.n	8006cba <_reclaim_reent+0x16>
 8006d44:	680e      	ldr	r6, [r1, #0]
 8006d46:	4620      	mov	r0, r4
 8006d48:	f000 f814 	bl	8006d74 <_free_r>
 8006d4c:	4631      	mov	r1, r6
 8006d4e:	e7ef      	b.n	8006d30 <_reclaim_reent+0x8c>
 8006d50:	2500      	movs	r5, #0
 8006d52:	e7ef      	b.n	8006d34 <_reclaim_reent+0x90>
 8006d54:	bd70      	pop	{r4, r5, r6, pc}
 8006d56:	bf00      	nop
 8006d58:	20000010 	.word	0x20000010

08006d5c <__malloc_lock>:
 8006d5c:	4801      	ldr	r0, [pc, #4]	; (8006d64 <__malloc_lock+0x8>)
 8006d5e:	f7ff bf89 	b.w	8006c74 <__retarget_lock_acquire_recursive>
 8006d62:	bf00      	nop
 8006d64:	2000128c 	.word	0x2000128c

08006d68 <__malloc_unlock>:
 8006d68:	4801      	ldr	r0, [pc, #4]	; (8006d70 <__malloc_unlock+0x8>)
 8006d6a:	f7ff bf84 	b.w	8006c76 <__retarget_lock_release_recursive>
 8006d6e:	bf00      	nop
 8006d70:	2000128c 	.word	0x2000128c

08006d74 <_free_r>:
 8006d74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006d76:	2900      	cmp	r1, #0
 8006d78:	d048      	beq.n	8006e0c <_free_r+0x98>
 8006d7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d7e:	9001      	str	r0, [sp, #4]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	f1a1 0404 	sub.w	r4, r1, #4
 8006d86:	bfb8      	it	lt
 8006d88:	18e4      	addlt	r4, r4, r3
 8006d8a:	f7ff ffe7 	bl	8006d5c <__malloc_lock>
 8006d8e:	4a20      	ldr	r2, [pc, #128]	; (8006e10 <_free_r+0x9c>)
 8006d90:	9801      	ldr	r0, [sp, #4]
 8006d92:	6813      	ldr	r3, [r2, #0]
 8006d94:	4615      	mov	r5, r2
 8006d96:	b933      	cbnz	r3, 8006da6 <_free_r+0x32>
 8006d98:	6063      	str	r3, [r4, #4]
 8006d9a:	6014      	str	r4, [r2, #0]
 8006d9c:	b003      	add	sp, #12
 8006d9e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006da2:	f7ff bfe1 	b.w	8006d68 <__malloc_unlock>
 8006da6:	42a3      	cmp	r3, r4
 8006da8:	d90b      	bls.n	8006dc2 <_free_r+0x4e>
 8006daa:	6821      	ldr	r1, [r4, #0]
 8006dac:	1862      	adds	r2, r4, r1
 8006dae:	4293      	cmp	r3, r2
 8006db0:	bf04      	itt	eq
 8006db2:	681a      	ldreq	r2, [r3, #0]
 8006db4:	685b      	ldreq	r3, [r3, #4]
 8006db6:	6063      	str	r3, [r4, #4]
 8006db8:	bf04      	itt	eq
 8006dba:	1852      	addeq	r2, r2, r1
 8006dbc:	6022      	streq	r2, [r4, #0]
 8006dbe:	602c      	str	r4, [r5, #0]
 8006dc0:	e7ec      	b.n	8006d9c <_free_r+0x28>
 8006dc2:	461a      	mov	r2, r3
 8006dc4:	685b      	ldr	r3, [r3, #4]
 8006dc6:	b10b      	cbz	r3, 8006dcc <_free_r+0x58>
 8006dc8:	42a3      	cmp	r3, r4
 8006dca:	d9fa      	bls.n	8006dc2 <_free_r+0x4e>
 8006dcc:	6811      	ldr	r1, [r2, #0]
 8006dce:	1855      	adds	r5, r2, r1
 8006dd0:	42a5      	cmp	r5, r4
 8006dd2:	d10b      	bne.n	8006dec <_free_r+0x78>
 8006dd4:	6824      	ldr	r4, [r4, #0]
 8006dd6:	4421      	add	r1, r4
 8006dd8:	1854      	adds	r4, r2, r1
 8006dda:	42a3      	cmp	r3, r4
 8006ddc:	6011      	str	r1, [r2, #0]
 8006dde:	d1dd      	bne.n	8006d9c <_free_r+0x28>
 8006de0:	681c      	ldr	r4, [r3, #0]
 8006de2:	685b      	ldr	r3, [r3, #4]
 8006de4:	6053      	str	r3, [r2, #4]
 8006de6:	4421      	add	r1, r4
 8006de8:	6011      	str	r1, [r2, #0]
 8006dea:	e7d7      	b.n	8006d9c <_free_r+0x28>
 8006dec:	d902      	bls.n	8006df4 <_free_r+0x80>
 8006dee:	230c      	movs	r3, #12
 8006df0:	6003      	str	r3, [r0, #0]
 8006df2:	e7d3      	b.n	8006d9c <_free_r+0x28>
 8006df4:	6825      	ldr	r5, [r4, #0]
 8006df6:	1961      	adds	r1, r4, r5
 8006df8:	428b      	cmp	r3, r1
 8006dfa:	bf04      	itt	eq
 8006dfc:	6819      	ldreq	r1, [r3, #0]
 8006dfe:	685b      	ldreq	r3, [r3, #4]
 8006e00:	6063      	str	r3, [r4, #4]
 8006e02:	bf04      	itt	eq
 8006e04:	1949      	addeq	r1, r1, r5
 8006e06:	6021      	streq	r1, [r4, #0]
 8006e08:	6054      	str	r4, [r2, #4]
 8006e0a:	e7c7      	b.n	8006d9c <_free_r+0x28>
 8006e0c:	b003      	add	sp, #12
 8006e0e:	bd30      	pop	{r4, r5, pc}
 8006e10:	20001234 	.word	0x20001234

08006e14 <_init>:
 8006e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e16:	bf00      	nop
 8006e18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e1a:	bc08      	pop	{r3}
 8006e1c:	469e      	mov	lr, r3
 8006e1e:	4770      	bx	lr

08006e20 <_fini>:
 8006e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e22:	bf00      	nop
 8006e24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e26:	bc08      	pop	{r3}
 8006e28:	469e      	mov	lr, r3
 8006e2a:	4770      	bx	lr
